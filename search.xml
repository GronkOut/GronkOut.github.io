<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS Font</title>
    <url>/css/font/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text


UnitsAbsolutecm센티미티 (centimeter)

1 cm = 1 / 3 in, 1 cm = 96 px / 2.54

mm밀리미터 (millimeter)

1 mm = 0.1 cm

in인치 (inch)

옛 영어 ynche 에서 파생되었다.엄지손가락 너비와 같은 길이로 정해지는 것에서 유래했다.1959 년 2.54 센티미터로 확정되었다.1 in = 2.54 cm, 1 in = 96 px

px픽셀 (pixel)

pictures 의 pics 와 element 의 el 에서 유래한 혼성어이다.화면을 구성하는 가장 기본이 되는 단위이다.1 px = 0.07 em

pt포인트 (point)

인치 (inch) 의 개념으로 1pt ~ 72pt 까지 있다.1 pt = 1 / 72 in, 72 pt = 1 in

pc파이카 (pica)

1785년 François-Ambroise L&#39;éclat Didot 에 의해 만들어 졌다.활자 크기를 재는 단위이다.1 pc = 12 pt, 1 pc = 1 / 6 in

Relativeem.parent &#123;  font-size: 14px; /* 1 em = 14 px */  .child &#123;    font-size: 1.5em; /* 14 * 1.5 = 21px; */    line-height: 1.5; /* 21 * 1.5 = 31.5px; */  &#125;&#125;


영문 대문자 M 의 너비를 기준으로 한 단위이다.

ex
영문 소문자 x 의 너비를 기준으로 한 단위이다.

ch
숫자 0 의 너비를 기준으로 한 단위이다.

rem
root 요소 영문 대문자 M 의 너비를 기준으로 한 단위이다.

vw
viewport 너비의 1% 를 기준으로 한 단위이다.

vh
viewport 높이의 1% 를 기준으로 한 단위이다.

vmin
1 vw 와 1 vh 중에서 작은 값이다.

vmax
1 vw 와 1 vh 중에서 큰 값이다.

lh
요소의 라인 높이를 기준으로 한 단위이다.

Fundamentalshttps://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Fundamentals
font shorthandhttps://developer.mozilla.org/en-US/docs/Web/CSS/fonthttps://developer.mozilla.org/en-US/docs/Web/CSS/font-familyhttps://developer.mozilla.org/en-US/docs/Web/CSS/font-sizehttps://developer.mozilla.org/en-US/docs/Web/CSS/font-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/font-varianthttps://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
div &#123;  /* style variant weight size/line-height family */  font: italic small-caps bold 12px/30px Georgia, serif;&#125;

font-weight


value
Common weight name
Bolder
Lighter



100
Thin (Hairline)
400
100


200
Extra Light (Ultra Light)
400
100


300
Light
400
100


400
Normal (Regular)
700
100


500
Medium
700
100


600
Semi Bold (Demi Bold)
900
400


700
Bold
900
400


800
Extra Bold (Ultra Bold)
900
700


900
Black (Heavy)
900
700


950
Extra Black (Ultra Black)





500 초과의 가중치가 주어지면 가능한 굵은 가중치 중 가장 가까운 것이 사용된다.만약 없다면 얇은 가중치 중 가까운 것이 사용된다.
400 미만의 가중치가 주어지면 가능한 얇은 가중치 중 가장 가까운 것이 사용된다.만약 없다면 굵은 가중치 중 가까운 것이 사용된다.
400 미만의 가중치가 주어지면 가능한 얇은 가중치 중 가장 가까운 것이 사용된다.만약 없다면 굵은 가중치 중 가까운 것이 사용된다.
400 이 주어지면 500 이 사용되고 500 이 불가능하면 500 미만의 폰트 가중치를 위한 경험적 접근이 사용된다.
500 이 주어지면 400 이 사용되고 400 이 불가능하면 400 미만의 폰트 가중치를 위한 경험적 접근이 사용된다.

Web fontshttps://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fontshttps://css-tricks.com/understanding-web-fonts-gettinghttps://css-tricks.com/three-techniques-performant-custom-font-usagehttps://jaicab.com/localFont








FOUC (Flash Of Unstyled Content)FOUT (Flash Of Unstyled Text)
스타일 및 폰트를 다운로드하기 전 순수 마크업 화면만 보여지게 되는 현상 (사용자 측면에서는 오작동으로 인지할 수 있음)


FOFT (Flash of Faux Text)
웹 폰트가 다운로드 되기 전까지 기본 폰트를 사용하여 화면에 보여주고 다운로드가 완료된 후 웹 폰트로 교체 (IE 10 이하)


FOIT (Flash of Invisible Text)
웹 폰트가 다운로드되기 전까지 화면에 보이지 않고 다운로드가 완료된 후 보여짐 (Chrome, Safari, Firefox, Opera 등)


@font-face &#123;  font-family: &#x27;Font&#x27;;  font-style: normal;  font-weight: 400;  /* src: url(&#x27;font.eot&#x27;); */ /* IE 9 Compat Modes */  font-display: fallback;  src: local(&#x27;Font&#x27;), local(&#x27;Font-Regular&#x27;),    /* url(&#x27;font.eot?#iefix&#x27;) format(&#x27;embedded-opentype&#x27;), */ /* IE 6 - IE 8 */    /* url(&#x27;font.woff2&#x27;) format(&#x27;woff2&#x27;), */ /* Super Modern Browsers */    url(&#x27;font.woff&#x27;) format(&#x27;woff&#x27;), /* Modern Browsers */    url(&#x27;font.ttf&#x27;) format(&#x27;truetype&#x27;), /* Safari, Android, iOS */    /* url(&#x27;font.svg#ABeeZee&#x27;) format(&#x27;svg&#x27;); */ /* Legacy iOS */&#125;
]]></content>
      <categories>
        <category>css</category>
        <category>font</category>
      </categories>
  </entry>
  <entry>
    <title>CSS Functions</title>
    <url>/css/functions/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions


Transformmatrixhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix
matrix3dhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d
perspectivehttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/perspective
rotatehttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate
rotate3dhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate3d
rotateXhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotateX
rotateYhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotateY
rotateZhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotateZ
scalehttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale
scale3dhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale3d
scaleXhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scaleX
scaleYhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scaleY
scaleZhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scaleZ
skewhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skew
skewXhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skewX
skewYhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/skewY
translatehttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate
translate3dhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translate3d
translateXhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translateX
translateYhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translateY
translateZhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/translateZ
Mathcalchttps://developer.mozilla.org/en-US/docs/Web/CSS/calc
Safe area for iphoneX/* iOS 11.0 */padding:  calc(constant(safe-area-inset-top) + 0px)  calc(constant(safe-area-inset-right) + 0px)  calc(constant(safe-area-inset-bottom) + 0px)  calc(constant(safe-area-inset-left) + 0px);/* iOS 11.2 이상 */padding:  calc(env(safe-area-inset-top) + 0px)  calc(env(safe-area-inset-right) + 0px)  calc(env(safe-area-inset-bottom) + 0px)  calc(env(safe-area-inset-left) + 0px);

clamphttps://developer.mozilla.org/en-US/docs/Web/CSS/clamp
font-size: clamp(1.1rem, 1vw + 1.1rem, 2.5rem); /* 최소, 최대, 선호 값 */

maxhttps://developer.mozilla.org/en-US/docs/Web/CSS/max
/* width: 80%; *//* min-width: 500px; */width: max(80%, 500px); /* 기본 80%, 최소 500px */

minhttps://developer.mozilla.org/en-US/docs/Web/CSS/min
/* width: 80%; *//* max-width: 700px; */width: min(80%, 700px); /* 기본 80%, 최대 700px */

abshttps://developer.mozilla.org/en-US/docs/Web/CSS/abs
Filterblurhttps://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/blur
brightnesshttps://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/brightness
contrasthttps://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/contrast
drop-shadowhttps://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/drop-shadow
grayscalehttps://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/grayscale
hue-rotatehttps://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/hue-rotate
inverthttps://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/invert
opacityhttps://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/opacity
saturatehttps://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/saturate
sepiahttps://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/sepia
Colorcolorhttps://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color
color-mixhttps://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix
color-contrasthttps://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-contrast
device-cmykhttps://developer.mozilla.org/en-US/docs/Web/CSS/color_value/device-cmyk
hslhttps://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl
hslahttps://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsla
hwbhttps://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb
labhttps://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lab
lchhttps://developer.mozilla.org/en-US/docs/Web/CSS/color_value/lch
rgbhttps://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb
rgbahttps://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgba
Imageconic-gradienthttps://developer.mozilla.org/en-US/docs/Web/CSS/gradient/conic-gradient
imagehttps://developer.mozilla.org/en-US/docs/Web/CSS/image/image
image-sethttps://developer.mozilla.org/en-US/docs/Web/CSS/image/image-set
linear-gradienthttps://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient
radial-gradienthttps://developer.mozilla.org/en-US/docs/Web/CSS/gradient/radial-gradient
repeating-linear-gradienthttps://developer.mozilla.org/en-US/docs/Web/CSS/gradient/repeating-linear-gradient
repeating-radial-gradienthttps://developer.mozilla.org/en-US/docs/Web/CSS/gradient/repeating-radial-gradient
repeating-conic-gradienthttps://developer.mozilla.org/en-US/docs/Web/CSS/gradient/repeating-conic-gradient
cross-fadehttps://developer.mozilla.org/en-US/docs/Web/CSS/cross-fade
elementhttps://developer.mozilla.org/en-US/docs/Web/CSS/element
painthttps://developer.mozilla.org/en-US/docs/Web/CSS/image/paint
Countercounterhttps://developer.mozilla.org/en-US/docs/Web/CSS/counter
countershttps://developer.mozilla.org/en-US/docs/Web/CSS/counters
symbolshttps://developer.mozilla.org/en-US/docs/Web/CSS/symbols
Shapecirclehttps://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/circle
ellipsehttps://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/ellipse
insethttps://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/inset
polygonhttps://developer.mozilla.org/en-US/docs/Web/CSS/basic-shape/polygon
pathhttps://developer.mozilla.org/en-US/docs/Web/CSS/path
Referenceattrhttps://developer.mozilla.org/en-US/docs/Web/CSS/attr
envhttps://developer.mozilla.org/en-US/docs/Web/CSS/env
urlhttps://developer.mozilla.org/en-US/docs/Web/CSS/url
varhttps://developer.mozilla.org/en-US/docs/Web/CSS/var

  


Gridfit-contenthttps://developer.mozilla.org/en-US/docs/Web/CSS/fit-content
min-contenthttps://developer.mozilla.org/en-US/docs/Web/CSS/min-content
max-contenthttps://developer.mozilla.org/en-US/docs/Web/CSS/max-content
minmaxhttps://developer.mozilla.org/en-US/docs/Web/CSS/minmax
repeathttps://developer.mozilla.org/en-US/docs/Web/CSS/repeat
]]></content>
      <categories>
        <category>css</category>
        <category>functions</category>
      </categories>
  </entry>
  <entry>
    <title>CSS Layout</title>
    <url>/css/layout/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/CSS/flex
  https://css-tricks.com/snippets/css/a-guide-to-flexbox
  
  https://developer.mozilla.org/en-US/docs/Web/CSS/grid
  https://css-tricks.com/snippets/css/complete-guide-grid


GeneralAlign centerhttps://css-tricks.com/centering-css-complete-guide

  
    absolute
    transform
    flex
    grid
    table
  
  
    
&lt;div class=&quot;container&quot;&gt;  &lt;div class=&quot;content&quot;&gt;text&lt;/div&gt;&lt;/div&gt;

.container &#123;  position: relative;  .content &#123;    position: absolute;    inset: 0;    margin: auto;    width: 100px;    height: 100px;  &#125;&#125;


컨텐츠의 너비&#x2F;높이 값이 필요하다.        

&lt;div class=&quot;container&quot;&gt;  &lt;div class=&quot;content&quot;&gt;text&lt;/div&gt;&lt;/div&gt;

.container &#123;  position: relative;  .content &#123;    position: absolute;    top: 50%;    left: 50%;    transform: translate(-50% -50%);  &#125;&#125;


소수점으로 계산되면 선명하게 보이지 않을 수 있다.        

&lt;div class=&quot;container&quot;&gt;  &lt;div class=&quot;content&quot;&gt;text&lt;/div&gt;&lt;/div&gt;

.container &#123;  display: flex;  align-items: center;  justify-content: center;&#125;

    
    
&lt;div class=&quot;container&quot;&gt;  &lt;div class=&quot;content&quot;&gt;text&lt;/div&gt;&lt;/div&gt;

.container &#123;  display: grid;  place-items: center;&#125;

    
    
&lt;div class=&quot;container&quot;&gt;  &lt;div class=&quot;inner&quot;&gt;    &lt;div class=&quot;content&quot;&gt;text&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;

.container &#123;  display: table;  table-layout: fixed;  .inner &#123;    display: table-cell;    height: 100%;    vertical-align: middle;  &#125;&#125;


table-cell 로 사용 할 엘리먼트가 추가로 필요하다.      



DivisionDescription list
  


Overflow scroll list
  


Static with division
  


Flex layout
  


Grid layout
  


Masonry layout
  


DecorateRibbon
  


FlexContainerdisplay

.container &#123;  /* flex, inline-flex */  display: flex;&#125;

flex-flowhttps://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow

flex-direction, flex-wrap 속성을 축약한다.

flex-directionhttps://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction


.container &#123;  /* row, row-reverse, column, column-reverse */  flex-direction: row;&#125;

flex-wraphttps://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap


.container &#123;  /* nowrap, wrap, wrap-reverse */  flex-wrap: nowrap;&#125;

justify-contenthttps://developer.mozilla.org/en-US/docs/Web/CSS/justify-content


.container &#123;  /* flex-start, flex-end, center, space-between, space-around, space-evenly, start, end, left, right */  justify-content: flex-start;&#125;

align-itemshttps://developer.mozilla.org/en-US/docs/Web/CSS/align-items


.container &#123;  /* stretch, flex-start, flex-end, center, baseline, first baseline, last baseline, start, end, self-start, self-end */  align-items: stretch;&#125;

align-contenthttps://developer.mozilla.org/en-US/docs/Web/CSS/align-content


.container &#123;  /* flex-start, flex-end, center, space-between, space-around, space-evenly, stretch, start, end, baseline, first baseline, last baseline */  align-content: flex-start;&#125;

gap.container &#123;  /* top right bottom left */  gap: 10px;&#125;


아이템의 간격을 정의한다.

Items

orderhttps://developer.mozilla.org/en-US/docs/Web/CSS/order


.item &#123;  order: 0;&#125;

flexhttps://developer.mozilla.org/en-US/docs/Web/CSS/flex

flex-grow, flex-shrink, flex-basis 속성을 축약한다.

flex-growhttps://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow


.item &#123;  flex-grow: 0;&#125;

flex-shrinkhttps://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink
.item &#123;  flex-shrink: 1;&#125;

flex-basishttps://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis
.item &#123;  flex-basis: auto;&#125;

align-selfhttps://developer.mozilla.org/en-US/docs/Web/CSS/align-self


.item &#123;  /* auto, flex-start, flex-end, center, baseline, stretch */  align-self: auto;&#125;

justify-selfhttps://developer.mozilla.org/en-US/docs/Web/CSS/justify-self

flex 레이아웃에서 justify-self 속성은 무시된다.

GridContainerdisplay.container &#123;  /* grid, inline-grid */  display: grid;&#125;

grid
grid-template-columns, grid-template-rows, grid-template-areas, grid-auto-columns, grid-auto-rows, grid-auto-flow 속성을 축약한다.

grid-template


grid-template-columns, grid-template-rows, grid-template-areas 속성을 축약한다.

grid-template-columns.container &#123;  /* grid-template-columns: 40px 50px auto 50px 40px; */  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];  /* grid-template-columns: repeat(3, 20px [col-start]); */  /* grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start]; */  /* grid-column-start: col-start 2; */  /* grid-template-columns: 1fr 50px 1fr 1fr; */&#125;

grid-template-rows.container &#123;  /* grid-template-rows: 25% 100px auto; */  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];  /* grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end]; */  /* grid-column-start: col-start 2; */  /* grid-template-columns: 1fr 50px 1fr 1fr; */&#125;

grid-template-areas

.item-a &#123; grid-area: header; &#125;.item-b &#123; grid-area: main; &#125;.item-c &#123; grid-area: sidebar; &#125;.item-d &#123; grid-area: footer; &#125;.container &#123;  display: grid;  grid-template-columns: 50px 50px 50px 50px;  grid-template-rows: auto;  grid-template-areas:    &quot;header header header header&quot;    &quot;main main . sidebar&quot;    &quot;footer footer footer footer&quot;;&#125;

grid-auto-columns.container &#123;  grid-template-columns: 60px 60px;&#125;

grid-auto-rows.container &#123;  grid-template-rows: 90px 90px;&#125;

grid-auto-flow.container &#123;  /* row, column, row dense, column dense */  grid-auto-flow: row;&#125;

gap


column-gap, row-gap 속성을 축약한다.

column-gap.container &#123;  column-gap: 10px;&#125;

row-gap.container &#123;  row-gap: 15px;&#125;

place-items
justify-items, align-items 속성을 축약한다.

justify-items




.container &#123;  /* start, center, end, stretch */  justify-items: start;&#125;

align-items




.container &#123;  /* start, center, end, stretch */  align-items: start;&#125;

place-content
justify-content, align-content 속성을 축약한다.

justify-content







.container &#123;  /* start, center, end, stretch, space-around, space-between, space-evenly */  justify-content: start;&#125;

align-content







.container &#123;  /* start, center, end, stretch, space-around, space-between, space-evenly */  align-content: start;&#125;

Itemsgrid-column

.item-a &#123;  grid-column-start: 2;  grid-column-end: five;  grid-row-start: row1-start;  grid-row-end: 3;&#125;


grid-column-start, grid-column-end 속성을 축약한다.

grid-row

.item-b &#123;  grid-column-start: 1;  grid-column-end: span col4-start;  grid-row-start: 2;  grid-row-end: span 2;&#125;


grid-row-start, grid-row-end 속성을 축약한다.

grid-area.item &#123;  grid-area: row-start column-start row-end column-end;&#125;


영역 이름을 설정하거나 grid-row, grid-column 속성을 축약한다.

justify-self




.item-a &#123;  /* start, center, end, stretch */  justify-self: start;&#125;

align-self




.item-a &#123;  /* start, center, end, stretch */  align-self: start;&#125;

place-self
justify-self, align-self 속성을 축약한다.

order
그리드 아이템의 배치 순서를 지정한다.

]]></content>
      <categories>
        <category>css</category>
        <category>layout</category>
      </categories>
  </entry>
  <entry>
    <title>CSS Properties</title>
    <url>/css/properties/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/CSS/Reference


Animation &amp; Transitionanimationhttps://developer.mozilla.org/en-US/docs/Web/CSS/animationhttps://developer.mozilla.org/en-US/docs/Web/CSS/animation-namehttps://developer.mozilla.org/en-US/docs/Web/CSS/animation-durationhttps://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-functionhttps://developer.mozilla.org/en-US/docs/Web/CSS/animation-delayhttps://developer.mozilla.org/en-US/docs/Web/CSS/animation-iteration-counthttps://developer.mozilla.org/en-US/docs/Web/CSS/animation-directionhttps://developer.mozilla.org/en-US/docs/Web/CSS/animation-fill-modehttps://developer.mozilla.org/en-US/docs/Web/CSS/animation-play-state
https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timeline
Basic keyframediv &#123;  color: #fff;  /* @keyframes duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name */  animation: keyframe 1s ease-in 1s 1 normal forwards;  animation: keyframe 1s linear infinite alternate;&#125;@keyframes keyframe &#123;  0% &#123; color: #f00; &#125;  50% &#123; color: #0f0; &#125;  100% &#123; color: #00f; &#125;&#125;

Steps keyframediv &#123;  animation: keyframe 1s steps(9) infinite; /* 1초 동안 9번 이동 (10개 프레임) */  animation-fill-mode: forwards;&#125;@keyframes keyframe &#123;  0% &#123; background-position: 0 0; &#125;  100% &#123; background-position: 0 (10px - 100px); &#125; /* 1개 프레임 높이 - 전체 높이 */&#125;

Ease variableshttps://developer.mozilla.org/en-US/docs/Web/CSS/easing-function
:root &#123;  --ease-in-quad: cubic-bezier(0.55, 0.085, 0.68, 0.53);  --ease-in-cubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);  --ease-in-quart: cubic-bezier(0.895, 0.03, 0.685, 0.22);  --ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06);  --ease-in-expo: cubic-bezier(0.95, 0.05, 0.795, 0.035);  --ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.335);  --ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);  --ease-out-cubic: cubic-bezier(0.215, 0.61, 0.355, 1);  --ease-out-quart: cubic-bezier(0.165, 0.84, 0.44, 1);  --ease-out-quint: cubic-bezier(0.23, 1, 0.32, 1);  --ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);  --ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);  --ease-in-out-quad: cubic-bezier(0.455, 0.03, 0.515, 0.955);  --ease-in-out-cubic: cubic-bezier(0.645, 0.045, 0.355, 1);  --ease-in-out-quart: cubic-bezier(0.77, 0, 0.175, 1);  --ease-in-out-quint: cubic-bezier(0.86, 0, 0.07, 1);  --ease-in-out-expo: cubic-bezier(1, 0, 0, 1);  --ease-in-out-circ: cubic-bezier(0.785, 0.135, 0.15, 0.86);&#125;div &#123;  transition: all 1s var(--ease-in-quad);&#125;

offsethttps://developer.mozilla.org/en-US/docs/Web/CSS/offsethttps://developer.mozilla.org/en-US/docs/Web/CSS/offset-anchorhttps://developer.mozilla.org/en-US/docs/Web/CSS/offset-distancehttps://developer.mozilla.org/en-US/docs/Web/CSS/offset-pathhttps://developer.mozilla.org/en-US/docs/Web/CSS/offset-positionhttps://developer.mozilla.org/en-US/docs/Web/CSS/offset-rotate
transitionhttps://developer.mozilla.org/en-US/docs/Web/CSS/transitionhttps://developer.mozilla.org/en-US/docs/Web/CSS/transition-delayhttps://developer.mozilla.org/en-US/docs/Web/CSS/transition-durationhttps://developer.mozilla.org/en-US/docs/Web/CSS/transition-propertyhttps://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function








transition
모든 변화 속성


transition-property
적용할 속성, 복수 지정가능 (전체 all)


transition-duration
모션 시간


transition-timing-function
모션종류


transition-delay
딜레이 시간


will-changehttps://developer.mozilla.org/en-US/docs/Web/CSS/will-change
Border &amp; Outlineborderhttps://developer.mozilla.org/en-US/docs/Web/CSS/borderhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-width
https://developer.mozilla.org/en-US/docs/Web/CSS/border-tophttps://developer.mozilla.org/en-US/docs/Web/CSS/border-top-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-top-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width
https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottomhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width
https://developer.mozilla.org/en-US/docs/Web/CSS/border-lefthttps://developer.mozilla.org/en-US/docs/Web/CSS/border-left-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-left-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width
https://developer.mozilla.org/en-US/docs/Web/CSS/border-righthttps://developer.mozilla.org/en-US/docs/Web/CSS/border-right-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-right-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width
https://developer.mozilla.org/en-US/docs/Web/CSS/border-collapse
https://developer.mozilla.org/en-US/docs/Web/CSS/border-spacing

  


border-blockhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-blockhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-block-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-block-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-block-width
https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-block-start-width
https://developer.mozilla.org/en-US/docs/Web/CSS/border-block-endhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-block-end-width
border-inlinehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-inlinehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-width
https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-start-width
https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-endhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end-width
border-radiushttps://developer.mozilla.org/en-US/docs/Web/CSS/border-radiushttps://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radiushttps://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radiushttps://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radiushttps://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius
https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-start-radiushttps://developer.mozilla.org/en-US/docs/Web/CSS/border-start-end-radius
https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-start-radiushttps://developer.mozilla.org/en-US/docs/Web/CSS/border-end-end-radius
border-imagehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-imagehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-image-outsethttps://developer.mozilla.org/en-US/docs/Web/CSS/border-image-repeathttps://developer.mozilla.org/en-US/docs/Web/CSS/border-image-slicehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-image-sourcehttps://developer.mozilla.org/en-US/docs/Web/CSS/border-image-width
div &#123;  /* 이미지 | 슬라이스 */  border-image: linear-gradient(red, blue) 27;    /* 이미지 | 슬라이스 | 반복 */  border-image: url(&quot;/img/border.png&quot;) 27 space;    /* 이미지 | 슬라이스 | 너비 */  border-image: linear-gradient(red, blue) 27 / 35px;    /* 이미지 | 슬라이스 | 너비 | 거리 | 반복 */  border-image: url(&quot;/img/border.png&quot;) 27 23 / 50px 30px / 1rem round space;  /* 모든 방향 */  border-image-slice: 30%;    /* 세로 가로 */  border-image-slice: 10% 30%;    /* 위 가로 아래 */  border-image-slice: 30 30% 45;    /* 위 오른쪽 아래 왼쪽 */  border-image-slice: 7 12 14 5;    /* 배경 (fill 은 선택적으로 아무데나 작성 가능) */  border-image-slice: 10% fill 7 12;&#125;


  


outlinehttps://developer.mozilla.org/en-US/docs/Web/CSS/outlinehttps://developer.mozilla.org/en-US/docs/Web/CSS/outline-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/outline-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/outline-width
https://developer.mozilla.org/en-US/docs/Web/CSS/outline-offset
Color &amp; Backgroundcolorhttps://developer.mozilla.org/en-US/docs/Web/CSS/color
accent-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/accent-color
caret-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/caret-color
color-schemehttps://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
forced-color-adjusthttps://developer.mozilla.org/en-US/docs/Web/CSS/forced-color-adjust
print-color-adjusthttps://developer.mozilla.org/en-US/docs/Web/CSS/print-color-adjust
backgroundhttps://developer.mozilla.org/en-US/docs/Web/CSS/backgroundhttps://developer.mozilla.org/en-US/docs/Web/CSS/background-attachmenthttps://developer.mozilla.org/en-US/docs/Web/CSS/background-cliphttps://developer.mozilla.org/en-US/docs/Web/CSS/background-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/background-imagehttps://developer.mozilla.org/en-US/docs/Web/CSS/background-originhttps://developer.mozilla.org/en-US/docs/Web/CSS/background-positionhttps://developer.mozilla.org/en-US/docs/Web/CSS/background-position-xhttps://developer.mozilla.org/en-US/docs/Web/CSS/background-position-yhttps://developer.mozilla.org/en-US/docs/Web/CSS/background-repeathttps://developer.mozilla.org/en-US/docs/Web/CSS/background-size
div &#123;  /* color image position(x y)/size(width height) repeat attachment */  background: #f00 url(image.jpg) center/cover no-repeat fixed;&#125;

Effect &amp; Filteropacityhttps://developer.mozilla.org/en-US/docs/Web/CSS/opacity
text-shadowhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow
box-shadowhttps://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow
div &#123;  /* Keyword values */  box-shadow: none;    /* offset-x | offset-y | color */  box-shadow: 60px -16px teal;    /* offset-x | offset-y | blur-radius | color */  box-shadow: 10px 5px 5px black;    /* offset-x | offset-y | blur-radius | spread-radius | color */  box-shadow: 2px 2px 2px 1px rgba(0, 0, 0, 0.2);    /* inset | offset-x | offset-y | color */  box-shadow: inset 5em 1em gold;    /* Any number of shadows, separated by commas */  box-shadow: 3px 3px red, -1em 0 0.4em olive;&#125;

background-blend-modehttps://developer.mozilla.org/en-US/docs/Web/CSS/background-blend-mode
https://css-tricks.com/almanac/properties/b/background-blend-mode
div &#123;  /* normal, multiply, screen, overlay, darken, lighten, color, saturation, color, luminosity */  background-blend-mode: normal;  background: url(&#x27;image1.png&#x27;), url(&#x27;image2.png&#x27;);&#125;


1 개 이상의 배경 이미지를 혼합 할 때 사용한다.

mix-blend-modehttps://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode
https://css-tricks.com/almanac/properties/m/mix-blend-mode
&lt;div&gt;  &lt;img src=&quot;image1.png&quot;&gt;  &lt;img src=&quot;image2.png&quot;&gt;&lt;/div&gt;

img:first-child &#123;  /* normal, multiply, screen, overlay, darken, lighten, color-dodge, color-burn,  hard-light, soft-light, difference, exclusion, hue, saturation, color, luminosity */  mix-blend-mode: multiply;&#125;


엘리먼트를 혼합 할 때 사용한다.

isolationhttps://developer.mozilla.org/en-US/docs/Web/CSS/isolation
filterhttps://developer.mozilla.org/en-US/docs/Web/CSS/filter
https://css-tricks.com/almanac/properties/f/filter
div &#123;  filter: blur(5px);  filter: brightness(0.4);  filter: contrast(200%);  filter: drop-shadow(16px 16px 20px blue);  filter: grayscale(50%);  filter: hue-rotate(90deg);  filter: invert(75%);  filter: opacity(25%);  filter: saturate(30%);  filter: sepia(60%);&#125;

backdrop-filterhttps://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter
div &#123;  backdrop-filter: blur(50px);&#125;


배경에 효과를 줄 때 사용한다.

Content &amp; Text &amp; Mediafonthttps://developer.mozilla.org/en-US/docs/Web/CSS/fonthttps://developer.mozilla.org/en-US/docs/Web/CSS/font-familyhttps://developer.mozilla.org/en-US/docs/Web/CSS/font-sizehttps://developer.mozilla.org/en-US/docs/Web/CSS/font-style
https://developer.mozilla.org/en-US/docs/Web/CSS/font-varianthttps://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-alternateshttps://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-capshttps://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-east-asianhttps://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-ligatureshttps://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numerichttps://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-positionhttps://developer.mozilla.org/en-US/docs/Web/CSS/font-variation-settings
https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/ascent-overridehttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display
https://developer.mozilla.org/en-US/docs/Web/CSS/font-stretch
https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings
https://developer.mozilla.org/en-US/docs/Web/CSS/font-kerning
https://developer.mozilla.org/en-US/docs/Web/CSS/font-language-override
https://developer.mozilla.org/en-US/docs/Web/CSS/font-optical-sizing
https://developer.mozilla.org/en-US/docs/Web/CSS/font-size-adjust
https://developer.mozilla.org/en-US/docs/Web/CSS/font-synthesis



font-display value
Description



auto
브라우저의 기본동작에 맡기는 방식


block
FOIT 방식 (타임아웃까지 텍스트를 보여주지 않음)


swap
응답이 올때까지 무한정 대기, 그 전까지 기본폰트 노출 (꼭 적용해야만하는 중요 폰트일 경우에 추천)


fallback
100ms 내외의 시간 동안만 블럭하고 기본폰트 노출 (응답이 오면 해당 폰트로 변경하지만 짧은 시간만 기다림)


optional
100ms 내외의 시간 동안만 블럭하고 기본폰트 노출 (그 후에는 대체를 하지 않음)



  css font


text-renderinghttps://developer.mozilla.org/en-US/docs/Web/CSS/text-rendering
text-size-adjusthttps://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust
text-alignhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-align
https://developer.mozilla.org/en-US/docs/Web/CSS/text-align-last
vertical-alignhttps://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align
text-justifyhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-justify
text-orientationhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-orientation
text-overflowhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow
Text overflow ellipsis.ellipsis &#123;  display: block;  overflow: hidden;  text-overflow: ellipsis;  white-space: nowrap;  // direction: rtl; // 앞에서 말줄임 처리&#125;


  


line-heighthttps://developer.mozilla.org/en-US/docs/Web/CSS/line-height
https://developer.mozilla.org/en-US/docs/Web/CSS/line-height-step
word-spacinghttps://developer.mozilla.org/en-US/docs/Web/CSS/word-spacing
letter-spacinghttps://developer.mozilla.org/en-US/docs/Web/CSS/letter-spacing
line-breakhttps://developer.mozilla.org/en-US/docs/Web/CSS/line-break
word-breakhttps://developer.mozilla.org/en-US/docs/Web/CSS/word-break








normal
기본값, 긴 단어에서 한글은 글자 단위 개행하지만, 영어는 글자 단위 개행하지 않음


break-all
한글은 normal 과 같이 동작하며, 영어는 글자 단위로 개행 (모든 언어에서 글자 단위로 개행)


keep-all
모든 언어 단어 단위로 개행


white-spacehttps://developer.mozilla.org/en-US/docs/Web/CSS/white-space








normal
기본값, 여러 칸의 공백이나 개행을 공백 한 개로 인식. 지정된 너비의 끝에서 자동으로 개행


pre
띄어쓰기는 실제 입력한 공백 그대로, 개행은 엔터를 입력한 그대로 출력. 지정된 너비의 끝에서 강제 개행하지 않음


pre-line
pre 와 동일하지만, 지정된 너비의 끝에서 자동으로 개행


nowrap
여러칸의 공백이나 개행을 공백 한 칸으로 인식. 지정된 너비의 끝에서 강제 개행하지 않음


text-indenthttps://developer.mozilla.org/en-US/docs/Web/CSS/text-indent
Image replacement/* 해당 요소의 텍스트를 감춤 */.text-indent &#123;  overflow: hidden;  width: 100px;  whitespace: nowrap;  text-indent: 101%;&#125;

tab-sizehttps://developer.mozilla.org/en-US/docs/Web/CSS/tab-size
writing-modehttps://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode
directionhttps://developer.mozilla.org/en-US/docs/Web/CSS/direction
unicode-bidihttps://developer.mozilla.org/en-US/docs/Web/CSS/unicode-bidi
contenthttps://developer.mozilla.org/en-US/docs/Web/CSS/content
text-transformhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-transform
translatehttps://developer.mozilla.org/en-US/docs/Web/CSS/translate

Chrome 104 (2022-08-02) 에 추가 되었다.

rubyhttps://developer.mozilla.org/en-US/docs/Web/CSS/ruby-align
https://developer.mozilla.org/en-US/docs/Web/CSS/ruby-position
quoteshttps://developer.mozilla.org/en-US/docs/Web/CSS/quotes
hyphenshttps://developer.mozilla.org/en-US/docs/Web/CSS/hyphens








none
줄바꿈 하지 않음


manual
하이픈을 이용하여 줄바꿈 적용


auto
언어에 따라 다름 (lang 속성 필요)


hyphenate-characterhttps://developer.mozilla.org/en-US/docs/Web/CSS/hyphenate-character
text-decorationhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-decorationhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-linehttps://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-thickness
https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-skip
https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration-skip-ink
text-underline-positionhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-underline-position
text-emphasishttps://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasishttps://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-style
https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis-position
-webkit-line-clamphttps://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp
Text overflow ellipsis line clamp$line: 2;$line-height: 14px;.line-clamp &#123;  display: -webkit-box;  overflow: hidden;  -webkit-line-clamp: $line;  -webkit-box-orient: vertical;  max-height: $line * $line-height;  white-space: normal;  word-break: keep-all;  word-wrap: break-word;&#125;

initial-letterhttps://developer.mozilla.org/en-US/docs/Web/CSS/initial-letter
https://developer.mozilla.org/en-US/docs/Web/CSS/initial-letter-align

대부분의 브라우저가 지원하지 않는다.

text-combine-uprighthttps://developer.mozilla.org/en-US/docs/Web/CSS/text-combine-upright

대부분의 브라우저가 지원하지 않는다.

hanging-punctuationhttps://developer.mozilla.org/en-US/docs/Web/CSS/hanging-punctuation

대부분의 브라우저가 지원하지 않는다.

image-renderinghttps://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering
img &#123;  /* auto, smooth, high-quality, crisp-edges, pixelated */  image-rendering: auto;&#125;

image-resolutionhttps://developer.mozilla.org/en-US/docs/Web/CSS/image-resolution
Transform &amp; 3Dtransformhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform
https://developer.mozilla.org/en-US/docs/Web/CSS/transform-box
https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin
https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style








translate(translateX, translateY)
특정 크기만큼 이동


translate3d(translateX, translateY, translateZ)
특정 크기만큼 이동


translateX(translateX)
X 축으로 특정 크기만큼 이동


translateY(translateY)
Y 축으로 특정 크기만큼 이동


translateZ(translateZ)
Z 축으로 특정 크기만큼 이동


scale(scaleX, scaleY)
특정 크기만큼 확대 및 축소


scale3d(scaleX, scaleY, scaleZ)
특정 크기만큼 확대 및 축소


scaleX(scaleX)
X 축으로 특정 크기만큼 확대 및 축소


scaleY(scaleY)
Y 축으로 특정 크기만큼 확대 및 축소


scaleZ(scaleZ)
Z 축으로 특정 크기만큼 확대 및 축소


rotate(angleZ)
특정 각도만큼 회전


rotate3d(angleX, angleY, angleZ)
특정 각도만큼 회전


rotateX(angleX)
X 축으로 특정 각도만큼 회전


rotateY(angleY)
Y 축으로 특정 각도만큼 회전


rotateZ(angleZ)
Z 축으로 특정 각도만큼 회전


skew(angleX, angleY)
특정 각도만큼 기울임


skewX(angleX)
X 축으로 특정 각도만큼 기울임


skewY(angleY)
Y 축으로 특정 각도만큼 기울임


perspective
원근법 (일반적으로 200 ~ 400 사이 값 적용)


transform-style
변환 적용을 자손에게도 적용할지 여부


transform-origin
변환 중심점 지정


backface-visibility
뒷면 표시 여부



  


perspectivehttps://developer.mozilla.org/en-US/docs/Web/CSS/perspective
https://developer.mozilla.org/en-US/docs/Web/CSS/perspective-origin
backface-visibilityhttps://developer.mozilla.org/en-US/docs/Web/CSS/backface-visibility
rotatehttps://developer.mozilla.org/en-US/docs/Web/CSS/rotate

Chrome 104 (2022-08-02) 에 추가 되었다.

scalehttps://developer.mozilla.org/en-US/docs/Web/CSS/scale

Chrome 104 (2022-08-02) 에 추가 되었다.

Listlist-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/list-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/list-style-imagehttps://developer.mozilla.org/en-US/docs/Web/CSS/list-style-positionhttps://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type
counterhttps://developer.mozilla.org/en-US/docs/Web/CSS/counter-sethttps://developer.mozilla.org/en-US/docs/Web/CSS/counter-resethttps://developer.mozilla.org/en-US/docs/Web/CSS/counter-increment

  


Layoutdisplayhttps://developer.mozilla.org/en-US/docs/Web/CSS/display
flexhttps://developer.mozilla.org/en-US/docs/Web/CSS/flexhttps://developer.mozilla.org/en-US/docs/Web/CSS/flex-growhttps://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrinkhttps://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis
https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flowhttps://developer.mozilla.org/en-US/docs/Web/CSS/flex-directionhttps://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap

  css layout


gridhttps://developer.mozilla.org/en-US/docs/Web/CSS/gridhttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-columnshttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flowhttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-rowshttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-templatehttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areashttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columnshttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-rows
https://developer.mozilla.org/en-US/docs/Web/CSS/grid-areahttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-rowhttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-endhttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-columnhttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-end

  css layout


place-contenthttps://developer.mozilla.org/en-US/docs/Web/CSS/place-contenthttps://developer.mozilla.org/en-US/docs/Web/CSS/align-contenthttps://developer.mozilla.org/en-US/docs/Web/CSS/justify-content
place-itemshttps://developer.mozilla.org/en-US/docs/Web/CSS/place-itemshttps://developer.mozilla.org/en-US/docs/Web/CSS/align-itemshttps://developer.mozilla.org/en-US/docs/Web/CSS/justify-items
place-selfhttps://developer.mozilla.org/en-US/docs/Web/CSS/place-selfhttps://developer.mozilla.org/en-US/docs/Web/CSS/align-selfhttps://developer.mozilla.org/en-US/docs/Web/CSS/justify-self
gaphttps://developer.mozilla.org/en-US/docs/Web/CSS/gap
https://developer.mozilla.org/en-US/docs/Web/CSS/row-gap
orderhttps://developer.mozilla.org/en-US/docs/Web/CSS/order
align-trackshttps://developer.mozilla.org/en-US/docs/Web/CSS/align-tracks
table-layouthttps://developer.mozilla.org/en-US/docs/Web/CSS/table-layout
caption-sidehttps://developer.mozilla.org/en-US/docs/Web/CSS/caption-side
empty-cellshttps://developer.mozilla.org/en-US/docs/Web/CSS/empty-cells
overflowhttps://developer.mozilla.org/en-US/docs/Web/CSS/overflowhttps://developer.mozilla.org/en-US/docs/Web/CSS/overflow-xhttps://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y
https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-anchor
https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-block
https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-clip-margin
https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-inline
https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap








normal
기본값, 개행을 하지 않음


break-word
공백없는 영문 또는 특수문자일 경우 글자 단위로 개행


floathttps://developer.mozilla.org/en-US/docs/Web/CSS/float

float 된 부모 요소에 overflow: auto; 추가
float 된 부모 요소에 overflow: hidden; 추가
float 된 부모 요소에 display: flow-root; 추가
float 된 부모 요소에 display: inline-block; 추가
float 된 부모 요소에 float 속성 추가
float 된 부모 요소의 마지막 자식 요소를 clear

clearhttps://developer.mozilla.org/en-US/docs/Web/CSS/clear
.clearfix &#123;  &amp;:before, &amp;:after &#123;    display: table;    content: &#x27;&#x27;;  &#125;  &amp;:after &#123;    clear: both;  &#125;****&#125;

positionhttps://developer.mozilla.org/en-US/docs/Web/CSS/position
sticky
  


insethttps://developer.mozilla.org/en-US/docs/Web/CSS/insethttps://developer.mozilla.org/en-US/docs/Web/CSS/tophttps://developer.mozilla.org/en-US/docs/Web/CSS/righthttps://developer.mozilla.org/en-US/docs/Web/CSS/bottomhttps://developer.mozilla.org/en-US/docs/Web/CSS/left
https://developer.mozilla.org/en-US/docs/Web/CSS/inset-blockhttps://developer.mozilla.org/en-US/docs/Web/CSS/inset-block-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/inset-block-end
https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inlinehttps://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-end
box-sizinghttps://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing
marginhttps://developer.mozilla.org/en-US/docs/Web/CSS/marginhttps://developer.mozilla.org/en-US/docs/Web/CSS/margin-tophttps://developer.mozilla.org/en-US/docs/Web/CSS/margin-righthttps://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottomhttps://developer.mozilla.org/en-US/docs/Web/CSS/margin-left
https://developer.mozilla.org/en-US/docs/Web/CSS/margin-blockhttps://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/margin-block-end
https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inlinehttps://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end
https://developer.mozilla.org/en-US/docs/Web/CSS/margin-trim
paddinghttps://developer.mozilla.org/en-US/docs/Web/CSS/paddinghttps://developer.mozilla.org/en-US/docs/Web/CSS/padding-tophttps://developer.mozilla.org/en-US/docs/Web/CSS/padding-righthttps://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottomhttps://developer.mozilla.org/en-US/docs/Web/CSS/padding-left
https://developer.mozilla.org/en-US/docs/Web/CSS/padding-blockhttps://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/padding-block-end
https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inlinehttps://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end
widthhttps://developer.mozilla.org/en-US/docs/Web/CSS/width
https://developer.mozilla.org/en-US/docs/Web/CSS/min-widthhttps://developer.mozilla.org/en-US/docs/Web/CSS/max-width
heighthttps://developer.mozilla.org/en-US/docs/Web/CSS/height
https://developer.mozilla.org/en-US/docs/Web/CSS/min-heighthttps://developer.mozilla.org/en-US/docs/Web/CSS/max-height
object-fithttps://developer.mozilla.org/en-US/docs/Web/CSS/object-fit
video &#123;  /* fill, contain, cover, none, scale-down */  object-fit: cover;  width: 100%;  height: 100%;&#125;

object-positionhttps://developer.mozilla.org/en-US/docs/Web/CSS/object-position
object-view-boximg &#123;  width: 300px;  aspect-ratio: 1;  object-view-box: inset(10px -5px 0 10%);  object-fit: cover;&#125;

aspect-ratiohttps://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio
img, input[type=&quot;image&quot;], video, embed, iframe, marquee, object, table &#123;  aspect-ratio: attr(width) / attr(height);&#125;

img &#123;  width: 100%;  aspect-ratio: 16/9;  object-fit: cover;&#125;

visibilityhttps://developer.mozilla.org/en-US/docs/Web/CSS/visibility
content-visibilityhttps://developer.mozilla.org/en-US/docs/Web/CSS/content-visibility








visibility: hidden
요소를 숨기고 렌더링 함


display: none
요소를 숨기고 렌더링을 하지 않음 (노출상태가 변경될때 마다 다시 렌더링을 함)


content-visibility: hidden
요소를 숨기고 렌더링을 하지 않음 (노출상태가 변경되어도 렌더링 상태를 유지)


div &#123;  content-visibility: auto;  contain-intrinsic-size: 1000px; /* 해당 요소가 보이지 않을 때 예상 높이 */&#125;

block-sizehttps://developer.mozilla.org/en-US/docs/Web/CSS/block-size
https://developer.mozilla.org/en-US/docs/Web/CSS/min-block-sizehttps://developer.mozilla.org/en-US/docs/Web/CSS/max-block-size
inline-sizehttps://developer.mozilla.org/en-US/docs/Web/CSS/inline-size
https://developer.mozilla.org/en-US/docs/Web/CSS/min-inline-sizehttps://developer.mozilla.org/en-US/docs/Web/CSS/max-inline-size
box-decoration-breakhttps://developer.mozilla.org/en-US/docs/Web/CSS/box-decoration-break

  


columnhttps://developer.mozilla.org/en-US/docs/Web/CSS/columnshttps://developer.mozilla.org/en-US/docs/Web/CSS/column-counthttps://developer.mozilla.org/en-US/docs/Web/CSS/column-width
https://developer.mozilla.org/en-US/docs/Web/CSS/column-fill
https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap
https://developer.mozilla.org/en-US/docs/Web/CSS/column-rulehttps://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/column-rule-width
https://developer.mozilla.org/en-US/docs/Web/CSS/column-span
widowshttps://developer.mozilla.org/en-US/docs/Web/CSS/widows
orphanshttps://developer.mozilla.org/en-US/docs/Web/CSS/orphans
breakhttps://developer.mozilla.org/en-US/docs/Web/CSS/break-after
https://developer.mozilla.org/en-US/docs/Web/CSS/break-before
https://developer.mozilla.org/en-US/docs/Web/CSS/break-inside
z-indexhttps://developer.mozilla.org/en-US/docs/Web/CSS/z-index
cliphttps://developer.mozilla.org/en-US/docs/Web/CSS/cliphttps://css-tricks.com/clipping-masking-css
https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path
&lt;img src=&quot;image.jpg&quot;&gt;&lt;svg width=&quot;0&quot; height=&quot;0&quot;&gt;  &lt;defs&gt;    &lt;clipPath id=&quot;svg-clip-path&quot;&gt;      &lt;circle cx=&quot;100&quot; cy=&quot;100&quot; r=&quot;40&quot; /&gt;      &lt;circle cx=&quot;60&quot; cy=&quot;60&quot; r=&quot;40&quot; /&gt;    &lt;/clipPath&gt;  &lt;/defs&gt;&lt;/svg&gt;

img &#123;  /* clip-path: circle(60px at center); */  /* clip-path: ellipse(60px 40px at 75px 30px); */  /* clip-path: polygon(5% 5%, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 50% 75%, 0% 75%); */  clip-path: url(#svg-clip-path);&#125;

Image replacement/* 해당 요소를 감춤 */.sr-only &#123;  overflow: hidden;  position: absolute;  margin: -1px;  padding: 0;  width: 1px;  height: 1px;  clip: rect(1px, 1px, 1px, 1px);  clip-path: inset(50%);&#125;

maskhttps://developer.mozilla.org/en-US/docs/Web/CSS/maskhttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-cliphttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-compositehttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-imagehttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-modehttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-originhttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-positionhttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-repeathttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-size
https://developer.mozilla.org/en-US/docs/Web/CSS/mask-borderhttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-modehttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-outsethttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-repeathttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-slicehttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-sourcehttps://developer.mozilla.org/en-US/docs/Web/CSS/mask-border-width
https://developer.mozilla.org/en-US/docs/Web/CSS/mask-type
div &#123;  mask: url(mask.png);  mask-border: url(border.svg) 30 repeat;  mask-type: luminance; /* white = transparent, grays = semi-transparent, black = opaque */  mask-type: alpha; /* transparent areas of the image let image through, otherwise not */&#125;

shapehttps://developer.mozilla.org/en-US/docs/Web/CSS/shape-image-threshold
https://developer.mozilla.org/en-US/docs/Web/CSS/shape-margin
https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside
div &#123;  /* Keyword values */  shape-outside: none;  shape-outside: margin-box;  shape-outside: content-box;  shape-outside: border-box;  shape-outside: padding-box;    /* Function values */  shape-outside: circle();  shape-outside: ellipse();  shape-outside: inset(10px 10px 10px 10px);  shape-outside: polygon(10px 10px, 20px 20px, 30px 30px);  shape-outside: path(&#x27;M0.5,1 C0.5,1,0,0.7,0,0.3 A0.25,0.25,1,1,1,0.5,0.3 A0.25,0.25,1,1,1,1,0.3 C1,0.7,0.5,1,0.5,1 Z&#x27;);    /* &lt;url&gt; value */  shape-outside: url(image.png);    /* &lt;gradient&gt; value */  shape-outside: linear-gradient(45deg, rgba(255, 255, 255, 0) 150px, red 150px);    /* Global values */  shape-outside: initial;  shape-outside: inherit;  shape-outside: unset;&#125;


  


containhttps://developer.mozilla.org/en-US/docs/Web/CSS/contain
User interfacecursorhttps://developer.mozilla.org/en-US/docs/Web/CSS/cursor

  auto
  default
  pointer
  text
  vertical-text
  crosshair
  move, all-scroll
  alias
  copy
  help
  progress
  not-allowed, no-drop
  wait
  pointer
  grab
  grabbing
  cell
  col-resize
  row-resize
  n-resize
  e-resize
  w-resize
  s-resize
  ne-resize
  nw-resize
  se-resize
  sw-resize
  zoom-in
  zoom-out
  none


div &#123;  /* gif 를 지원하지 않을 경우 cur 파일을 로드하고, cur 파일도 지원하지 않을 경우 auto 속성으로 동작 */  cursor: url(sample.gif), url(sample.cur), auto;&#125;

user-selecthttps://developer.mozilla.org/en-US/docs/Web/CSS/user-select

텍스트를 선택할 수 있는 지 여부를 결정한다.

pointer-eventshttps://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events

요소가 이벤트를 받을 수 있는 지 여부를 결정한다.

resizehttps://developer.mozilla.org/en-US/docs/Web/CSS/resize
appearancehttps://developer.mozilla.org/en-US/docs/Web/CSS/appearance
touch-actionhttps://developer.mozilla.org/en-US/docs/Web/CSS/touch-action
Scroll-webkit-overflow-scrollinghttps://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-overflow-scrolling
div &#123;  -webkit-overflow-scrolling: touch;&#125;

scroll-behaviorhttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior

  


Scroll snaphttps://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap

  


scroll-snap-typehttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-type
.scroll-container &#123;  /* x, y, block, inline, both */  /* none: 스냅하지 않음, proximity: snap position 에 맞춰 스냅, mandatory: 항상 스냅 */  scroll-snap-type: y mandatory;&#125;

scroll-paddinghttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-paddinghttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-tophttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-righthttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-bottomhttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-left
https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-blockhttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-block-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-block-end
https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-inlinehttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-inline-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-padding-inline-end
.scroll-container &#123;  /* 스크롤 할 수 있는 영역 감소 (레이아웃은 변경되지 않음) */  scroll-padding: 50px;&#125;

scroll-snap-alignhttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-align
.scroll-area &#123;  /* none: position 지정하지 않음, start: 요소의 시작 위치, end: 요소의 끝 위치, center: 요소의 중간 위치 */  scroll-snap-align: none;&#125;

scroll-marginhttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-marginhttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-tophttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-righthttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-bottomhttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-left
https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-blockhttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-block-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-block-end
https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inlinehttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inline-starthttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-margin-inline-end
.scroll-area &#123;  /* 요소 영역에 여백 추가 (offset 개념, 레이아웃은 변경되지 않음) */  scroll-margin: 50px;&#125;


#anchor 위치로 이동할 때 offset 을 조절할 수 있다.

scroll-snap-stophttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-snap-stop
overscroll-behaviorhttps://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behaviorhttps://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-xhttps://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-y
https://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-blockhttps://developer.mozilla.org/en-US/docs/Web/CSS/overscroll-behavior-inline
scrollbarhttps://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-color
https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-width

대부분의 브라우저가 지원하지 않는다.

ETCallhttps://developer.mozilla.org/en-US/docs/Web/CSS/all
variablehttps://developer.mozilla.org/en-US/docs/Web/CSS/--*
:root &#123;  --name: value;&#125;var(--name);var(--color, #000);

window.CSS.registerProperty(&#123;  name: &#x27;--my-color&#x27;,  syntax: &#x27;&lt;color&gt;&#x27;,  inherits: false,  initialValue: &#x27;#f00&#x27;,&#125;);


:root 에 정의하면 관리가 쉽지만, 모든 자손 요소에 상속되는 단점이 있다.

]]></content>
      <categories>
        <category>css</category>
        <category>properties</category>
      </categories>
      <tags>
        <tag>ease</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS Rules</title>
    <url>/css/rules/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule


@importhttps://developer.mozilla.org/en-US/docs/Web/CSS/@import
@import &#x27;style.css&#x27;;@import url(&#x27;style.css&#x27;);@import url(&#x27;style.css&#x27;) print;@import url supports(display: grid);@import url supports(display: grid) screen;

@charsethttps://developer.mozilla.org/en-US/docs/Web/CSS/@charset
@charset &#x27;utf-8&#x27;;


파일의 시작 위치에 소문자로 작성한다.

@color-profilehttps://developer.mozilla.org/en-US/docs/Web/CSS/@color-profile
@color-profile --swop5c &#123;  src: url(&#x27;https://example.org/SWOP2006_Coated5v2.icc&#x27;);&#125;div &#123;  background-color: color(--swop5c 0% 70% 20% 0%);&#125;

@counter-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style
@counter-style circled-alpha &#123;  system: fixed;  symbols: Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ;  suffix: &#x27; &#x27;;&#125;ul &#123;  list-style: circled-alpha;&#125;

Descriptorshttps://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/systemhttps://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/negativehttps://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/prefixhttps://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/suffixhttps://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/rangehttps://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/padhttps://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/fallbackhttps://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/symbolshttps://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/additive-symbolshttps://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/speak-as
@font-facehttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face

  css font


Descriptorshttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/ascent-overridehttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/descent-overridehttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-displayhttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-familyhttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-stretchhttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-stylehttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-weighthttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-varianthttps://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settingshttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-variation-settingshttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/line-gap-overridehttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/size-adjusthttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/srchttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/unicode-range
@font-feature-valueshttps://developer.mozilla.org/en-US/docs/Web/CSS/@font-feature-values
/* At-rule for &quot;nice-style&quot; in Font One */@font-feature-values Font One &#123;  @styleset &#123;    nice-style: 12;  &#125;&#125;/* At-rule for &quot;nice-style&quot; in Font Two */@font-feature-values Font Two &#123;  @styleset &#123;    nice-style: 4;  &#125;&#125;/* Apply the at-rules with a single declaration */.nice-look &#123;  font-variant-alternates: styleset(nice-style);&#125;

@keyframeshttps://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes
@keyframes from-to &#123;  from &#123;&#125;  to &#123;&#125;&#125;@keyframes percent &#123;  0% &#123;&#125;  50% &#123;&#125;  100% &#123;&#125;&#125;


  



  


@mediahttps://developer.mozilla.org/en-US/docs/Web/CSS/@media
https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_querieshttps://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Media_queries
@media screen and (min-width: 1000px) &#123; /* mobile first (0px ~ 999px) */ &#125;@media screen and (max-width: 1000px) &#123; /* pc first (1000px ~ max) */ &#125;@media screen and (orientation: landscape) &#123; /* 가로 */ &#125;@media screen and (orientation: portrait) &#123; /* 세로 */ &#125;@media screen and (-webkit-min-device-pixel-ratio: 1.5),screen and (min--moz-device-pixel-ratio: 1.5),screen and (-o-min-device-pixel-ratio: 3/2),screen and (min-device-pixel-ratio: 1.5) &#123;  /* 레티나 디스플레이 */&#125;

Types







all
모든 장치


print
인쇄물 및 인쇄 미리보기 모드에서 화면 상에 보이는 문서


screen
컴퓨터 화면


speech
음성 합성기


Featuresany-hoverhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/any-hover

none, hover

any-pointerhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/any-pointer

none, coarse, fine

aspect-ratiohttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/aspect-ratio

화면 비율을 정의한다.

colorhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/color

색상 비트 수를 정의한다.

color-gamuthttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/color-gamut

srgb, p3, rec2020

color-indexhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/color-index

색상 테이블 엔트리 수를 정의한다.

display-modehttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/display-mode

화면 구성을 정의한다.fullscreen, standalone, minimal-ui, browser

forced-colorshttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors

none, active

gridhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/grid

출력 기기의 그리드 &#x2F; 비트맵 방식 여부를 정의한다.

heighthttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/height

화면의 높이를 정의한다.

hoverhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/hover

none, hover

inverted-colorshttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/inverted-colors

none, inverted

monochromehttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/monochrome

모노크롬 프레임 버퍼의 픽셀당 비트 수를 정의한다.흑백기기가 아닐 경우 0 과 같다.

orientationhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/orientation

화면의 가로 &#x2F; 세로 모드를 정의한다.

overflow-blockhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/overflow-block

none, scroll, optional-paged, paged

overflow-inlinehttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/overflow-inline

none, scroll

pointerhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/pointer

포인팅 장치 사용 가능 여부를 정의한다.none, coarse, fine

prefers-color-schemehttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme
&lt;picture&gt;  &lt;source srcset=&quot;logo-dark.jpg&quot; media=&quot;(prefers-color-scheme: dark)&quot;&gt;  &lt;img src=&quot;logo-light.jpg&quot; alt=&quot;Homepage&quot;&gt;&lt;/picture&gt;

@media (prefers-color-scheme: dark) &#123; // Darkmode  div &#123;    color: white;  &#125;&#125;


시스템 다크 모드 사용 여부를 정의한다.light, dark

prefers-contrasthttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast

컨텐츠 대비를 정의한다.no-preference, more, less

prefers-reduced-motionhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion
div &#123;  animation: pulse 1s linear infinite both;  @media (prefers-reduced-motion) &#123;    animation-name: dissolve;  &#125;&#125;


움직임의 양 최소화 사용 여부를 정의한다.no-preference, reduce

resolutionhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/resolution

화면 해상도를 정의한다.

scriptinghttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/scripting

스크립트 사용 가능 여부를 정의한다.none, initial-only, enabled

update-frequencyhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/update-frequency
widthhttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/width

화면의 너비를 정의한다.

@containerhttps://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries
.sidebar &#123;  container-type: inline-size;  container-name: sidebar;&#125;@container sidebar (min-width: 400px)&#123;  .card &#123;    display: grid;    grid-template-columns: 2fr 1fr;  &#125;&#125;


크롬 설정 chrome://flags/#enable-container-queries 에서 Enable CSS Container Queries 옵션을 활성화 해야 한다.

container-typehttps://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries#container-type_2
container-namehttps://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries#container-name_2
@namespacehttps://developer.mozilla.org/en-US/docs/Web/CSS/@namespace
@namespace url(http://www.w3.org/1999/xhtml);@namespace svg url(http://www.w3.org/2000/svg);/* This matches all XHTML &lt;a&gt; elements, as XHTML is the default unprefixed namespace */a &#123;&#125;/* This matches all SVG &lt;a&gt; elements */svg|a &#123;&#125;/* This matches both XHTML and SVG &lt;a&gt; elements */*|a &#123;&#125;

@pagehttps://developer.mozilla.org/en-US/docs/Web/CSS/@page
@page &#123;  margin: 1cm;&#125;

Descriptorssizehttps://developer.mozilla.org/en-US/docs/Web/CSS/@page/size
@propertyhttps://developer.mozilla.org/en-US/docs/Web/CSS/@property
@property --my-color &#123;  syntax: &#x27;&lt;color&gt;&#x27;;  inherits: false;  initial-value: #c0ffee;&#125;

window.CSS.registerProperty(&#123;  name: &#x27;--my-color&#x27;,  syntax: &#x27;&lt;color&gt;&#x27;,  inherits: false,  initialValue: &#x27;#c0ffee&#x27;,&#125;);

Descriptorshttps://developer.mozilla.org/en-US/docs/Web/CSS/@property/syntaxhttps://developer.mozilla.org/en-US/docs/Web/CSS/@property/inheritshttps://developer.mozilla.org/en-US/docs/Web/CSS/@property/initial-value
@supportshttps://developer.mozilla.org/en-US/docs/Web/CSS/@supports
@supports ((--a: 0)) &#123;  /* Supported */&#125;@supports (not (--a: 0)) &#123;  /* Not supported */&#125;

const isSupported = window.CSS &amp;&amp; window.CSS.supports &amp;&amp; window.CSS.supports(&#x27;--a&#x27;, 0);if (isSupported) &#123;  // Supported&#125; else &#123;  // Not supported&#125;
]]></content>
      <categories>
        <category>css</category>
        <category>rules</category>
      </categories>
  </entry>
  <entry>
    <title>CSS Selectors</title>
    <url>/css/selectors/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors


Specificityhttps://developer.mozilla.org/en-US/docs/Web/CSS/Specificity
Score


Selector
Score
Meaning
Compatibility



*
0-0-0
전체
IE 6


#id
1-0-0
아이디
IE 6


.class
0-1-0
클래스
IE 6


Element
0-0-1
요소
IE 6


Element Element
0-0-2
자손
IE 6


Element, Element
0-0-2
복수
IE 6


Element &gt; Element
0-0-2
자식
IE 7


Element + Element
0-0-2
인접
IE 7


Element ~ Element
0-0-2
형재
IE 7


:first-child
0-1-0
첫번째 자식
IE 7


:last-child
0-1-0
마지막 자식
IE 9


:first-line
0-1-0
첫번째 줄
IE 7


:first-letter
0-1-0
첫번째 문자
IE 7


:nth-child(n)
0-1-0
앞에서부터 n 번째 자식
IE 9


:nth-last-child(n)
0-1-0
뒤에서부터 n 번째 자식
IE 9


:nth-of-type(n)
0-1-0
앞에서부터 같은 유형의 n 번째 형제
IE 9


:nth-last-of-type(n)
0-1-0
뒤에서부터 같은 유형의 n 번째 형제
IE 9


:first-of-type
0-1-0
같은 유형의 첫번째 형제
IE 9


:last-of-type
0-1-0
같은 유형의 마지막 형제
IE 9


:only-child
0-1-0
자식이 하나일때
IE 9


:only-of-type
0-1-0
자식이 하나의 유형일때
IE 9


:root
0-1-0
문서의 최상위 루트 요소
IE 9


:lang(en)
0-1-0
HTML lang 속성값을 en 으로 지정한 요소
IE 8


:empty
0-1-0
빈 자식을 가진 요소
IE 9


:target
0-1-0
요소의 URI 대상
IE 9


:enabled
0-1-0
활성화된 폼 요소
IE 9


:disabled
0-1-0
비 활성화된 폼 요소
IE 9


:checked
0-1-0
체크가능 요소
IE 9


:not(selector)
0-1-0
selector 를 제외한 선택
IE 9


:is(selector)
0-1-0
선택자 목록을 인수 사용
IE 지원 안함


:where(selector)
0-1-0
명시도 조정
IE 지원 안함


:has(selector)
0-1-0
포함 여부
IE 지원 안함


:link
0-1-0
링크
IE 7


:visited
0-1-0
방문
IE 7


:hover
0-1-0
호버
IE 6


:active
0-1-0
활성
IE 7


:focus
0-1-0
포커스
IE 8


:focus-within
0-1-0
포커스 (하위 요소 포함)
IE 지원 안함


form:invalid
0-1-0
폼 검증 실패
IE 지원 안함


[attr]
0-1-0
attr 속성
IE 7


[attr=value]
0-1-0
attr 속성 값이 value
IE 7


[attr¦=value]
0-1-0
attr 속성 값이 value, value- 일 때
IE 7


[attr^=value]
0-1-0
attr 속성 값이 value 로 시작하는 모든 요소
IE 7


[attr$=value]
0-1-0
attr 속성 값이 value 문자로 끝
IE 7


[attr*=value]
0-1-0
attr 속성 값에 value 문자열 포함
IE 7


[attr~=value]
0-1-0
attr 속성 값에 value 띄어쓰기로 포함
IE 7


:before
0-1-0
가상요소를 앞으로 추가
IE 8


:after
0-1-0
가상요소를 뒤로 추가
IE 8


Priority
!important
Inline style attributes
ID selector
Class &#x2F; Attribute &#x2F; Pseudo selector
Tag selector
Universal selector

Performance
ID selector
Class selector
Tag or Type selector
Adjacent sibling selector
Child selector
Descendant selector
Universal selector
Attribute selector
Pseudo-class &#x2F; Element selector

SelectorsUniversal selectorshttps://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors
Type selectorshttps://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors
Class selectorshttps://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors
ID selectorshttps://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors
Attribute selectorshttps://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors
Selector listhttps://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list
Descendant combinatorhttps://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator
Child combinatorhttps://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator
General sibling combinatorhttps://developer.mozilla.org/en-US/docs/Web/CSS/General_sibling_combinator
Adjacent sibling combinatorhttps://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator
Column combinatorhttps://developer.mozilla.org/en-US/docs/Web/CSS/Column_combinator
Pseudo-classeshttps://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
dirhttps://developer.mozilla.org/en-US/docs/Web/CSS/:dir
langhttps://developer.mozilla.org/en-US/docs/Web/CSS/:lang
any-linkhttps://developer.mozilla.org/en-US/docs/Web/CSS/:any-link
linkhttps://developer.mozilla.org/en-US/docs/Web/CSS/:link
visitedhttps://developer.mozilla.org/en-US/docs/Web/CSS/:visited
local-linkhttps://developer.mozilla.org/en-US/docs/Web/CSS/:local-link
targethttps://developer.mozilla.org/en-US/docs/Web/CSS/:target
target-withinhttps://developer.mozilla.org/en-US/docs/Web/CSS/:target-within
scopehttps://developer.mozilla.org/en-US/docs/Web/CSS/:scope
hoverhttps://developer.mozilla.org/en-US/docs/Web/CSS/:hover
activehttps://developer.mozilla.org/en-US/docs/Web/CSS/:active
focushttps://developer.mozilla.org/en-US/docs/Web/CSS/:focus
focus-visiblehttps://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible
focus-withinhttps://developer.mozilla.org/en-US/docs/Web/CSS/:focus-within

  


currenthttps://developer.mozilla.org/en-US/docs/Web/API/:current
pasthttps://developer.mozilla.org/en-US/docs/Web/CSS/:past
futurehttps://developer.mozilla.org/en-US/docs/Web/CSS/:future
playinghttps://developer.mozilla.org/en-US/docs/Web/CSS/:playing
pausedhttps://developer.mozilla.org/en-US/docs/Web/CSS/:paused
autofillhttps://developer.mozilla.org/en-US/docs/Web/CSS/:autofill
enabledhttps://developer.mozilla.org/en-US/docs/Web/CSS/:enabled
disabledhttps://developer.mozilla.org/en-US/docs/Web/CSS/:disabled
read-onlyhttps://developer.mozilla.org/en-US/docs/Web/CSS/:read-only
read-writehttps://developer.mozilla.org/en-US/docs/Web/CSS/:read-write
placeholder-shownhttps://developer.mozilla.org/en-US/docs/Web/CSS/:placeholder-shown
defaulthttps://developer.mozilla.org/en-US/docs/Web/CSS/:default
checkedhttps://developer.mozilla.org/en-US/docs/Web/CSS/:checked

  


indeterminatehttps://developer.mozilla.org/en-US/docs/Web/CSS/:indeterminate
blankhttps://developer.mozilla.org/en-US/docs/Web/CSS/:blank
validhttps://developer.mozilla.org/en-US/docs/Web/CSS/:valid
invalidhttps://developer.mozilla.org/en-US/docs/Web/CSS/:invalid
in-rangehttps://developer.mozilla.org/en-US/docs/Web/CSS/:in-range
out-of-rangehttps://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range
requiredhttps://developer.mozilla.org/en-US/docs/Web/CSS/:required
optionalhttps://developer.mozilla.org/en-US/docs/Web/CSS/:optional
user-invalidhttps://developer.mozilla.org/en-US/docs/Web/CSS/:user-invalid
roothttps://developer.mozilla.org/en-US/docs/Web/CSS/:root
emptyhttps://developer.mozilla.org/en-US/docs/Web/CSS/:empty
nth-childhttps://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child
nth-last-childhttps://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-child
first-childhttps://developer.mozilla.org/en-US/docs/Web/CSS/:first-child
last-childhttps://developer.mozilla.org/en-US/docs/Web/CSS/:last-child
only-childhttps://developer.mozilla.org/en-US/docs/Web/CSS/:only-child
nth-of-typehttps://developer.mozilla.org/en-US/docs/Web/CSS/:nth-of-type
nth-last-of-typehttps://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-of-type
first-of-typehttps://developer.mozilla.org/en-US/docs/Web/CSS/:first-of-type
last-of-typehttps://developer.mozilla.org/en-US/docs/Web/CSS/:last-of-type
only-of-typehttps://developer.mozilla.org/en-US/docs/Web/CSS/:only-of-type
ishttps://developer.mozilla.org/en-US/docs/Web/CSS/:is
// beforediv button:hover, p button:hover &#123;&#125;// after:is(div, p) button:hover &#123;&#125;

h1:is(:hover, :focus) &#123;&#125;// h1:hover, h1:focus &#123;&#125;h1 :is(:hover, :focus) &#123;&#125;// h1 *:hover, h1 *:focus &#123;&#125;


matches 에서 is 로 변경되었다.직관적이고 간결하게 작성할 수 있다.

hashttps://developer.mozilla.org/en-US/docs/Web/CSS/:has
/* img 태그 자식을 포함하는 a */a:has(&gt; img) &#123;&#125;/* dt 바로 뒤에 dt */dt:has(+ dt) &#123;&#125;/* 헤더가 없는 section */section:not(:has(h1, h2, h3, h4, h5, h6)) &#123;&#125;/* 헤더가 아닌 다른 요소를 포함하는 section */section:has(:not(h1, h2, h3, h4, h5, h6)) &#123;&#125;

nothttps://developer.mozilla.org/en-US/docs/Web/CSS/:not
Accessibility testimg &#123;  &amp;:not([alt]), &amp;[alt=&quot;&quot;] &#123;    outline: 5px solid red;  &#125;&#125;label &#123;  &amp;:not([for]) &#123;    outline: 5px solid red;  &#125;&#125;input &#123;  &amp;:not([type=&quot;button&quot;]):not([type=&quot;reset&quot;]):not([type=&quot;submit&quot;]):not([aria-labelledby]):not([id]) &#123;    outline: 5px solid red;  &#125;&#125;


  


wherehttps://developer.mozilla.org/en-US/docs/Web/CSS/:where
/* Select p tag in heading tag */:where(h1, h2, h3, h4, h5, h6) &gt; p &#123;&#125;

a:where(:not(:hover)) &#123;  text-decoration: none;&#125;nav a &#123;  text-decoration: underline; /* Works now! */&#125;

togglehtml &#123;  toggle-root: lightswitch;  button &#123;    toggle-trigger: lightswitch;    &amp;:before &#123;      content: &#x27;🌚 &#x27;;    &#125;  &#125;  &amp;:toggle(lightswitch) &#123;    button &#123;      &amp;:before &#123;        content: &#x27;🌝 &#x27;;      &#125;    &#125;  &#125;&#125;

Pseudo-elementshttps://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements

: 를 지원하지만 :: 사용하는 것이 원칙이다.

afterhttps://developer.mozilla.org/en-US/docs/Web/CSS/::after
backdrophttps://developer.mozilla.org/en-US/docs/Web/CSS/::backdrop
beforehttps://developer.mozilla.org/en-US/docs/Web/CSS/::before
cuehttps://developer.mozilla.org/en-US/docs/Web/CSS/::cue
cue-regionhttps://developer.mozilla.org/en-US/docs/Web/CSS/::cue-region
first-letterhttps://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter
first-linehttps://developer.mozilla.org/en-US/docs/Web/CSS/::first-line
file-selector-buttonhttps://developer.mozilla.org/en-US/docs/Web/CSS/::file-selector-button
grammar-errorhttps://developer.mozilla.org/en-US/docs/Web/CSS/::grammar-error
markerhttps://developer.mozilla.org/en-US/docs/Web/CSS/::marker
parthttps://developer.mozilla.org/en-US/docs/Web/CSS/::part
placeholderhttps://developer.mozilla.org/en-US/docs/Web/CSS/::placeholder
selectionhttps://developer.mozilla.org/en-US/docs/Web/CSS/::selection
::selection &#123;  color: #fff;  background-color: #f00;&#125;


드래그 한 영역의 색상을 설정한다.

slottedhttps://developer.mozilla.org/en-US/docs/Web/CSS/::slotted
spelling-errorhttps://developer.mozilla.org/en-US/docs/Web/CSS/::spelling-error
target-texthttps://developer.mozilla.org/en-US/docs/Web/CSS/::target-text
Webkit-webkit-scrollbarhttps://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbarhttps://css-tricks.com/custom-scrollbars-in-webkit
::-webkit-scrollbar &#123;  width: 10px;  height: 10px;&#125;::-webkit-scrollbar-track &#123;  background-color: rgba(0, 0, 0, 0.05);&#125;::-webkit-scrollbar-thumb &#123;  background-color: rgba(0, 0, 0, 0.1);  border-radius: 4px;  &amp;:hover &#123;    background-color: rgba(0, 0, 0, 0.3);  &#125;&#125;::-webkit-scrollbar-button &#123;  height: 10px;  background-color: rgba(0, 0, 0, 0.1);  &amp;:start:decrement &#123;    border-bottom-left-radius: 4px;    border-bottom-right-radius: 4px;  &#125;  &amp;:end:increment &#123;    border-top-left-radius: 4px;    border-top-right-radius: 4px;  &#125;  &amp;:hover &#123;    background-color: rgba(0, 0, 0, 0.3);  &#125;&#125;::-webkit-scrollbar-corner &#123;  background-color: rgba(0, 0, 0, 0.1);  &amp;:hover &#123;    background-color: rgba(0, 0, 0, 0.3);  &#125;&#125;

Selectors







::-webkit-scrollbar
스크롤 바 영역 전체 (필수 지정)


::-webkit-scrollbar-button
상하, 좌우 화살표가 포함된 부분


::-webkit-scrollbar-track
화살표를 제외한 몸통 부분


::-webkit-scrollbar-track-piece
몸통 부분에서 실제 움직이는 부분을 제외한 나머지 길


::-webkit-scrollbar-thumb
몸통 부분에서 실제 움직이는 부분


::-webkit-scrollbar-corner
상하, 좌우 스크롤 바가 만날 때 오른쪽 아래 공간


::-webkit-resizer
corner 공간으로 크기를 변경 할 수 있음


States







:horizontal
좌우 스크롤 바의 모든 요소에 적용


:vertical
상하 스크롤 바의 모든 요소에 적용


:decrement
스크롤 바에서 윗쪽, 왼쪽 방향 버튼, 트랙 요소에 적용


:increment
스크롤 바에서 아래쪽, 오른쪽 방향 버튼, 트랙 요소에 적용


:start
thumb 이전에 위치한 버튼, 트랙 요소에 적용


:end
thumb 이후에 위치한 버튼, 트랙 요소에 적용


:double-button
상하 화살표가 붙어 두 개가 한꺼번에 표시된 요소에 적용 (좌우도 같음)


:single-button
상하 화살표가 아래 위 따로 나뉘어 표시된 요소에 적용 (좌우도 같음)


:no-button
화살표 버튼이 없는 요소에 적용


:corner-present
스크롤 바 모서리가 있는 요소에 적용


:window-inactive
지금 활성화된 창의 스크롤 바에 적용


ResetDefault valuea &#123;  &amp;:link &#123;    color: (internal value);    text-decoration: underline;    cursor: auto;    &amp;:active &#123;      color: (internal value);    &#125;  &#125;  &amp;:visited &#123;    color: (internal value);    text-decoration: underline;    cursor: auto;    &amp;:active &#123;      color: (internal value);    &#125;  &#125;&#125;address &#123;  display: block;  font-style: italic;&#125;area &#123;  display: none;&#125;article &#123;  display: block;&#125;aside &#123;  display: block;&#125;b &#123;  font-weight: bold;&#125;bdo &#123;  unicode-bidi: bidi-override;&#125;blockquote &#123;  display: block;  margin-top: 1em;  margin-bottom: 1em;  margin-left: 40px;  margin-right: 40px;&#125;body &#123;  display: block;  margin: 8px;  &amp;:focus &#123;    outline: none;  &#125;&#125;caption &#123;  display: table-caption;  text-align: center;&#125;cite &#123;  font-style: italic;&#125;code &#123;  font-family: monospace;&#125;col &#123;  display: table-column;&#125;colgroup &#123;  display: table-column-group&#125;datalist &#123;  display: none;&#125;dd &#123;  display: block;  margin-left: 40px;&#125;del &#123;  text-decoration: line-through;&#125;details &#123;  display: block;&#125;dfn &#123;  font-style: italic;&#125;div &#123;  display: block;&#125;dl &#123;  display: block;  margin-top: 1em;  margin-bottom: 1em;  margin-left: 0;  margin-right: 0;&#125;dt &#123;  display: block;&#125;em &#123;  font-style: italic;&#125;embed &#123;  &amp;:focus &#123;    outline: none;  &#125;&#125;fieldset &#123;  display: block;  margin-left: 2px;  margin-right: 2px;  padding-top: 0.35em;  padding-bottom: 0.625em;  padding-left: 0.75em;  padding-right: 0.75em;  border: 2px groove (internal value);&#125;figcaption &#123;  display: block;&#125;figure &#123;  display: block;  margin-top: 1em;  margin-bottom: 1em;  margin-left: 40px;  margin-right: 40px;&#125;footer &#123;  display: block;&#125;form &#123;  display: block;  margin-top: 0em;&#125;h1 &#123;  display: block;  font-size: 2em;  margin-top: 0.67em;  margin-bottom: 0.67em;  margin-left: 0;  margin-right: 0;  font-weight: bold;&#125;h2 &#123;  display: block;  font-size: 1.5em;  margin-top: 0.83em;  margin-bottom: 0.83em;  margin-left: 0;  margin-right: 0;  font-weight: bold;&#125;h3 &#123;  display: block;  font-size: 1.17em;  margin-top: 1em;  margin-bottom: 1em;  margin-left: 0;  margin-right: 0;  font-weight: bold;&#125;h4 &#123;  display: block;  margin-top: 1.33em;  margin-bottom: 1.33em;  margin-left: 0;  margin-right: 0;  font-weight: bold;&#125;h5 &#123;  display: block;  font-size: .83em;  margin-top: 1.67em;  margin-bottom: 1.67em;  margin-left: 0;  margin-right: 0;  font-weight: bold;&#125;h6 &#123;  display: block;  font-size: .67em;  margin-top: 2.33em;  margin-bottom: 2.33em;  margin-left: 0;  margin-right: 0;  font-weight: bold;&#125;head &#123;  display: none;&#125;header &#123;  display: block;&#125;hr &#123;  display: block;  margin-top: 0.5em;  margin-bottom: 0.5em;  margin-left: auto;  margin-right: auto;  border-style: inset;  border-width: 1px;&#125;html &#123;  display: block;  &amp;:focus &#123;    outline: none;  &#125;&#125;i &#123;  font-style: italic;&#125;iframe &#123;  &amp;:focus &#123;    outline: none;  &#125;  &amp;[seamless] &#123;    display: block;  &#125;&#125;img &#123;  display: inline-block;&#125;ins &#123;  text-decoration: underline;&#125;kbd &#123;  font-family: monospace;&#125;label &#123;  cursor: default;&#125;legend &#123;  display: block;  padding-left: 2px;  padding-right: 2px;  border: none;&#125;li &#123;  display: list-item;&#125;link &#123;  display: none;&#125;map &#123;  display: inline;&#125;mark &#123;  background-color: yellow;  color: black;&#125;menu &#123;  display: block;  list-style-type: disc;  margin-top: 1em;  margin-bottom: 1em;  margin-left: 0;  margin-right: 0;  padding-left: 40px;&#125;nav &#123;  display: block;&#125;object &#123;  &amp;:focus &#123;    outline: none;  &#125;&#125;ol &#123;  display: block;  list-style-type: decimal;  margin-top: 1em;  margin-bottom: 1em;  margin-left: 0;  margin-right: 0;  padding-left: 40px;&#125;output &#123;  display: inline;&#125;p &#123;  display: block;  margin-top: 1em;  margin-bottom: 1em;  margin-left: 0;  margin-right: 0;&#125;param &#123;  display: none;&#125;pre &#123;  display: block;  font-family: monospace;  white-space: pre;  margin: 1em 0;&#125;q &#123;  display: inline;  &amp;:before &#123;    content: open-quote;  &#125;  &amp;:after &#123;    content: close-quote;  &#125;&#125;rt &#123;  line-height: normal;&#125;s &#123;  text-decoration: line-through;&#125;samp &#123;  font-family: monospace;&#125;script &#123;  display: none;&#125;section &#123;  display: block;&#125;small &#123;  font-size: smaller;&#125;strike &#123;  text-decoration: line-through;&#125;strong &#123;  font-weight: bold;&#125;style &#123;  display: none;&#125;sub &#123;  vertical-align: sub;  font-size: smaller;&#125;summary &#123;  display: block;&#125;sup &#123;  vertical-align: super;  font-size: smaller;&#125;table &#123;  display: table;  border-collapse: separate;  border-spacing: 2px;  border-color: gray;&#125;tbody &#123;  display: table-row-group;  vertical-align: middle;  border-color: inherit;&#125;td &#123;  display: table-cell;  vertical-align: inherit;&#125;tfoot &#123;  display: table-footer-group;  vertical-align: middle;  border-color: inherit;&#125;th &#123;  display: table-cell;  vertical-align: inherit;  font-weight: bold;  text-align: center;&#125;thead &#123;  display: table-header-group;  vertical-align: middle;  border-color: inherit;&#125;title &#123;  display: none;&#125;tr &#123;  display: table-row;  vertical-align: inherit;  border-color: inherit;&#125;u &#123;  text-decoration: underline;&#125;ul &#123;  display: block;  list-style-type: disc;  margin-top: 1em;  margin-bottom: 1 em;  margin-left: 0;  margin-right: 0;  padding-left: 40px;&#125;var &#123;  font-style: italic;&#125;

Custom/* 키보트 탭을 이용하여 포커스될때만 강조 (마우스클릭시 강조하지 않음) */@mixin focusOnlyKeyboard () &#123;  &amp;:focus &#123;    outline: 2px solid rgba(0, 0, 255, 0.3);    &amp;:not(:focus-visible) &#123;      outline: 0;    &#125;  &#125;  &amp;:focus-visible &#123;    outline: 2px solid rgba(0, 0, 255, 0.3);  &#125;&#125;html, body &#123;  scroll-behavior: smooth;&#125;html &#123;  overflow: hidden;  height: 100%;  -webkit-text-size-adjust: none;&#125;body &#123;  overflow: auto;  height: 100%;  font-family:    -apple-system, /* OS X (10.11+), iOS (9+) */    BlinkMacSystemFont, /* OS X, Chrome */    &quot;Segoe UI&quot;, /* Windows */    Roboto, /* Android 4.0+ */    &quot;Malgun Gothic&quot;, &quot;맑은 고딕&quot;, &quot;돋움&quot;, Dotum, &quot;Apple SD Gothic Neo&quot;, &quot;Apple SD 산돌고딕 Neo&quot;, /* 한글 폰트 */    sans-serif;&#125;body, p, figure, dl, dd &#123;  margin: 0;&#125;main, details, figcaption &#123;  display: block;&#125;summary &#123;  display: list-item;&#125;body, input, textarea, select, button, table &#123;  -webkit-font-smoothing: subpixel-antialiased;&#125;ul, ol, menu &#123;  margin: 0;  padding: 0;  list-style: none;&#125;img &#123;  vertical-align: top;  border: 0;&#125;a &#123;  color: inherit;  text-decoration: none;  &amp;:hover, &amp;:active, &amp;:focus &#123;    text-decoration: none;  &#125;  @include focusOnlyKeyboard;&#125;button &#123;  padding: 0;  font: inherit;  font-size: inherit;  text-align: inherit;  color: inherit;  border: none;  border-radius: 0;  background: none;  box-shadow: none;  cursor: pointer;  -webkit-appearance: button;  &amp;:disabled &#123;    cursor: default;  &#125;  @include focusOnlyKeyboard;&#125;input &#123;  padding: 0;  vertical-align: middle;  &amp;:disabled &#123;    cursor: default;  &#125;  @include focusOnlyKeyboard;&#125;select &#123;  cursor: pointer;  vertical-align: middle;  &amp;:disabled &#123;    cursor: default;  &#125;  @include focusOnlyKeyboard;&#125;table &#123;  border-collapse: collapse;  border-spacing: 0;&#125;fieldset &#123;  margin: 0;  padding: 0;  border: 0;&#125;em, address &#123;  font-style: normal;&#125;sub &#123;  bottom: -0.25em;&#125;sup &#123;  top: -0.5em;&#125;[hidden] &#123;  display: none !important;&#125;
]]></content>
      <categories>
        <category>css</category>
        <category>selectors</category>
      </categories>
      <tags>
        <tag>selectors</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB v5.0</title>
    <url>/database/mongodb/</url>
    <content><![CDATA[
  https://docs.mongodb.com/manual


DatabaseShow allshow dbs

Show currentdb

Selectuse databaseName

Dropdb.dropDatabase()

Statsdb.stats()

CollectionShowshow collections

Createdb.createCollection(&#x27;collectionName&#x27;)

Dropdb.collectionName.drop()

Validatedb.collectionName.validate()

DocumentFinddb.collectionName.find()

Insertdb.collectionName.insert(&#123; &#x27;key&#x27;: &#x27;value&#x27; &#125;)

Insert manydb.collectionName.insertMany(&#123; &#x27;key&#x27;: &#x27;value&#x27; &#125;, &#123; &#x27;key&#x27;: &#x27;value&#x27; &#125;)

Updatedb.collectionName.updateMany(filter, update, options)

Delete/* delete document */db.collectionName.deleteMany(&#123; &#x27;key&#x27;: &#x27;value&#x27; &#125;)db.collectionName.remove(&#123; &#x27;key&#x27;: &#x27;value&#x27; &#125;)/* delete all documents */db.collectionName.deleteMany()db.collectionName.remove(&#123;&#125;)

AuthLoginuse databaseNamedb.auth(&#x27;userName&#x27;, &#x27;password&#x27;)

Logoutdb.logout()

Createdb.createUser(&#123;  user : &#x27;userName&#x27;,  pwd : &#x27;password&#x27;,  roles : &#123; role : &#x27;roleName&#x27;, db : &#x27;databaseName&#x27; &#125;&#125;)

Dropdb.dropUser(&#x27;userName&#x27;)
]]></content>
      <categories>
        <category>database</category>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase Authentication v9.6.8</title>
    <url>/firebase/authentication/</url>
    <content><![CDATA[BasicStarthttps://firebase.google.com/docs/auth/web/start
import &#123; getAuth, signInWithPopup, GoogleAuthProvider  &#125; from &#x27;https://www.gstatic.com/firebasejs/9.6.8/firebase-auth.js&#x27;;const auth = getAuth();const googleAuthProvider = new GoogleAuthProvider();const signIn = async () =&gt; &#123;  try &#123;    const result = await signInWithPopup(auth, googleAuthProvider);    const &#123; accessToken &#125; = GoogleAuthProvider.credentialFromResult(result);    sessionStorage.setItem(&#x27;accessToken&#x27;, accessToken);  &#125; catch (error) &#123;    console.dir(error);  &#125;&#125;;

Manage usershttps://firebase.google.com/docs/auth/web/manage-users
Password authhttps://firebase.google.com/docs/auth/web/password-auth
Email link authhttps://firebase.google.com/docs/auth/web/email-link-auth
OAuth signinhttps://firebase.google.com/docs/auth/web/google-signinhttps://firebase.google.com/docs/auth/web/facebook-loginhttps://firebase.google.com/docs/auth/web/applehttps://firebase.google.com/docs/auth/web/twitter-loginhttps://firebase.google.com/docs/auth/web/github-authhttps://firebase.google.com/docs/auth/web/microsoft-oauthhttps://firebase.google.com/docs/auth/web/yahoo-oauth
Phone authhttps://firebase.google.com/docs/auth/web/phone-auth
]]></content>
      <categories>
        <category>firebase</category>
        <category>authentication</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose v4.13.20</title>
    <url>/database/mongoose/</url>
    <content><![CDATA[
  https://mongoosejs.com/docs/index.html


Setupnpm install --save mongoose

/index.jsconst mongoose = require(&#x27;mongoose&#x27;);const port = 4000;mongoose.Promise = global.Promise;mongoose.connect(&#x27;mongodb://localhost/blog&#x27;, &#123; useNewUrlParser: true &#125;).then(() =&gt; &#123;  console.log(&#x27;Connected to mongodb&#x27;);&#125;).catch((event) =&gt; &#123;  console.error(event);&#125;);app.listen(port, () =&gt; &#123;  console.log(`Listening to port $&#123; port &#125;`);&#125;);

Schema
컬렉션에 들어가는 문서 내부의 각 필드가 어떤 형식으로 되어 있는지 정의하는 객체이다.데이터 타입에는 String, Number, Date, Buffer, Boolean, Schema.Types.Mixed, Schema.Types.ObjectedId, Array 가 있다.

Model/models/post.jsconst mongoose = require(&#x27;mongoose&#x27;);const &#123; Schema &#125; = mongoose;const Post = new Schema(&#123;  title: String,  body: String,  tags: [String],  publishedDate: &#123;    type: Date,    default: new Date()  &#125;&#125;);module.exports = mongoose.model(&#x27;Post&#x27;, Post);


스키마를 사용하는 인스턴스로, 데이터베이스에서 실제 작업을 처리할 수 있는 함수들을 지니고 있는 객체이다.

CRUDGet list/api/posts/posts.ctrl.jsconst Post = require(&#x27;models/post&#x27;);// GET /api/postsexports.list = async (ctx) =&gt; &#123;  try &#123;    const posts = await Post.find().exec();    ctx.body = posts;  &#125; catch (error) &#123;    ctx.throw(error, 500);  &#125;&#125;;

Get item/api/posts/posts.ctrl.jsconst Post = require(&#x27;models/post&#x27;);// GET /api/posts/:idexports.read = async (ctx) =&gt; &#123;  const &#123; id &#125; = ctx.params;  try &#123;    const post = await Post.findById(id).exec();    if (!post) &#123;      ctx.status = 404;      return;    &#125;    ctx.body = post;  &#125; catch (error) &#123;    ctx.throw(error, 500);  &#125;&#125;;

Post item/api/posts/posts.ctrl.jsconst Post = require(&#x27;models/post&#x27;);// POST /api/posts &#123; title, body, tags &#125;exports.write = async (ctx) =&gt; &#123;  const &#123; title, body, tags &#125; = ctx.request.body;  const post = new Post(&#123; title, body, tags &#125;);  try &#123;    await post.save();    ctx.body = post;  &#125; catch (error) &#123;    ctx.throw(error, 500);  &#125;&#125;;

Update item/api/posts/posts.ctrl.jsconst Post = require(&#x27;models/post&#x27;);// PATCH /api/posts/:id &#123; title, body, tags &#125;exports.update = async (ctx) =&gt; &#123;  const &#123; id &#125; = ctx.params;  try &#123;    const post = await Post.findByIdAndUpdate(id, ctx.request.body, &#123;      new: true    &#125;).exec();    if (!post) &#123;      ctx.status = 404;      return;    &#125;    ctx.body = post;  &#125; catch (error) &#123;    ctx.throw(error, 500);  &#125;&#125;;

Delete item/api/posts/posts.ctrl.jsconst Post = require(&#x27;models/post&#x27;);// DELETE /api/posts/:idexports.remove = async (ctx) =&gt; &#123;  const &#123; id &#125; = ctx.params;  try &#123;    await Post.findByIdAndRemove(id).exec();    ctx.status = 204;  &#125; catch (error) &#123;    ctx.throw(error, 500);  &#125;&#125;;

Validate/api/posts/index.jsposts.get(&#x27;/:id&#x27;, postsCtrl.checkObjectId, postsCtrl.read);posts.patch(&#x27;/:id&#x27;, postsCtrl.checkObjectId, postsCtrl.update);posts.delete(&#x27;/:id&#x27;, postsCtrl.checkObjectId, postsCtrl.remove);

ObjectId/api/posts/posts.ctrl.jsconst Post = require(&#x27;models/post&#x27;);const &#123; ObjectId &#125; = require(&#x27;mongoose&#x27;).Types;exports.checkObjectId = (ctx, next) =&gt; &#123;  const &#123; id &#125; = ctx.params;  if (!ObjectId.isValid(id)) &#123;    ctx.status = 400;    return null;  &#125;  return next();&#125;;

Request body/api/posts/posts.ctrl.jsconst Joi = require(&#x27;joi&#x27;);exports.write = async (ctx) =&gt; &#123;  const schema = Joi.object().keys(&#123;    title: Joi.string().required(),    body: Joi.string().required(),    tags: Joi.array().items(Joi.string()).required()  &#125;);  const result = Joi.validate(ctx.request.body, schema);  if (result.error) &#123;    ctx.status = 400;    ctx.body = result.error;    return;  &#125;&#125;

mongoose-paginationhttps://github.com/Moveline/mongoose-pagination
sort/api/posts/posts.ctrl.jsexports.list = async (ctx) =&gt; &#123;  try &#123;    const posts = await Post.find().sort(&#123; _id: -1 &#125;).exec();    ctx.body = posts;  &#125; catch (error) &#123;    ctx.throw(error, 500);  &#125;&#125;;

limit/api/posts/posts.ctrl.jsexports.list = async (ctx) =&gt; &#123;  try &#123;    const posts = await Post.find().limit(10).exec();    ctx.body = posts;  &#125; catch (error) &#123;    ctx.throw(error, 500);  &#125;&#125;;

skip - page/api/posts/posts.ctrl.jsexports.list = async (ctx) =&gt; &#123;  const page = parseInt(ctx.query.page || 1, 10);  if (page &lt; 1) &#123;    ctx.status = 400;    return;  &#125;  try &#123;    const posts = await Post.find().skip((page - 1) * 10).limit(10).exec();    ctx.body = posts;  &#125; catch (error) &#123;    ctx.throw(error, 500);  &#125;&#125;;

skip - last page/api/posts/posts.ctrl.jsexports.list = async (ctx) =&gt; &#123;  const page = parseInt(ctx.query.page || 1, 10);  if (page &lt; 1) &#123;    ctx.status = 400;    return;  &#125;  try &#123;    const posts = await Post.find().skip((page - 1) * 10).limit(10).exec();    const postCount = await Post.count().exec();    ctx.set(&#x27;Last-Page&#x27;, Math.ceil(postCount / 10));    ctx.body = posts;  &#125; catch (error) &#123;    ctx.throw(error, 500);  &#125;&#125;;

body length/api/posts/posts.ctrl.jsexports.list = async (ctx) =&gt; &#123;  const page = parseInt(ctx.query.page || 1, 10);  if (page &lt; 1) &#123;    ctx.status = 400;    return;  &#125;  try &#123;    const postCount = await Post.count().exec();    // Case 1    const posts = await Post.find().sort(&#123; _id: -1 &#125;).limit(10).skip((page - 1) * 10).exec();    const limitBodyLength = post =&gt; (&#123;      ...post.toJSON(),      body: post.body.length &lt; 100 ? post.body : `$&#123;post.body.slice(0, 100)&#125;...`    &#125;);    // Case 2    const posts = await Post.find().sort(&#123; _id: -1 &#125;).limit(10).skip((page - 1) * 10).lean().exec();    const limitBodyLength = post =&gt; (&#123;      ...post,      body: post.body.length &lt; 100 ? post.body : `$&#123;post.body.slice(0, 100)&#125;...`    &#125;);    ctx.set(&#x27;Last-Page&#x27;, Math.ceil(postCount / 10));    ctx.body = posts.map(limitBodyLength);  &#125; catch (error) &#123;    ctx.throw(error, 500);  &#125;&#125;;
]]></content>
      <categories>
        <category>database</category>
        <category>mongoose</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>javascript</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL v7.0</title>
    <url>/database/mysql/</url>
    <content><![CDATA[
  https://dev.mysql.com/doc


Command







접속 (호스트, 사용자, 패스워드)
mysql -h localhost -u root -p


데이터베이스 목록
show databases


데이터베이스 생성
create database DBNAME


데이터베이스 제거
drop database DBNAME


데이터베이스 사용
use DBNAME


테이블 생성
create table TABLENAME(name1 char(4) primary key, name2 varchar(30) not null, name3 int(3))


테이블 정보
desc TABLENAME


테이블에 컬럼 추가
insert into TABLENAME values(&#39;1234&#39;)


테이블에서 선택된 열의 데이터값이 일치하는 모든 컬럼
select * from TABLENAME where COLNAME='data' and COLNAME='data' or COLNAME='data' order by COLNAME,COLNAME ASC | DESC


조건이 일치하는 컬럼의 행에서 해당 컬럼의 값을 변경
update TABLENAME set COLNAME=&#39;data&#39;,COLNAME=&#39;data&#39; WHERE COLNAME=&#39;data&#39;


테이블에서 해당 컬럼의 값이 일치하는 행을 삭제
delete from TABLENAME where COLNAME=&#39;data&#39;


종료
exit


Field Options







Primary Key
해당 필드를 기본키 필드로 설정


Auto_Increment
레코드가 삽일될 때 자동으로 값이 1 씩 증가, 숫자형 필드에만 적용 가능


NOT NULL
데이터의 값이 없는 경우 입력이 되지 않게 함


Default
값이 입력되지 않을 경우 기본적으로 입력될 값


UNSIGNED
정수형 데이터 타입의 경우 음수가 아닌 양수로만 사용


ZEROFILL
남은 공간을 0 으로 채움


BINARY
문자열의 대소문자를 구분


Data TypesText







CHAR(size)
Holds a fixed length string (can contain letters, numbers, and special characters).The fixed size is specified in parenthesis. Can store up to 255 characters


VARCHAR(size)
Holds a variable length string (can contain letters, numbers, and special characters).The maximum size is specified in parenthesis. Can store up to 255 characters.


TINYTEXT
Holds a string with a maximum length of 255 characters


TEXT
Holds a string with a maximum length of 65,535 characters


BLOB
For BLOBs (Binary Large OBjects). Holds up to 65,535 bytes of data


MEDIUMTEXT
Holds a string with a maximum length of 16,777,215 characters


MEDIUMBLOB
For BLOBs (Binary Large OBjects). Holds up to 16,777,215 bytes of data


LONGTEXT
Holds a string with a maximum length of 4,294,967,295 characters


LONGBLOB
For BLOBs (Binary Large OBjects). Holds up to 4,294,967,295 bytes of data


ENUM(x,y,z,etc.)
Let you enter a list of possible values. You can list up to 65535 values in an ENUM list.If a value is inserted that is not in the list, a blank value will be inserted.


SET
Similar to ENUM except that SET may contain up to 64 list items and can store more than one choice


Number







TINYINT(size)
-128 to 127 normal. 0 to 255 UNSIGNED*.The maximum number of digits may be specified in parenthesis


SMALLINT(size)
-32768 to 32767 normal. 0 to 65535 UNSIGNED*.The maximum number of digits may be specified in parenthesis


MEDIUMINT(size)
-8388608 to 8388607 normal. 0 to 16777215 UNSIGNED*.The maximum number of digits may be specified in parenthesis


INT(size)
-2147483648 to 2147483647 normal. 0 to 4294967295 UNSIGNED*.The maximum number of digits may be specified in parenthesis


BIGINT(size)
-9223372036854775808 to 9223372036854775807 normal.0 to 18446744073709551615 UNSIGNED*. The maximum number of digits may be specified in parenthesis


FLOAT(size,d)
A small number with a floating decimal point. The maximum number of digits may be specified in the size parameter.The maximum number of digits to the right of the decimal point is specified in the d parameter


DOUBLE(size,d)
A large number with a floating decimal point. The maximum number of digits may be specified in the size parameter.The maximum number of digits to the right of the decimal point is specified in the d parameter


DECIMAL(size,d)
A DOUBLE stored as a string , allowing for a fixed decimal point. The maximum number of digits may be specified in the size parameter.The maximum number of digits to the right of the decimal point is specified in the d parameter


Date







DATE()
A date. (YYYY-MM-DD)


DATETIME()
A date and time combination. (YYYY-MM-DD HH:MM:SS)


TIMESTAMP()
A timestamp. TIMESTAMP values are stored as the number of seconds since the Unix epoch.(1970-01-01 00:00:00 UTC) (YYYY-MM-DD HH:MM:SS)


TIME()
A time. (HH:MM:SS)


YEAR()
A year in two-digit or four-digit format.


ExamplesReplace all text in columnUPDATE 테이블명 SET 컬럼명=REPLACE(컬럼명, &quot;검색할 단어&quot;, &quot;변경할 단어&quot;)UPDATE wp_posts SET post_content=REPLACE(post_content, &quot;메서드&quot;, &quot;메소드&quot;)
]]></content>
      <categories>
        <category>database</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>Firebase Database v9.6.8</title>
    <url>/firebase/database/</url>
    <content><![CDATA[BasicStarthttps://firebase.google.com/docs/database/web/start
import &#123; initializeApp &#125; from &quot;https://www.gstatic.com/firebasejs/9.6.8/firebase-app.js&quot;;initializeApp(&#123;  apiKey: &quot;AIzaSyD7_os0n04FPAAluh3sztzIpPbdJJvzCJ1&quot;,  authDomain: &quot;blog-32462.firebaseapp.com&quot;,  projectId: &quot;blog-32462&quot;,  storageBucket: &quot;blog-32462.appspot.com&quot;,  messagingSenderId: &quot;928469708061&quot;,  appId: &quot;1:928469708065:web:2dd5c6cdf9c484af946261&quot;&#125;);

Structure datahttps://firebase.google.com/docs/database/web/structure-data
Read and writehttps://firebase.google.com/docs/database/web/read-and-writehttps://firebase.google.com/docs/database/web/lists-of-data
import &#123; getDatabase, ref, get, onValue, set, push, update &#125; from &quot;https://www.gstatic.com/firebasejs/9.6.8/firebase-database.js&quot;;const db = getDatabase();const todoRef = ref(db, &#x27;todo&#x27;);// Read onceget(todoRef).then((snapshot) =&gt; &#123;  if (snapshot.exists()) &#123;    console.log(snapshot.val());  &#125; else &#123;    console.log(&quot;No data available&quot;);  &#125;&#125;).catch((error) =&gt; &#123;  console.error(error);&#125;);// Read and watchonValue(todoRef, (snapshot) =&gt; &#123;  const data = snapshot.val();  console.log(data);&#125;);// Write// set(ref(db, `works/$&#123;todo.id&#125;`), todo.id);// Pushpush(todoRef, &#123; id: 0, title: &#x27;abc&#x27;, done: false &#125;);// Updateupdate(todoRef, &#123;  [`$&#123;key&#125;/done`]: true,&#125;);// Removeremove(ref(db, `todo/$&#123;key&#125;`));

Offline datahttps://firebase.google.com/docs/database/web/offline-capabilities
RulesAll user read and write&#123;  &quot;rules&quot;: &#123;    &quot;.read&quot;: true,    &quot;.write&quot;: true  &#125;&#125;

Specific user write&#123;  &quot;rules&quot;: &#123;    &quot;todos&quot;: &#123;      &quot;.read&quot;: true,      &quot;.write&quot;: &quot;auth.uid === &#x27;Oqjj5ESNKLZFNNOcBnXTIHtHb8f1&#x27;&quot;    &#125;  &#125;&#125;

Indexing&#123;  &quot;rules&quot;: &#123;    &quot;todos&quot;: &#123;      &quot;.indexOn&quot;: [&quot;text&quot;]    &#125;  &#125;&#125;
]]></content>
      <categories>
        <category>firebase</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Character</title>
    <url>/etc/character/</url>
    <content><![CDATA[EncodingASCII
American Standard Code for Information Interchange, 미국 정보 교환 표준 부호
영문 알페벳을 사용하는 대표적인 문자 인코딩, 컴퓨터와 통신장비를 비롯한 문자를 사용하는 많은 장치에서 사용
1967 년 표준으로 제정되어 1986 년 마지막 개정이 되었음
1 Byte 로 표현되고 비트로는 10 진수 0 ~ 255 로 표시

UNICODE
전 세계의 모든 문자를 컴퓨터에 일관되게 표현하고 다룰 수 있도록 설계된 산업 표준
유니코드 협회가 제정하며, 최신판은 2009 년 10 월에 공개된 유니코드 5.2
유니코드의 목적은 현존하는 문자 인코딩 방법들을 모두 유니코드로 교체하려는 것
기존의 인코딩들은 규모나 범위면에서 한정되어 있고, 다국어 환경에서 서로 호환되지 않는 문제점
0000 부터 시작 Basic Latin, 한글은 AC00 부터 시작

UTF-8
Unicode Transformation Format-8
유니코드를 바이트 단위로 인코딩하는 방법중의 하나
유니코드를 위한 가변 길이 문자 인코딩 방식 중 하나로, 켄 톰프슨과 롬 파이크가 만듬
이 인코딩은 유니코드 한 문자를 나타내기 위해 1 Byte ~ 4 Byte 까지 사용
아스키영역은 1 Byte (영문포함), 한글의 경우 3 Byte 를 차지

EUC-KR
KS X 1001 과 KS X 1003 을 사용하는 8 비트 문자 인코딩
호환성이 좋으며 웹페이지 작성에 사용가능
완성형 코드로서 KSC5636 과 KSC5601 로 합쳐진 인코딩 방식

CP949
한글 완성형 인코딩 방식
마이크로소프트사가 도입한 코드페이지
본래는 KSC5601 의 완성형 한글을 표현한 코드 페이지 였으나, 윈도우 95 부터 확장 완성형이라는 명칭으로 확장
CP949 인코딩은 EUC-KR 의 확장

ISO &#x2F; IEC 8895
ISO 와 IEC 의 공동표준
HTML 문서의 기본 인코딩

Entity Codehttps://graphemica.com/unicode/characters



character
entity name
entity number
description




&amp;nbsp;
&amp;#160;
Inserts a non-breaking blank space


$

&amp;#36;
dollar symbol


&#96;

&amp;#96;
backtick


&amp;#124;

&amp;#124;
vertical bar


·
&amp;middot;
&amp;#183;
Medium List Dot


↑
&amp;uarr;
&amp;#8593;
up arrow


€
&amp;euro;
&amp;#8364;
Euro Symbol


²
&amp;sup2;
&amp;#178;
Superscript 2


½
&amp;frac12;
&amp;#189;
Fraction ½


♥
&amp;hearts;
&amp;#9829;
heart


&amp;
&amp;amp;
&amp;#38;
Ampersand


“
&amp;quot;
&amp;#34;
quotation mark


©
&amp;copy;
&amp;#169;
copyright symbol


®
&amp;reg;
&amp;#174;
registered symbol


™
&amp;trade;
&amp;#8482;
trademark symbol


“
&amp;ldquo;
&amp;#8220;
Opening Double Quotes


”
&amp;rdquo;
&amp;#8221;
Closing Double Quotes


‘
&amp;lsquo;
&amp;#8216;
Opening Single Quote Mark


’
&amp;rsquo;
&amp;#8217;
Closing Single Quote Mark


«
&amp;laquo;
&amp;#171;
angle quotation mark (left)


»
&amp;raquo;
&amp;#187;
angle quotation mark (right)


‹
&amp;lsaquo;
&amp;#8249;
single left angle quotation


›
&amp;rsaquo;
&amp;#8250;
single right angle quotation


§
&amp;sect;
&amp;#167;
Section Symbol


¶
&amp;para;
&amp;#182;
Paragraph symbol


•
&amp;bull;
&amp;#8226;
Big List Dot


·
&amp;middot;
&amp;#183;
Medium List Dot


…
&amp;hellip;
&amp;#8230;
horizontal ellipsis


¦
&amp;brvbar;
&amp;#166;
broken vertical bar


–
&amp;ndash;
&amp;#8211;
en-dash


—
&amp;mdash;
&amp;#8212;
em-dash


¤
&amp;curren;
&amp;#164;
Generic currency symbol


¢
&amp;cent;
&amp;#162;
Cent symbol


£
&amp;pound;
&amp;#163;
Pound


¥
&amp;yen;
&amp;#165;
Yen


€
&amp;euro;
&amp;#8364;
Euro symbol


&lt;
&amp;lt;
&amp;#60;
Less than


&gt;
&amp;gt;
&amp;#62;
Greater than


{

&amp;#123;
left curly bracket


}

&amp;#125;
right curly bracket


≤
&amp;le;
&amp;#8804;
Less than or Equal to


≥
&amp;ge;
&amp;#8805;
Greater than or Equal to


×
&amp;times;
&amp;#215;
Multiplication symbol


÷
&amp;divide;
&amp;#247;
Division symbol


−
&amp;minus;
&amp;#8722;
Minus symbol


±
&amp;plusmn;
&amp;#177;
Plus&#x2F;minus symbol


≠
&amp;ne;
&amp;#8800;
Not Equal


¹
&amp;sup1;
&amp;#185;
Superscript 1


²
&amp;sup2;
&amp;#178;
Superscript 2


³
&amp;sup3;
&amp;#179;
Superscript 3


½
&amp;frac12;
&amp;#189;
Fraction ½


¼
&amp;frac14;
&amp;#188;
Fraction ¼


¾
&amp;frac34;
&amp;#190;
Fraction ¾


‰
&amp;permil;
&amp;#8240;
per mille


°
&amp;deg;
&amp;#176;
Degree symbol


√
&amp;radic;
&amp;#8730;
square root


∞
&amp;infin;
&amp;#8734;
Infinity


←
&amp;larr;
&amp;#8592;
left arrow


↑
&amp;uarr;
&amp;#8593;
up arrow


→
&amp;rarr;
&amp;#8594;
right arrow


↓
&amp;darr;
&amp;#8595;
down arrow


↔
&amp;harr;
&amp;#8596;
left right arrow


↵
&amp;crarr;
&amp;#8629;
carriage return arrow


⌈
&amp;lceil;
&amp;#8968;
left ceiling


⌉
&amp;rceil;
&amp;#8969;
right ceiling


⌊
&amp;lfloor;
&amp;#8970;
left floor


⌋
&amp;rfloor;
&amp;#8971;
right floor


♠
&amp;spades;
&amp;#9824;
spade


♣
&amp;clubs;
&amp;#9827;
club


♥
&amp;hearts;
&amp;#9829;
heart


♦
&amp;diams;
&amp;#9830;
diamond


◊
&amp;loz;
&amp;#9674;
lozenge


†
&amp;dagger;
&amp;#8224;
dagger


‡
&amp;Dagger;
&amp;#8225;
double dagger


¡
&amp;iexcl;
&amp;#161;
inverted exclamation mark


¿
&amp;iquest;
&amp;#191;
inverted question mark


☰

&amp;#9776;
menu icon


]]></content>
      <categories>
        <category>etc</category>
        <category>character</category>
      </categories>
  </entry>
  <entry>
    <title>Firebase Setup v9.6.8</title>
    <url>/firebase/setup/</url>
    <content><![CDATA[
  https://console.firebase.google.com


SetupUse NPMnpm install --save firebase

Firebase SDKimport &#123; initializeApp &#125; from &#x27;firebase/app&#x27;;const firebaseConfig = &#123;  apiKey: &#x27;AIzaSyBopeVpYEH1iCRTlF7wK1orM0Crapy4ZNs&#x27;,  authDomain: &#x27;gronkout-a3470.firebaseapp.com&#x27;,  projectId: &#x27;gronkout-a3470&#x27;,  storageBucket: &#x27;gronkout-a3470.appspot.com&#x27;,  messagingSenderId: &#x27;572972537057&#x27;,  appId: &#x27;1:572972537057:web:539a609f0501ac5be153a0&#x27;,&#125;;const app = initializeApp(firebaseConfig);

ServicesHostinghttps://firebase.google.com/products/hosting
Authenticationhttps://firebase.google.com/products/auth
Realtime databasehttps://firebase.google.com/products/realtime-database
Storagehttps://firebase.google.com/products/storage
Functionhttps://firebase.google.com/products/functions
Machine learninghttps://firebase.google.com/products/ml
]]></content>
      <categories>
        <category>firebase</category>
        <category>setup</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Firebase Storage v9.6.8</title>
    <url>/firebase/storage/</url>
    <content><![CDATA[BasicStarthttps://firebase.google.com/docs/storage/web/start
Create referencehttps://firebase.google.com/docs/storage/web/create-reference
Read and writehttps://firebase.google.com/docs/database/web/read-and-write
Upload fileshttps://firebase.google.com/docs/storage/web/upload-files
Download fileshttps://firebase.google.com/docs/storage/web/download-files
File metadatahttps://firebase.google.com/docs/storage/web/file-metadata
Delete fileshttps://firebase.google.com/docs/storage/web/delete-files
File listhttps://firebase.google.com/docs/storage/web/list-files
Rulesservice firebase.storage &#123;  match /b/&#123;bucket&#125;/o &#123;    match /&#123;allPaths=**&#125; &#123;      allow read, write;    &#125;  &#125;&#125;
]]></content>
      <categories>
        <category>firebase</category>
        <category>storage</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome Extension</title>
    <url>/etc/chrome-extension/</url>
    <content><![CDATA[
  https://developer.chrome.com/docs/extensions/mv3/getstarted
  https://github.com/dutiyesh/chrome-extension-cli


Guide
chrome://extensions 에서 개발자 모드를 활성화 한다.chrome://extensions 에서 압축해제된 확장 프로그램을 로드한다.

manifest.jsonhttps://developer.chrome.com/docs/extensions/mv3/manifest








background
브라우저 영역에서 작동하는 스크립트


content_scripts
웹 페이지의 컨텍스트에서 실행되는 파일


action.default_popup
HTML 과 직접 상호작용하고, background 스크립트와 함께 API 를 호출


options_page
옵션 페이지를 제공하여 확장 프로그램의 동작을 제어


&#123;  &quot;name&quot;: &quot;Getting Started Example&quot;,  &quot;description&quot;: &quot;Build an Extension!&quot;,  &quot;version&quot;: &quot;1.0&quot;,  &quot;manifest_version&quot;: 3,  &quot;background&quot;: &#123;    &quot;service_worker&quot;: &quot;background.js&quot;  &#125;,  &quot;permissions&quot;: [&quot;storage&quot;, &quot;activeTab&quot;, &quot;scripting&quot;],  &quot;action&quot;: &#123;    &quot;default_popup&quot;: &quot;popup.html&quot;  &#125;,  &quot;options_page&quot;: &quot;options.html&quot;&#125;

background.jslet color = &#x27;#3aa757&#x27;;chrome.runtime.onInstalled.addListener(() =&gt; &#123;  chrome.storage.sync.set(&#123; color &#125;);  console.log(&#x27;Default background color set to %cgreen&#x27;, `color: $&#123;color&#125;`);&#125;);

popup.html&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;button.css&quot;&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;button id=&quot;changeColor&quot;&gt;&lt;/button&gt;    &lt;script src=&quot;popup.js&quot;&gt;&lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;

button.cssbutton &#123;  height: 30px;  width: 30px;  outline: none;  margin: 10px;  border: none;  border-radius: 2px;&#125;button.current &#123;  box-shadow: 0 0 0 2px white, 0 0 0 4px black;&#125;

popup.js// Initialize button with user&#x27;s preferred colorlet changeColor = document.getElementById(&#x27;changeColor&#x27;);chrome.storage.sync.get(&#x27;color&#x27;, (&#123; color &#125;) =&gt; &#123;  changeColor.style.backgroundColor = color;&#125;);// When the button is clicked, inject setPageBackgroundColor into current pagechangeColor.addEventListener(&#x27;click&#x27;, async () =&gt; &#123;  let [tab] = await chrome.tabs.query(&#123; active: true, currentWindow: true &#125;);  chrome.scripting.executeScript(&#123;    target: &#123; tabId: tab.id &#125;,    function: setPageBackgroundColor,  &#125;);&#125;);// The body of this function will be executed as a content script inside the// current pagefunction setPageBackgroundColor() &#123;  chrome.storage.sync.get(&#x27;color&#x27;, (&#123; color &#125;) =&gt; &#123;    document.body.style.backgroundColor = color;  &#125;);&#125;

options.html&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;button.css&quot;&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;div id=&quot;buttonDiv&quot;&gt;    &lt;/div&gt;    &lt;div&gt;      &lt;p&gt;Choose a different background color!&lt;/p&gt;    &lt;/div&gt;  &lt;/body&gt;  &lt;script src=&quot;options.js&quot;&gt;&lt;/script&gt;&lt;/html&gt;

options.jsconst presetButtonColors = [&#x27;#3aa757&#x27;, &#x27;#e8453c&#x27;, &#x27;#f9bb2d&#x27;, &#x27;#4688f1&#x27;];let page = document.getElementById(&#x27;buttonDiv&#x27;);let selectedClassName = &#x27;current&#x27;;// Reacts to a button click by marking the selected button and saving// the selectionfunction handleButtonClick(event) &#123;  // Remove styling from the previously selected color  let current = event.target.parentElement.querySelector(`.$&#123;selectedClassName&#125;`);  if (current &amp;&amp; current !== event.target) &#123;    current.classList.remove(selectedClassName);  &#125;  // Mark the button as selected  let color = event.target.dataset.color;  event.target.classList.add(selectedClassName);  chrome.storage.sync.set(&#123; color &#125;);&#125;// Add a button to the page for each supplied colorfunction constructOptions(buttonColors) &#123;  chrome.storage.sync.get(&#x27;color&#x27;, (data) =&gt; &#123;    let currentColor = data.color;    // For each color we were provided    for (let buttonColor of buttonColors) &#123;      // create a button with that color      let button = document.createElement(&#x27;button&#x27;);      button.dataset.color = buttonColor;      button.style.backgroundColor = buttonColor;      // mark the currently selected color      if (buttonColor === currentColor) &#123;        button.classList.add(selectedClassName);      &#125;      // and register a listener for when that button is clicked      button.addEventListener(&#x27;click&#x27;, handleButtonClick);      page.appendChild(button);    &#125;  &#125;);&#125;// Initialize the page by constructing the color optionsconstructOptions(presetButtonColors);

ExamplesChrome objectchrome.tabs.executeScript(&#123;  code: &#x27;document.querySelector(&quot;body&quot;).innerText&#x27;&#125;, (result) =&gt; &#123;  const bodyText = result[0];  const bodyNum = bodyText.split(&#x27; &#x27;).length;  const myNum = bodyText.match(new RegExp(&#x27;\\b(the|is|was|of)\\b&#x27;, &#x27;gi&#x27;)).length;  let per = myNum / bodyNum * 100;  per = per.toFixed(2);  document.querySelector(&#x27;#result&#x27;).innerText = myNum+&#x27;/&#x27;+bodyNum +&#x27;(&#x27;+ per +&#x27;%)&#x27;;&#125;);

Chrome storagefunction matching(user) &#123;  chrome.tabs.executeScript(&#123;    code: &#x27;document.querySelector(&quot;body&quot;).innerText&#x27;  &#125;, (result) =&gt; &#123;    const bodyText = result[0];    const bodyNum = bodyText.split(&#x27; &#x27;).length;    const myNum = bodyText.match(new RegExp(&#x27;\\b(&#x27;+ user +&#x27;)\\b&#x27;, &#x27;gi&#x27;)).length;    let per = myNum/bodyNum*100;    per = per.toFixed(2);    document.querySelector(&#x27;#result&#x27;).innerText = myNum+&#x27;/&#x27;+bodyNum +&#x27;(&#x27;+ per +&#x27;%)&#x27;;  &#125;);&#125;// Getchrome.storage.sync.get((data) =&gt; &#123;  document.querySelector(&#x27;#user&#x27;).value = data.userWords;  matching(data.userWords);&#125;);document.querySelector(&#x27;#user&#x27;).addEventListener(&#x27;change&#x27;, () =&gt; &#123;  const user = document.querySelector(&#x27;#user&#x27;).value;  // Set  chrome.storage.sync.set(&#123;    userWords: user  &#125;);  matching(user);&#125;);
]]></content>
      <categories>
        <category>etc</category>
        <category>chrome-extension</category>
      </categories>
  </entry>
  <entry>
    <title>Git v2.35.1</title>
    <url>/etc/git/</url>
    <content><![CDATA[
  https://git-scm.com


BasicReset


구분
soft
mixed
hard



현재 브랜치 (HEAD)
초기화
초기화
초기화


스테이지
유지
초기화
초기화


워킹트리 변경사항
유지
유지
초기화


Git hookshttps://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks

어떤 이벤트가 생겼을 때 자동으로 특정 스크립트를 실행하도록 할 수 있다.클라이언트 훅과 서버 훅으로 나눌 수 있고, 클라이언트 훅은 커밋이나 머지 할 때 실행되고 서버 훅은 푸시 할 때 서버에서 실행된다.스크립트는 .git/hooks 에 위치한다.모든 예제는 쉘과 펄스크립트로 작성돼 있지만 실행 할 수만 있으면 되고, 루비나 파이선 같은 다른 스크립트 언어로 만들어도 된다.스크립트를 적용하려면 .sample 확장자를 제거한다.

Client-side hooks - Committing-workflow hookspre-commit
커밋 할 때 가장 먼저 호출되는 훅으로 커밋 메시지를 작성하기 전에 호출한다.이 때 린트를 해주면 좋다. (git commit --no-verify 으로 훅 생략 가능)

prepare-commit-msg
커밋 메시지를 생성하고 나서 편집기를 실행하기 전에 실행한다.이 훅은 커밋 메시지가 들어 있는 파일의 경로, 커밋의 종류를 아규먼트로 받는다.그리고 최근 커밋을 수정 할 때에는 (Amending commit) SHA-1 값을 추가 아규먼트로 더 받는다.이 훅은 일반 커밋에는 별로 필요 없고 커밋 메시지를 자동으로 생성하는 커밋에 좋다.커밋 메시지에 템플릿을 적용하거나, Merge commit, Squash commit, Amend commit 일 때 유용하다.이 스크립트로 커밋 메시지 템플릿에 정보를 삽입 할 수 있다.

commit-msg
커밋 메시지가 들어 있는 임시 파일의 경로를 아규먼트로 받는다.최종적으로 커밋이 완료되기 전에 프로젝트 상태나 커밋 메시지를 검증한다.

post-commit
커밋이 완료되면 실행한다.일반적으로 이 스크립트는 커밋된 것을 누군가에게 알릴 때 사용한다.

Client-side hooks - Email workflow hooksapplypatch-msg
아규먼트는 Author 가 보내온 커밋 메시지 파일의 이름이다.커밋 메시지가 규칙에 맞는지 확인하거나 자동으로 메시지를 수정 할 때 이 훅을 사용한다.

pre-applypatch
아규먼트가 없고 단순히 Patch 를 적용하고 나서 실행된다.커밋 할 스냅샷을 검사하는 데 사용한다.이 스크립트로 테스트를 수행하고 파일을 검사 할 수 있다.테스트에 실패하거나 뭔가 부족하면 0 이 아닌 값을 반환시켜서 git am 명령을 취소시킬 수 있다.

post-applypatch
자동으로 Patch 를 보낸 사람이나 그룹에게 알림 메시지를 보낼 수 있다.이 스크립트로는 Patch 를 중단시킬 수 없다.

Client-side hooks - Other client hookspre-rebase
Rebase 하기 전에 실행한다.이미 Push 한 커밋을 Rebase 하지 못하게 할 수 있다.

post-checkout
Checkout 할 때마다 작업하는 디렉토리에서 뭔가 할 일이 있을 때 사용한다.용량이 크거나 Git 이 관리하지 않는 파일을 옮기거나, 문서를 자동으로 생성하는 데 쓴다.

post-merge
Merge 가 끝나고 나서 실행된다.이 훅은 파일 권한 같이 Git 이 추적하지 않는 정보를 관리하는 데 사용한다.Merge 로 Working Tree 가 변경될 때 Git 이 관리하지 않는 파일이 원하는 대로 잘 배치됐는지 검사 할 때도 좋다.

Server-side hooks
서버 훅은 모두 Push 전후에 실행된다.

pre-receive
Push 하면 가장 처음 실행되는 훅이다.표준 입력 (STDIN) 으로 Push 하는 레퍼런스의 목록을 입력받는다.0 이 아닌 값을 반환하면 해당 레퍼런스가 전부 거절된다.Fast-forward Push 가 아니면 거절하거나, 브랜치 Push 권한을 제어하려면 이 훅에서 하는 것이 좋다.관리자만 브랜치를 새로 Push 하고 삭제 할 수 있고 일반 개발자는 수정사항만 Push 할 수 있게 할 수 있다.

post-receive
Push 한 후에 실행한다.사용자나 서비스에 알림 메시지를 보낼 수 있다.pre-receive 훅처럼 표준 입력 (STDIN) 으로 레퍼런스 목록이 넘어간다.이 훅으로 메일링리스트에 메일을 보내거나, CI (Continuous Integration) 서버나 Ticket-tracking 시스템의 정보를 수정 할 수 있다.커밋 메시지도 파싱할 수 있기 때문에 이 훅으로 Ticket 을 만들고, 수정하고, 닫을 수 있다.이 스크립트가 완전히 종료할 때까지 클라이언트와의 연결은 유지되고 Push 를 중단시킬 수 없다.이 스크립트로 시간이 오래 걸릴만한 일을 할 때는 조심해야 한다.

update
각 브랜치마다 한 번씩 실행된다는 것을 제외하면 pre-receive 스크립트와 거의 같다.한 번에 브랜치를 여러 개 Push 하면 pre-receive 는 딱 한 번만 실행되지만, update 는 브랜치마다 실행된다.이 스크립트는 표준 입력으로 데이터를 입력받는 것이 아니라 아규먼트로 브랜치 이름, 원래 가리키던 SHA-1 값, 사용자가 Push 하는 SHA-1 값을 입력받는다.update 스크립트가 0 이 아닌 값을 반환하면 해당 레퍼런스만 거절되고 나머지 다른 레퍼런스는 상관없다.

Git flowhttp://danielkummer.github.io/git-flow-cheatsheet
master
최종 릴리즈에 사용되는 안정된 버전이다.

develop
다음 릴리즈를 위해 개발중인 최신 버전이다.

feature
특정 기능 개발을 위한 브랜치이다.배포 (release) 를 위한 새 기능 (feature) 을 개발한다.

Startgit flow feature start MYFEATURE


develop 에 기반한 새 기능 (feature/MYFEATURE) 브랜치를 생성하고 그 브랜치로 전환한다.

Finishgit flow feature finish MYFEATURE


develop 으로 자동 체크아웃 한 뒤 feature/MYFEATURE 브랜치를 develop 에 병합 (merge) 한다.병합된 기능 브랜치를 삭제한다.

Publishgit flow feature publish MYFEATURE


기능을 원격 서버에 게시하여 다른 사용자들도 사용할 수 있게 한다.

Pullgit flow feature pull origin MYFEATURE


다른 사용자가 게시한 기능을 가져온다.

release
릴리즈 점검을 위한 브랜치이다.새로운 제품 출시를 위한 사소한 버그 수정이나 메타 데이터 준비를 허용한다.

Startgit flow release start RELEASE [BASE]

git flow release publish RELEASE

git flow release track RELEASE // 변경 추적


develop 브랜치로부터 release 브랜치를 생성한다.릴리스를 시작할 BASE commit sha-1 해시를 선택적으로 줄 수도 있다.그 commit 은 반드시 develop 브랜치에 있어야 한다.

Finishgit flow release finish RELEASEgit push --tags // 태그들을 push


release 브랜치를 master 브랜치에 병합 (merge) 한다.릴리스를 릴리스 이름으로 태그 (tag) 를 생성한다.릴리스를 develop 브랜치로 재병합 (back-merge) 한다.release 브랜치를 삭제한다.

hotfix
긴급 버그 픽스를 위한 브랜치이다.현재 출시된 제품에 문제가 생겨서 즉각 대응해야하는 상황에서 필요하다.master 브랜치의 현재 출시된 버전으로 표기 (mark) 된 태그로부터 브랜치를 생성한다.

Startgit flow hotfix start VERSION [BASENAME]


버전 인수는 핫픽스 릴리스 이름을 지정한다.선택적으로 basename 으로 시작점을 지정할 수도 있다.

Finishgit flow hotfix finish VERSION


develop 및 master 브랜치로 병합 (merge) 한다.추가적으로 master 의 병합부분은 핫픽스 버전으로 태그된다.

support
버전 호환성 문제를 처리하기 위한 브랜치이다.

ExamplesGit command서버에 브랜치 생성git branch new_branchgit push origin new_branchgit branch --set-upstream-to origin/new_branch

서버 브랜치 이름 변경git branch -m old_branch new_branchgit push origin :old_branchgit push --set-upstream origin new_branch

추적중인 파일을 추적 종료git rm --cached --force &#x27;src/file.name&#x27;


.gitignore 목록에 내용을 추가 해야 한다.

푸시 후 커밋 메세지 수정git commit --amend -m &#x27;새로운 메세지&#x27;git push -force

푸시 후 롤백git reset --hard &lt;hash&gt;git push -force


다른 작업자는 저장소를 새로 받아야 한다.

]]></content>
      <categories>
        <category>etc</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Excel</title>
    <url>/etc/excel/</url>
    <content><![CDATA[Tips
ENTER 를 눌렀을 때 아래로 내려가는 방향 설정: 옵션 &gt; 고급 &gt; 엔터키 를 누른 후 다음 셀로 이동
드래그 영역을 설정한 후 작성하면 TAB, ENTER 를 눌렀을 때 범위 안에서만 셀이 움직이므로 데이터 입력이 편리함
셀내부 데이터 정렬: 셀서식 &gt; 맞춤 &gt; 텍스트 맞춤
숫자 데이터 천단위 구분: 셀서식 &gt; 표시형식 &gt; 숫자 &gt; 1000 단위 구분기호 사용
표 마지막 셀에서 TAB 을 누르면 다음 줄이 자동으로 생성 됨
이전 명령을 실행 하는 단축키: Ctrl + Y
데이터 끝으로 이동하는 단축키: Ctrl + 화살표
옵션 &gt; 언어 교정 &gt; 자동 고침 옵션 &gt; 한/영 자동 고침 체크 해제

Charts







세로 막대형
묶은, 누적, 100% 기준 누적, 3 차원 묶은, 3 차원 누적, 3 차원 100% 기준 누적, 3 차원


꺽은 선형
누적, 100% 기준 누적, 표식이 있는, 표식이 있는 누적, 표식이 있는 100% 기준 누적, 3 차원


원형
3 차원, 원형 대 원형, 원형 대 가로 막대형, 도넛형


가로 막대형
묶은, 누적, 100% 기준 누적, 3 차원 묶은, 3 차원 누적, 3 차원 100% 기준 누적


영역형
누적, 100% 기준 누적, 3 차원, 3 차원 누적, 3 차원 100% 기준 누적


분산형
곡선 및 표식이 있는, 곡선이 있는, 직선 및 표식이 있는, 직선이 있는, 거품형, 3 차원 거품형


주식형
고가-저가-종가, 시가-고가-저가-종가, 거래량-고가-저가-종가, 거래량-시가-고가-저가-종가


표면형
3 차원, 3 차원 골격, 조감도, 골격형 조감도


방사형
표식이 있는, 채워진


콤보
묶은세로막대형-꺾은선형, 묶은세로막대형-꺾은선형보조축, 누적영역형-묶은세로막대형, 사용자지정조합


FunctionsCompatibility


함수
설명



BETADIST
누적 베타 분포 함수를 반환


BETAINV
지정된 베타 분포에 대한 역 누적 분포 함수를 반환


BINOMDIST
개별항 이항 분포 확률을 반환


CHIDIST
카이 제곱 분포의 단측 검정 확률을 반환


CHIINV
카이 제곱 분포의 역 단측 검정 확률을 반환


CHITEST
독립 검증 결과를 반환


CONFIDENCE
모집단 평균의 신뢰 구간을 반환


COVAR
각 데이터 요소 쌍에 대한 편차의 곱의 평균 (공 분산) 을 반환


CRITBINOM
누적 이항 분포가 기준치 이하가 되는 값 중 최소값을 반환


EXPONDIST
지수 분포값을 반환


FDIST
F 확률 분포값을 반환


FINV
F 확률 분포의 역함수를 반환


FTEST
F 검정 결과를 반환


GAMMADIST
감마 분포값을 반환


GAMMAINV
감마 누적 분포의 역함수 값을 반환


HYPGEOMDIST
초기하 분포값을 반환


LOGINV
로그 정규 누적 분포 함수의 역함수 값을 반환


LOGNORMDIST
로그 정규 누적 분포값을 반환


MODE
데이터 집합에서 가장 많이 나오는 값을 반환


NEGBINOMDIST
음 이항 분포값을 반환


NORMDIST
정규 누적 분포값을 반환


NORMINV
정규 누적 분포의 역함수 값을 반환


NORMSDIST
표준 정규 누적 분포값을 반환


NORMSINV
표준 정규 누적 분포의 역함수 값을 반환


PERCENTILE
범위에서 k 번째 백분위수를 반환


PERCENTRANK
데이터 집합의 값에 대한 백분율 순위를 반환


POISSON
포아송 확률 분포값을 반환


QUARTILE
데이터 집합에서 사분위수를 반환


RANK
수 목록 내에서 지정한 수의 크기 순위를 반환


STDEV
표본 집단의 표준 편차를 구함


STDEVP
모집단의 표준 편차를 계산


TDIST
스튜던트 T 분포값을 반환


TINV
스튜던트 T 분포의 역함수 값을 반환


TTEST
스튜던트 T 검정에 근거한 확률을 반환


VAR
표본 집단의 분산을 구함


VARP
모집단의 분산을 계산


WEIBULL
와이블 분포값을 반환


ZTEST
Z 검정의 단측 검정 확률값을 반환


Cube


함수
설명



CUBEKPIMEMBER
KPI (핵심 성과 지표) 속성을 반환하고 셀에 KPI 이름을 표시. KPI 는 월별 매출총이익, 분기별 직원 전직률과 같이 수량화할 수 있는 측정값이며 조직의 성과를 모니터링 하는데 사용


CUBEMEMBER
큐브에서 구성원이나 튜플을 반환. 큐브에 구성원이나 튜플이 있는지 확인하는 데 사용


CUBEMEMBERPROPERTY
큐브에서 구성원 속성 값을 반환. 큐브 내에 구성원 이름이 있는지 확인하고 해당 구성원에 지정된 속성을 반환하는 데 사용


CUBERANKEDMEMBER
집합에서 n 번째 또는 순위 내의 구성원을 반환. 최고 판매 사원이나 10 등 내의 학생 등 집합에서 하나 이상의 요소를 반환하는 데 사용


CUBESET
서버의 큐브에 집합을 만드는 식을 전송하여 계산된 구성원이나 튜플 집합을 정의하고 이 집합을 엑셀에 반환


CUBESETCOUNT
집합에서 항목 개수를 반환


CUBEVALUE
큐브에서 집계 값을 반환


Database


함수
설명



DAVERAGE
선택한 데이터베이스 항목의 평균을 반환


DCOUNT
데이터베이스에서 숫자가 있는 셀의 개수를 계산


DCOUNTA
데이터베이스에서 데이터가 들어 있는 셀의 개수를 계산


DGET
데이터베이스에서 찾을 조건에 맞는 레코드가 하나인 경우 그 레코드를 추출


DMAX
선택한 데이터베이스 항목 중에서 최대값을 반환


DMIN
선택한 데이터베이스 항목 중에서 최소값을 반환


DPRODUCT
데이터베이스에서 조건에 맞는 특정 레코드 필드 값의 곱


DSTDEV
데이터베이스 필드 값들로부터 표본 집단의 표준 편차를 구함


DSTDEVP
데이터베이스 필드 값들로부터 모집단의 표준 편차를 계산


DSUM
데이터베이스에서 조건에 맞는 레코드 필드 열 값들의 합을 구함


DVAR
데이터베이스 필드 값들로부터 표본 집단의 분산을 구함


DVARP
데이터베이스 필드 값들로부터 모집단의 분산을 계산


Date &amp; Time


함수
설명



DATE
특정 날짜의 일련 번호를 반환


DATEVALUE
텍스트 형태의 날짜를 일련 번호로 변환


DAY
일련 번호를 주어진 달의 날짜로 변환


DAYS360
1 년을 360 일로 하여, 두 날짜 사이의 날짜 수를 계산


EDATE
지정한 날짜 전이나 후의 개월 수를 나타내는 날짜의 일련 번호를 반환


EOMONTH
지정된 달 수 이전이나 이후 달의 마지막 날의 날짜 일련 번호를 반환


HOUR
일련 번호를 시간으로 변환


MINUTE
일련 번호를 분으로 변환


MONTH
일련 번호를 월로 변환


NETWORKDAYS
두 날짜 사이의 전체 작업 일수를 반환


NETWORKDAYS.INTL
주말인 날짜와 해당 날짜 수를 나타내는 매개 변수를 사용하여 두 날짜 사이의 전체 작업 일수를 반환


NOW
현재 날짜 및 시간의 일련 번호를 반환


SECOND
일련 번호를 초로 변환


TIME
특정 시간의 일련 번호를 반환


TIMEVALUE
텍스트 형태의 시간을 일련 번호로 변환


TODAY
오늘 날짜의 일련 번호를 반환


WEEKDAY
일련 번호를 요일로 변환


WEEKNUM
일련 번호를 해당 주가 일 년 중 몇 번째 주인지 나타내는 숫자로 변환


WORKDAY
특정 일 (시작 날짜) 의 전이나 후의 날짜 수에서 주말이나 휴일을 제외한 날짜 수, 즉 평일 수를 반환


WORKDAY.INTL
주말인 날짜와 해당 날짜 수를 나타내는 매개 변수를 사용하여 지정된 작업 일수 이전 또는 이후 날짜의 일련 번호를 반환


YEAR
일련 번호를 연도로 변환


YEARFRAC
start_date 와 end_date 사이의 날짜 수가 일 년 중 차지하는 비율을 반환


Engineering


함수
설명



BESSELI
수정된 Bessel 함수 In(x) 값을 반환


BESSELJ
Bessel 함수 Jn(x) 값을 반환


BESSELK
수정된 Bessel 함수 Kn(x) 값을 반환


BESSELY
Bessel 함수 Yn(x) 값을 반환


BIN2DEC
2 진수를 10 진수로 변환


BIN2HEX
2 진수를 16 진수로 변환


BIN2OCT
2 진수를 8 진수로 변환


COMPLEX
실수부와 허수부의 계수를 복소수로 변환


CONVERT
다른 단위 체계의 숫자로 변환


DEC2BIN
10 진수를 2 진수로 변환


DEC2HEX
10 진수를 16 진수로 변환


DEC2OCT
10 진수를 8 진수로 변환


DELTA
두 값이 같은지 여부를 검사


ERF
오차 함수를 반환


ERF.PRECISE
오차 함수를 반환


ERFC
ERF 함수의 여값을 반환


ERFC.PRECISE
x 에서 무한대까지 적분된 ERF 함수의 여값을 반환


GESTEP
숫자가 임계값보다 큰지 여부를 검사


HEX2BIN
16 진수를 2 진수로 변환


HEX2DEC
16 진수를 10 진수로 변환


HEX2OCT
16 진수를 8 진수로 변환


IMABS
복소수의 절대값을 반환


IMAGINARY
복소수의 허수부 계수를 반환


IMARGUMENT
각도가 라디안으로 표시되는 테타 인수를 반환


IMCONJUGATE
복소수의 켤레 복소수를 반환


IMCOS
복소수의 코사인을 반환


IMDIV
두 복소수의 나눗셈 몫을 반환


IMEXP
복소수의 지수를 반환


IMLN
복소수의 자연 로그값을 반환


IMLOG10
복소수의 밑이 10 인 로그값을 반환


IMLOG2
복소수의 밑이 2 인 로그값을 반환


IMPOWER
복소수의 멱을 반환


IMPRODUCT
복소수 2 개부터 255 개까지의 곱을 반환


IMREAL
복소수의 실수부 계수를 반환


IMSIN
복소수의 사인을 반환


IMSQRT
복소수의 제곱근을 반환


IMSUB
두 복소수 간의 차를 반환


IMSUM
복소수의 합을 반환


OCT2BIN
8 진수를 2 진수로 변환


OCT2DEC
8 진수를 10 진수로 변환


OCT2HEX
8 진수를 16 진수로 변환


Finance


함수
설명



ACCRINT
정기적으로 이자를 지급하는 유가 증권의 경과 이자를 반환


ACCRINTM
만기에 이자를 지급하는 유가 증권의 경과 이자를 반환


AMORDEGRC
감가 상각 계수를 사용하여 매 회계 기간의 감가 상각액을 반환


AMORLINC
매 회계 기간에 대한 감가 상각액을 반환


COUPDAYBS
이자 지급 기간의 시작일부터 결산일까지의 날짜 수를 반환


COUPDAYS
결산일이 들어 있는 이자 지급 기간의 날짜 수를 반환


COUPDAYSNC
결산일부터 다음 이자 지급일까지의 날짜 수를 반환


COUPNCD
결산일 다음 첫 번째 이자 지급일을 나타내는 숫자를 반환


COUPNUM
결산일과 만기일 사이의 이자 지급 횟수를 반환


COUPPCD
결산일 바로 전 이자 지급일을 나타내는 숫자를 반환


CUMIPMT
주어진 기간 중에 납입하는 대출금 이자의 누계액을 반환


CUMPRINC
주어진 기간 중에 납입하는 대출금 원금의 누계액을 반환


DB
정율법을 사용하여 지정한 기간 동안 자산의 감가 상각을 반환


DDB
이중 체감법이나 기타 방법을 사용하여 지정된 기간의 감가 상각액을 반환


DISC
유가 증권의 할인율을 반환


DOLLARDE
분수로 표시된 금액을 소수로 표시된 금액으로 변환


DOLLARFR
소수로 표시된 금액을 분수로 표시된 금액으로 변환


DURATION
정기적으로 이자를 지급하는 유가 증권의 연간 듀레이션을 반환


EFFECT
연간 실질 이자율을 반환


FV
투자의 미래 가치를 반환


FVSCHEDULE
초기 원금에 일련의 복리 이율을 적용했을 때의 예상 금액을 반환


INTRATE
완전 투자한 유가 증권의 이자율을 반환


IPMT
일정 기간 동안의 투자 금액에 대한 이자 지급액을 반환


IRR
일련의 현금 흐름에 대한 내부 수익률을 반환


ISPMT
일정 기간 동안의 투자에 대한 이자 지급액을 계산


MDURATION
가정된 액면가 $100 에 대한 유가 증권의 수정된 Macauley 듀레이션을 반환


MIRR
다른 이율로 형성되는 양의 현금 흐름과 음의 현금 흐름에 대한 내부 수익률을 반환


NOMINAL
명목상의 연이율을 반환


NPER
투자의 기간을 반환


NPV
주기적인 현금 흐름과 할인율을 기준으로 투자의 순 현재 가치를 반환


ODDFPRICE
첫 이수 기간이 경상 이수 기간과 다른 유가 증권의 액면가 $100 당 가격을 반환


ODDFYIELD
첫 이수 기간이 경상 이수 기간과 다른 유가 증권의 수익률을 반환


ODDLPRICE
마지막 이수 기간이 경상 이수 기간과 다른 유가 증권의 액면가 $100 당 가격을 반환


ODDLYIELD
마지막 이수 기간이 경상 이수 기간과 다른 유가 증권의 수익률을 반환


PMT
연금의 정기 납입액을 반환


PPMT
일정 기간 동안의 투자에 대한 원금의 지급액을 반환


PRICE
정기적으로 이자를 지급하는 유가 증권의 액면가 $100 당 가격을 반환


PRICEDISC
할인된 유가 증권의 액면가 $100 당 가격을 반환


PRICEMAT
만기일에 이자를 지급하는 유가 증권의 액면가 $100 당 가격을 반환


PV
투자의 현재 가치를 반환


RATE
연금의 기간별 이자율을 반환


RECEIVED
완전 투자 유가 증권에 대해 만기 시 수령하는 금액을 반환


SLN
한 기간 동안 정액법에 의한 자산의 감가 상각액을 반환


SYD
지정된 감가 상각 기간 중 자산의 감가 상각액을 연수 합계법으로 반환


TBILLEQ
국채에 대해 채권에 해당하는 수익률을 반환


TBILLPRICE
국채에 대해 액면가 $100 당 가격을 반환


TBILLYIELD
국채의 수익률을 반환


VDB
일정 또는 일부 기간 동안 체감법으로 자산의 감가 상각액을 반환


XIRR
비정기적일 수도 있는 현금 흐름의 내부 회수율을 반환


XNPV
비정기적일 수도 있는 현금 흐름의 순 현재 가치를 반환


YIELD
정기적으로 이자를 지급하는 유가 증권의 수익률을 반환


YIELDDISC
국채와 같이 할인된 유가 증권의 연 수익률을 반환


YIELDMAT
만기 시 이자를 지급하는 유가 증권의 연 수익률을 반환


Information


함수
설명



CELL
셀의 서식 지정이나 위치, 내용에 대한 정보를 반환


ERROR.TYPE
오류 유형에 해당하는 숫자를 반환


INFO
현재 운영 환경에 대한 정보를 반환


ISBLANK
값이 비어 있으면 TRUE 를 반환


ISERR
값이 #N/A 를 제외한 오류 값이면 TRUE 를 반환


ISERROR
값이 오류 값이면 TRUE 를 반환


ISEVEN
숫자가 짝수이면 TRUE 를 반환


ISLOGICAL
값이 논리값이면 TRUE 를 반환


ISNA
값이 #N/A 오류 값이면 TRUE 를 반환


ISNONTEXT
값이 텍스트가 아니면 TRUE 를 반환


ISNUMBER
값이 숫자이면 TRUE 를 반환


ISODD
숫자가 홀수이면 TRUE 를 반환


ISREF
값이 셀 주소이면 TRUE 를 반환


ISTEXT
값이 텍스트이면 TRUE 를 반환


N
숫자로 변환된 값을 반환


NA
#N/A 오류 값을 반환


TYPE
값의 데이터 형식을 나타내는 숫자를 반환


Logic


함수
설명



AND
인수가 모두 TRUE 이면 TRUE 를 반환


FALSE
논리값 FALSE 를 반환


IF
수행할 논리 검사를 지정 =IF(A1&gt;=50,&quot;true&quot;,&quot;false&quot;)


IFERROR
수식이 오류이면 사용자가 지정한 값을 반환하고, 그렇지 않으면 수식 결과를 반환


NOT
인수의 논리 역을 반환


OR
인수가 하나라도 TRUE 이면 TRUE 를 반환


TRUE
논리값 TRUE 를 반환


Find &amp; Reference


함수
설명



ADDRESS
참조를 워크시트의 한 셀에 대한 텍스트로 반환


AREAS
참조 영역 내의 영역 수를 반환


CHOOSE
값 목록에서 값을 선택


COLUMN
참조 영역의 열 번호를 반환


COLUMNS
참조 영역의 열 수를 반환


GETPIVOTDATA
피벗 테이블 보고서에 저장된 데이터를 반환


HLOOKUP
배열의 첫 행을 찾아 표시된 셀의 값을 반환


HYPERLINK
네트워크 서버, 인트라넷 또는 인터넷에 저장된 문서로 이동할 바로 가기 키 생성


INDEX
인덱스를 사용하여 참조 영역이나 배열의 값을 선택


INDIRECT
텍스트 값으로 표시된 참조를 반환


LOOKUP
벡터나 배열에서 값을 찾음


MATCH
참조 영역이나 배열에서 값을 찾음


OFFSET
주어진 참조 영역으로부터의 참조 영역 간격을 반환


ROW
참조의 행 번호를 반환


ROWS
참조 영역에 있는 행 수를 반환


RTD
자동화를 지원하는 프로그램으로부터 실시간 데이터를 가져옴


TRANSPOSE
배열의 행과 열을 바꿈


VLOOKUP
배열의 첫째 열을 찾아 행 쪽으로 이동하여 셀 값을 반환


Mathematics


함수
설명



ABS
숫자의 절대 값을 반환


ACOS
숫자의 아크코사인을 반환


ACOSH
숫자의 역 하이퍼볼릭 코사인을 반환


AGGREGATE
목록 또는 데이터베이스에서 집계 값을 반환


ASIN 문자
숫자의 아크사인을 반환


ASINH
숫자의 역 하이퍼볼릭 사인을 반환


ATAN
숫자의 아크탄젠트를 반환


ATAN2
x, y 좌표의 아크탄젠트를 반환


ATANH
숫자의 역 하이퍼볼릭 탄젠트를 반환


CEILING
가장 가까운 정수 또는 가장 가까운 significance 의 배수로 숫자를 반올림


CEILING.PRECISE
가장 가까운 정수 또는 가장 가까운 significance 의 배수로 숫자를 반올림 숫자의 부호에 상관없이 숫자는 반올림


COMBIN
주어진 개체 수로 만들 수 있는 조합의 수를 반환


COS
숫자의 코사인을 반환


COSH
숫자의 하이퍼볼릭 코사인을 반환


DEGREES
라디안 형태의 각도를 도 단위로 바꿈


EVEN
가장 가까운 짝수로 숫자를 반올림


EXP
number 를 지수로 한 e 의 누승을 반환


FACT
number 의 계승값을 반환


FACTDOUBLE
number 의 이중 계승값을 반환


FLOOR
0 에 가까워지도록 수를 내림


FLOOR.PRECISE
가장 가까운 정수 또는 가장 가까운 significance 의 배수로 숫자를 내림 숫자의 부호에 상관없이 숫자는 내림


GCD
최대 공약수를 반환


INT
가장 가까운 정수로 숫자를 내림


ISO.CEILING
가장 가까운 정수 또는 significance 의 배수로 반올림한 숫자를 반환


LCM
최소 공배수를 반환


LN
숫자의 자연 로그를 반환


LOG
지정한 밑에 대한 로그를 반환


LOG10
밑이 10 인 로그값을 반환


MDETERM
배열의 행렬 식을 반환


MINVERSE
배열의 역행렬을 반환


MMULT
두 배열의 행렬 곱을 반환


MOD
나눗셈의 나머지를 반환


MROUND
원하는 배수로 반올림된 수를 반환


MULTINOMIAL
각 계승값의 곱에 대한 합계의 계승값 비율을 반환


ODD
가장 가까운 홀수로 숫자를 반올림


PI
원주율 (파이) 값을 반환


POWER
밑수를 지정한 만큼 거듭제곱한 결과를 반환


PRODUCT
인수를 곱


QUOTIENT
나눗셈 몫의 정수 부분을 반환


RADIANS
도 단위로 표시된 각도를 라디안으로 변환


RAND
0 과 1 사이의 난수를 반환


RANDBETWEEN
지정한 두 수 사이의 난수를 반환


ROMAN
아라비아 숫자를 텍스트인 로마 숫자로 변환


ROUND
수를 지정한 자릿수로 반올림


ROUNDDOWN
0 에 가까워지도록 수를 내림


ROUNDUP
0 에서 멀어지도록 수를 올림


SERIESSUM
수식에 따라 멱급수의 합을 반환


SIGN
수의 부호값을 반환


SIN
지정된 각도의 사인을 반환


SINH
숫자의 하이퍼볼릭 사인을 반환


SQRT
양의 제곱근을 반환


SQRTPI
(number * pi) 의 제곱근을 반환


SUBTOTAL
목록이나 데이터베이스의 부분합을 반환


SUM
인수의 합을 구함


SUMIF
주어진 조건에 의해 지정된 셀들의 합을 구함


SUMIFS
범위 내에서 여러 조건에 맞는 셀들의 합을 구함


SUMPRODUCT
배열의 대응되는 구성 요소끼리 곱해서 그 값을 반환


SUMSQ
인수의 제곱의 합을 반환


SUMX2MY2
두 배열에서 대응값의 제곱을 구한 다음 그 차이의 합을 반환


SUMX2PY2
두 배열에서 대응값의 제곱을 구한 다음 그 합의 합을 반환


SUMXMY2
두 배열에서 대응값의 차이를 구한 다음 그 제곱의 합을 반환


TAN
숫자의 탄젠트를 반환


TANH
숫자의 하이퍼볼릭 탄젠트를 반환


TRUNC
수의 소수점 이하를 버림


Statistics


함수
설명



AVEDEV
데이터 요소의 절대 편차의 평균을 반환


AVERAGE
인수의 평균을 반환


AVERAGEA
인수의 평균 (숫자, 텍스트, 논리값 포함)을 반환


AVERAGEIF
범위 내에서 주어진 조건에 맞는 모든 셀의 평균 (산술 평균)을 반환


AVERAGEIFS
여러 조건에 맞는 모든 셀의 평균 (산술 평균)을 반환


BETA.DIST
누적 베타 분포 함수를 반환


BETA.INV
지정된 베타 분포에 대한 역 누적 분포 함수를 반환


BINOM.DIST
개별항 이항 분포 확률을 반환


BINOM.INV
누적 이항 분포가 기준치 이하가 되는 값 중 최소값을 반환


CHISQ.DIST
누적 베타 확률 밀도 함수 값을 반환


CHISQ.DIST.RT
카이 제곱 분포의 단측 검정 확률을 반환


CHISQ.INV
누적 베타 확률 밀도 함수 값을 반환


CHISQ.INV.RT
카이 제곱 분포의 역 단측 검정 확률을 반환


CHISQ.TEST
독립 검증 결과를 반환


CONFIDENCE.NORM
모집단 평균의 신뢰 구간을 반환


CONFIDENCE.T
스튜던트 T 분포를 사용하는 모집단 평균의 신뢰 구간을 반환


CORREL
두 데이터 집합 사이의 상관 계수를 반환


COUNT
인수 목록에서 숫자의 수를 계산


COUNTA
인수 목록에서 값의 수를 계산


COUNTBLANK
범위 내에서 빈 셀의 수를 계산


COUNTIF
범위 내에서 주어진 조건에 맞는 셀의 수를 계산


COUNTIFS
범위 내에서 여러 조건에 맞는 셀의 수를 계산


COVARIANCE.P
각 데이터 요소 쌍에 대한 편차의 곱의 평균 (공 분산)을 반환


COVARIANCE.S
두 데이터 집합 사이에서 각 데이터 요소 쌍에 대한 편차의 곱의 평균 (표본 집단 공 분산)을 반환


DEVSQ
편차의 제곱의 합을 반환


EXPON.DIST
지수 분포값을 반환


F.DIST
F 확률 분포값을 반환


F.DIST.RT
F 확률 분포값을 반환


F.INV
F 확률 분포의 역함수를 반환


F.INV.RT
F 확률 분포의 역함수를 반환


F.TEST
F 검정 결과를 반환


FISHER
Fisher 변환 값을 반환


FISHERINV
Fisher 변환의 역변환 값을 반환


FORECAST
선형 추세에 따라 값을 반환


FREQUENCY
빈도 분포값을 세로 배열로 반환


GAMMA.DIST
감마 분포값을 반환


GAMMA.INV
감마 누적 분포의 역함수 값을 반환


GAMMALN
감마 함수 Γ(x) 의 자연 로그값을 반환


GAMMALN.PRECISE
감마 함수 Γ(x) 의 자연 로그값을 반환


GEOMEAN
기하 평균을 반환


GROWTH
지수 추세를 따라 값을 반환


HARMEAN
조화 평균을 반환


HYPGEOM.DIST
초기하 분포값을 반환


INTERCEPT
선형 회귀선의 절편을 반환


KURT
데이터 집합의 첨도를 반환


LARGE
데이터 집합에서 k 번째로 큰 값을 반환


LINEST
선형 추세의 매개 변수를 반환


LOGEST
지수 추세의 매개 변수를 반환


LOGNORM.DIST
로그 정규 누적 분포값을 반환


LOGNORM.INV
로그 정규 누적 분포의 역함수 값을 반환


MAX
인수 목록에서 최대값을 반환


MAXA
인수 목록에서 최대값 (숫자, 텍스트, 논리값 포함) 을 반환


MEDIAN
주어진 수들의 중간값을 반환


MIN
인수 목록에서 최소값을 반환


MINA
인수 목록에서 최소값 (숫자, 텍스트, 논리값 포함) 을 반환


MODE.MULT
배열이나 데이터 범위에서 가장 자주 발생하는 값의 세로 배열을 반환


MODE.SNGL
데이터 집합에서 가장 많이 나오는 값을 반환


NEGBINOM.DIST
음 이항 분포값을 반환


NORM.DIST
정규 누적 분포값을 반환


NORM.INV
정규 누적 분포의 역함수 값을 반환


NORM.S.DIST
표준 정규 누적 분포값을 반환


NORM.S.INV
표준 정규 누적 분포의 역함수 값을 반환


PEARSON
피어슨 곱 모멘트 상관 계수를 반환


PERCENTILE.EXC
범위에서 k 번째 백분위수를 반환 (k 는 경계값을 제외한 0 에서 1 사이의 수)


PERCENTILE.INC
범위에서 k 번째 백분위수를 반환


PERCENTRANK.EXC
데이터 집합에서 경계값을 제외한 0 에서 1 사이의 백분율 순위를 반환


PERCENTRANK.INC
데이터 집합의 값에 대한 백분율 순위를 반환


PERMUT
주어진 개체 수로 만들 수 있는 순열의 수를 반환


POISSON.DIST
포아송 확률 분포값을 반환


PROB
영역 내의 값이 두 한계값 사이에 있을 확률을 반환


QUARTILE.EXC
데이터 집합에서 경계값을 제외한 0 에서 1 사이의 사분위수를 반환


QUARTILE.INC
데이터 집합에서 사분위수를 반환


RANK.AVG
수 목록 내에서 지정한 수의 크기 순위를 반환


RANK.EQ
수 목록 내에서 지정한 수의 크기 순위를 반환


RSQ
피어슨 곱 모멘트 상관 계수의 제곱을 반환


SKEW
분포의 왜곡도를 반환


SLOPE
선형 회귀선의 기울기를 반환


SMALL
데이터 집합에서 k 번째로 작은 값을 반환


STANDARDIZE
정규화된 값을 반환


STDEV.P
모집단의 표준 편차를 계산


STDEV.S
표본 집단의 표준 편차를 구함


STDEVA
표본 집단의 표준 편차 (숫자, 텍스트, 논리값 포함) 를 구함


STDEVPA
모집단의 표준 편차 (숫자, 텍스트, 논리값 포함) 를 계산


STEYX
회귀분석에 의해 예측한 y 값의 표준 오차를 각 x 값에 대하여 반환


T.DIST
스튜던트 T 분포의 백분율 (확률값) 을 반환


T.DIST.2T
스튜던트 T 분포의 백분율 (확률값) 을 반환


T.DIST.RT
스튜던트 T 분포값을 반환


T.INV
스튜던트 T 분포의 T 값을 확률과 자유도에 대한 함수로 반환


T.INV.2T
스튜던트 T 분포의 역함수 값을 반환


TREND
선형 추세에 따라 값을 반환


TRIMMEAN
데이터 집합의 양 끝값을 제외하고 평균을 구함


T.TEST
스튜던트 T 검정에 근거한 확률을 반환


VAR.P
모집단의 분산을 계산


VAR.S
표본 집단의 분산을 구함


VARA
표본 집합의 분산 (숫자, 텍스트, 논리값 포함) 을 구함


VARPA
모집단의 분산 (숫자, 텍스트, 논리값 포함) 을 계산


WEIBULL.DIST
와이블 분포값을 반환


Z.TEST
Z 검정의 단측 검정 확률값을 반환


Text


함수
설명



ASC
문자열에서 영문 전자 (더블바이트) 나 가타가나 전자를 반자 (싱글바이트) 로 바꿈


BAHTTEXT
ß (바트) 통화 형식을 사용하여 숫자를 텍스트로 변환


CHAR
코드 번호에 해당하는 문자를 반환


CLEAN
인쇄할 수 없는 모든 문자들을 텍스트에서 제거


CODE
텍스트 문자열의 첫째 문자를 나타내는 코드값을 반환


CONCATENATE
여러 텍스트 항목을 한 텍스트 항목으로 조인


WON
₩ (원) 통화 형식을 사용하여 숫자를 텍스트로 변환


EXACT
두 텍스트 값이 동일한지 검사


FIND, FINDB
텍스트 값에서 다른 텍스트 값을 찾음 (대 &#x2F; 소문자 구분)


FIXED
숫자 표시 형식을 고정 소수점을 사용하는 텍스트로 지정


JIS
문자열에서 영문 반자(싱글바이트)나 가타가나 반자를 전자 (더블바이트) 로 바꿈


LEFT, LEFTB
텍스트 값에서 맨 왼쪽의 문자를 반환


LEN, LENB
텍스트 문자열의 문자 수를 반환


LOWER
텍스트를 소문자로 변환


MID, MIDB
지정된 위치에서 시작하여 특정 개수의 문자를 텍스트 문자열에서 반환


PHONETIC
텍스트 문자열에서 윗주 문자를 추출


PROPER
텍스트 값에 있는 각 단어의 첫째 문자를 대문자로 바꿈


REPLACE, REPLACEB
텍스트 내의 문자를 바꿈


REPT
텍스트를 지정된 횟수만큼 반복


RIGHT, RIGHTB
텍스트 값에서 맨 오른쪽의 문자를 반환


SEARCH, SEARCHB
지정한 텍스트 값을 다른 텍스트 값 내에서 찾음 (대 &#x2F; 소문자 구분 안 함)


SUBSTITUTE
텍스트 문자열에서 기존 텍스트를 새 텍스트로 바꿈


T
인수를 텍스트로 변환


TEXT
숫자 표시 형식을 지정하고 텍스트로 변환


TRIM
텍스트에서 공백을 제거


UPPER
텍스트를 대문자로 변환


VALUE
텍스트 인수를 숫자로 변환


Custom


함수
설명



CALL
DLL (동적 연결 라이브러리) 또는 코드 리소스의 프로시저를 호출


EUROCONVERT
숫자를 유로화로, 유로화에서 유로 회원국 통화로 또는 유로화를 매개 통화로 사용하여 숫자를 현재 유로 회원국 통화에서 다른 유로 회원국 통화로 변환 (3 각 변환)


REGISTER.ID
지정한 DLL (동적 연결 라이브러리) 또는 코드 리소스의 레지스터 ID 를 반환


SQL.REQUEST
외부 데이터 원본과 연결하여 워크시트에서 쿼리를 실행한 다음 매크로 프로그래밍을 사용하지 않고 결과를 배열로 표시


]]></content>
      <categories>
        <category>etc</category>
        <category>excel</category>
      </categories>
  </entry>
  <entry>
    <title>Interview</title>
    <url>/etc/interview/</url>
    <content><![CDATA[
  
  
    
      
      
        Enter password.
      
    
  

]]></content>
      <categories>
        <category>etc</category>
      </categories>
  </entry>
  <entry>
    <title>HTML tag attributes</title>
    <url>/html/attributes/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes


Globalhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes
accesskeyhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-accesskey
autocapitalizehttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-autocapitalize
autofocushttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-autofocus
classhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-class
contenteditablehttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-contenteditable
datahttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-data-*
dirhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-dir
draggablehttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-draggable
enterkeyhinthttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-enterkeyhint
exportpartshttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-exportparts
hiddenhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-hidden
idhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-id
inputmodehttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-inputmode
ishttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-is
langhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-lang
noncehttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-nonce
parthttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-part
slothttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-slot
spellcheckhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-spellcheck
stylehttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-style
tabindexhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-tabindex
titlehttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-title
translatehttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-translate
Commonloadinghttps://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading








lazy
로딩 지연


eager
즉시 로드


auto
브라우저가 결정 (기본값)


&lt;img src=&quot;image.jpg&quot; loading=&quot;lazy&quot;&gt;&lt;!-- &lt;iframe src=&quot;page.html&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt; --&gt;

Fallbackif (&#x27;loading&#x27; in HTMLImageElement.prototype) &#123; // Chrome 76 이상  document.querySelectorAll(&#x27;img[loading=lazy]&#x27;).forEach((img) =&gt; &#123;    img.src = img.dataset.src;  &#125;);&#125; else &#123; // IE 모두  const script = document.createElement(&#x27;script&#x27;);  script.async = true;  script.src = &#x27;https://cdnjs.cloudflare.com/ajax/libs/lazysizes/4.1.8/lazysizes.min.js&#x27;;  document.body.appendChild(script);&#125;


화면에 보이지 않으면 리소스를 다운로드 하지 않는다.img, iframe 태그에 사용 가능하다.

IE 지원 안함
fetchpriorityhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/fetchPriority








low
상대적 우선 순위를 낮춤


heigh
상대적 우선 순위를 높임


auto
브라우저가 결정 (기본값)


&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot; fetchpriority=&quot;high&quot; /&gt;&lt;img src=&quot;image.jpg&quot; fetchpriority=&quot;low&quot; /&gt;&lt;iframe src=&quot;page.html&quot; fetchpriority=&quot;low&quot;&gt;&lt;/iframe&gt;


리소스의 상대적 우선 순위를 지정할 수 있다.link, img, picture, script, iframe 요소에 적용할 수 있다.

IE 지원 안함
Microdata&lt;body itemscope itemtype=&quot;//schema.org/WebPage&quot;&gt;  &lt;h1 itemprop=&quot;name&quot;&gt;Site name&lt;/h1&gt;  &lt;p itemprop=&quot;description&quot;&gt;Description&lt;/p&gt;  &lt;ul&gt;    &lt;li itemscope itemprop=&quot;mainEntity&quot; itemtype=&quot;//schema.org/CollegeOrUniversity&quot;&gt;      &lt;h2 itemprop=&quot;name&quot;&gt;Title&lt;/h2&gt;      &lt;p itemprop=&quot;description&quot;&gt;Information&lt;/p&gt;    &lt;/li&gt;  &lt;/ul&gt;  &lt;footer&gt;    &lt;p itemprop=&quot;license&quot;&gt;License&lt;/p&gt;    &lt;p itemprop=&quot;publisher&quot;&gt;Publisher&lt;/p&gt;  &lt;/footer&gt;&lt;/body&gt;

[itemtype$=&#x27;WebPage&#x27;] &#123;  [itemprop=&quot;name&quot;] &#123;&#125;  [itemprop=&quot;description&quot;] &#123;&#125;  [itemprop=&quot;mainEntity&quot;] &#123;&#125;  [itemprop=&quot;license&quot;] &#123;&#125;  [itemprop=&quot;publisher&quot;] &#123;&#125;&#125;[itemtype$=&#x27;CollegeOrUniversity&#x27;] &#123;  [itemprop=&quot;name&quot;] &#123;&#125;  [itemprop=&quot;description&quot;] &#123;&#125;&#125;

itemidhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid
&lt;dl itemscope itemtype=&quot;http://vocab.example.net/book&quot; itemid=&quot;urn:isbn:0-330-34032-8&quot;&gt;  &lt;dt&gt;Title&lt;/dt&gt;  &lt;dd itemprop=&quot;title&quot;&gt;The Reality Dysfunction&lt;/dd&gt;  &lt;dt&gt;Author&lt;/dt&gt;  &lt;dd itemprop=&quot;author&quot;&gt;Peter F. Hamilton&lt;/dd&gt;  &lt;dt&gt;Publication date&lt;/dt&gt;  &lt;dd&gt;&lt;time itemprop=&quot;pubdate&quot; datetime=&quot;1996-01-26&quot;&gt;26 January 1996&lt;/time&gt;&lt;/dd&gt;&lt;/dl&gt;


속성명이 동일할 경우 구분을 위해서 itemid 를 부여할 수 있다.

itemprophttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop








meta
content 속성값


audio, embed, iframe, img, source, video
src 속성값


a, area, link
href 속성값


object
data 속성값


time
datetime 속성값


&lt;div itemscope&gt; &lt;img itemprop=&quot;image&quot; src=&quot;image.png&quot; content=&quot;The Company&quot; alt=&quot;Our Company&quot;&gt;&lt;/div&gt;


목록에 포함되는 속성을 정의할 수 있으며 대부분의 태그는 텍스트노드의 값과 매칭이 된다.특정 태그는 텍스트노드의 값이 아닌 다른 속성값과 매칭이 된다.content 의 값이 정의되어 있으면 itemprop 속성의 값을 특정 속성과 자동 매칭하지 않고 content 의 값으로 연결한다.

itemrefhttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref
&lt;div id=&quot;test&quot; /&gt;&lt;div itemscope itemref=&quot;test&quot; /&gt;


itemref 에 id 를 지정하면 itemscope 자식으로 인식하게 된다.

itemscopehttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope
&lt;div itemscope /&gt;


마이크로데이터에 정의한 속성은 일정의 범위안에서 적용되는데, 이 범위를 스코프 (scope) 라 한다.DOM 의 부모 자식 관계와 유사하며 모든 마이크로데이터 속성은 이 목록 내에 포함된다.

itemtypehttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype








웹페이지
https://schema.org/WebPage


브래드크럼 리스트
https://schema.org/BreadcrumbList


조직 정보
https://schema.org/Orgaization


인물 정보
https://schema.org/Person


제품 정보
https://schema.org/Product


리뷰 정보
https://schema.org/Review


주문 정보
https://schema.org/Offer


이벤트 정보
https://schema.org/Event


&lt;div itemtype=&quot;http://data-vocabulary.org/Person&quot; /&gt;


표준에 의해 사전에 정의되어 있는 것을 가져다 쓰거나 직접 원하는 방식으로, 마이크로데이터 목록을 정의할 수 있으며 자신의 웹 페이지에 사용자 지정 속성으로 삽입할 수 있다.특정 형식을 기준으로 정의된 아이템은 그 형식을 해석할 수 있는 모든 프로그램에 의해 처리가 가능하므로 범용성이 매우 높다.
마이크로데이터 목록을 정의하기 위해서는 네임스페이스가 (namespace) 가 필요한데 URL 을 사용하면 된다.강제는 아니지만 네임스페이스 URL 은 실제 동작하는 웹 페이지를 가리키는 것이 좋다.구글 검색엔진이 해석하고 크를링하는데 도움이 되므로 itemtype 을 지정 하는 것이 좋다.서버사이드 렌더링에 JSON-LD 형식으로 보내주면 검색이 가능하다.

]]></content>
      <categories>
        <category>html</category>
        <category>attributes</category>
      </categories>
      <tags>
        <tag>html tags</tag>
      </tags>
  </entry>
  <entry>
    <title>Korean Web Content Accessibility Guidelines v2.1</title>
    <url>/html/kwcag/</url>
    <content><![CDATA[
  http://www.kwacc.or.kr/Accessibility/Certification


Perceivable
원칙 1. 인식의 용이성 (총 46점)
모든 콘텐츠는 사용자가 인식할 수 있어야 한다.
인식의 용이성은 사용자가 장애 유무 등에 관계없이 웹 사이트에서 제공하는 모든 콘텐츠를 동등하게 인식할 수 있도록 제공하는 것을 의미한다.인식의 용이성은 대체 텍스트, 멀티미디어 대체 콘텐츠, 명료성의 3 가지 지침으로 구성되어 있다.

Alternative Text텍스트 아닌 콘텐츠에는 대체 텍스트를 제공해야 한다.

적절한 대체 텍스트 제공 (15점): 텍스트 아닌 콘텐츠는 그 의미나 용도를 인식할 수있도록 대체 텍스트를 제공해야 한다.

Multimedia동영상, 음성 등 멀티미디어 콘텐츠를 이해할 수 있도록 대체 수단을 제공해야 한다.

자막 제공 (8점): 멀티미디어 콘텐츠에는 자막, 대본 또는 수화를 제공해야 한다.

Clarity콘텐츠는 명확하게 전달되어야 한다.

색에 무관한 콘텐츠 인식 (5점): 콘텐츠는 색에 관계없이 인식될 수 있어야 한다.
명확한 지시사항 제공 (5점): 지시사항은 모양, 크기, 위치, 방향, 색, 소리 등에 관계없이 인식될 수 있어야 한다.
텍스트 콘텐츠의 명도 대비: 텍스트 콘텐츠와 배경 간의 명도 대비는 4.5 대 1 이상이어야 한다.
자동 재생 금지 (2점): 자동으로 소리가 재생되지 않아야 한다.
콘텐츠 간의 구분: 이웃한 콘텐츠는 구별될 수 있어야 한다.

Operable
원칙 2. 운용의 용이성 (총 38점)
사용자 인터페이스 구성요소는 조작 가능하고 내비게이션할 수 있어야 한다.
운용의 용이성은 사용자가 장애 유무 등에 관계없이 웹 사이트에서 제공하는 모든 기능들을 운용할 수 있도록 제공하는 것을 의미한다.운용의 용이성은 키보드 접근성, 충분한 시간 제공, 광과민성 발작 예방, 쉬운 내비게이션의 4 가지 지침으로 구성되어 있다.

Input Devices Access콘텐츠는 다양한 입력장치로 접근할 수 있어야 한다.

키보드 사용 보장: 모든 기능은 키보드만으로도 사용할 수 있어야 한다.
초점 이동 (15점): 키보드에 의한 초점은 논리적으로 이동해야 하며, 시각적으로 구별할수 있어야 한다.
조작 가능 (5점): 사용자 입력 및 컨트롤은 조작 가능하도록 제공되어야 한다.

Enough Time콘텐츠를 읽고 사용하는 데 충분한 시간을 제공해야 한다.

응답 시간 조절 (5점): 시간 제한이 있는 콘텐츠는 응답시간을 조절할 수 있어야 한다.
정지 기능 제공 (5점): 자동으로 변경되는 콘텐츠는 움직임을 제어할 수 있어야 한다.

Seizures광과민성 발작을 일으킬 수 있는 콘텐츠를 제공하지 않아야 한다.

깜박임과 번쩍임 사용 제한 (2점): 초당 3 ~ 50 회 주기로 깜박이거나 번쩍이는 콘텐츠를 제공하지 않아야 한다.

Easy Navigation콘텐츠는 쉽게 내비게이션할 수 있어야 한다.

반복 영역 건너뛰기: 콘텐츠의 반복되는 영역은 건너뛸 수 있어야 한다.
제목 제공: 페이지, 프레임, 콘텐츠 블록에는 적절한 제목을 제공해야 한다.
적절한 링크 텍스트: 링크 텍스트는 용도나 목적을 이해할 수 있도록 제공해야 한다.

Understandable
원칙 3. 이해의 용이성 (총 14점)
콘텐츠는 이해할 수 있어야 한다.
이해의 용이성은 사용자가 장애 유무 등에 관계없이 웹 사이트에서 제공하는 콘텐츠를 이해할 수 있도록 제공하는 것을 의미한다.이해의 용이성은 가독성, 예측 가능성, 콘텐츠의 논리성, 입력 도움의 4 가지 지침으로 구성되어 있다.

Readable콘텐츠는 읽고 이해하기 쉬워야 한다.

기본 언어 표시: 주로 사용하는 언어를 명시해야 한다.

Predictable콘텐츠의 기능과 실행결과는 예측 가능해야 한다.

사용자 요구에 따른 실행: 사용자가 의도하지 않은 기능 (새 창, 초점에 의한 맥락 변화 등) 은 실행되지 않아야 한다.

Logical Order콘텐츠는 논리적으로 구성해야 한다.

콘텐츠의 선형 구조: 콘텐츠는 논리적인 순서로 제공해야 한다.
표의 구성: 표는 이해하기 쉽게 구성해야 한다.

Input Assistance입력 오류를 방지하거나 정정할 수 있어야 한다.

레이블 제공: 사용자 입력에는 대응하는 레이블을 제공해야 한다.
오류 정정: 입력 오류를 정정할 수 있는 방법을 제공해야 한다.

Robust
원칙 4. 견고성 (총 2점)
웹 콘텐츠는 미래의 기술로도 접근할 수 있도록 견고하게 만들어야 한다.
견고성은 사용자가 콘텐츠를 이용할 수 있도록 기술에 영향을 받지 않아야 함을 의미한다.견고성은 문법 준수, 웹 애플리케이션 접근성의 2 가지 지침으로 구성되어 있다.

Markup웹 콘텐츠는 마크업 언어의 문법을 준수해야 한다.

마크업 오류 방지: 마크업 언어의 요소는 열고 닫음, 중첩 관계 및 속성 선언에 오류가 없어야 한다.

Web Application Accessibility웹 애플리케이션은 접근성이 있어야 한다.

웹 애플리케이션 접근성 준수: 콘텐츠에 포함된 웹 애플리케이션은 접근성이 있어야 한다.

]]></content>
      <categories>
        <category>html</category>
        <category>kwcag</category>
      </categories>
      <tags>
        <tag>accessibility</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML head tags</title>
    <url>/html/head/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head


metahttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta
charsethttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-charset
&lt;meta charset=&quot;utf-8&quot;&gt;


문서의 처음 1024 byte 내에 위치해야 한다.

namehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name








name
메타정보의 이름 (최대 155 자)


content
특성의 값


&lt;meta name=&quot;application-name&quot; content=&quot;애플리케이션의 이름&quot;&gt;&lt;meta name=&quot;author&quot; content=&quot;제작자&quot;&gt;&lt;meta name=&quot;description&quot; content=&quot;요약설명&quot;&gt;&lt;meta name=&quot;generator&quot; content=&quot;제작도구&quot;&gt;&lt;meta name=&quot;keywords&quot; lang=&quot;ko&quot; content=&quot;최대, 20개&quot;&gt;

referrerhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy








no-referrer
Do not send a HTTP Referer header.


origin
Send the origin of the document.


no-referrer-when-downgrade
Send the full URL when the destination is at least as secure as the current page (HTTP(S) - HTTPS), but send no referrer when it’s less secure (HTTPS - HTTP). This is the default behavior.


origin-when-cross-origin
Send the full URL (stripped of parameters) for same-origin requests, but only send the origin for other cases.


same-origin
Send the full URL (stripped of parameters) for same-origin requests. Cross-origin requests will contain no referrer header.


strict-origin
Send the origin when the destination is at least as secure as the current page (HTTP(S) - HTTPS), but send no referrer when it’s less secure (HTTPS - HTTP).


strict-origin-when-cross-origin
Send the full URL (stripped of parameters) for same-origin requests. Send the origin when the destination is at least as secure as the current page (HTTP(S) - HTTPS). Otherwise, send no referrer.


unsafe-URL
Send the full URL (stripped of parameters) for same-origin or cross-origin requests.


&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

theme-colorhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name/theme-color
&lt;meta name=&quot;theme-color&quot; media=&quot;(prefers-color-scheme: dark)&quot; content=&quot;#000000&quot;&gt;

color-schemehttps://developer.mozilla.org/en-US/docs/Web/CSS/color-schemehttps://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme
&lt;meta name=&quot;color-scheme&quot; content=&quot;light dark&quot;&gt;

viewporthttps://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag








width
플랫폼 가로 크기에 맞춤


height
플랫폼 세로 크기에 맞춤


user-scalable
사용자의 확대보기 허용 여부 (yes)


initial-scale
페이지 로딩 시 확대 비율 (1)


maximum-scale
최대 확대 비율 (0.25)


minimum-scale
최소 축소 비율 (1.6)


viewport-fit
contain, cover (auto)


target-desitydpi
페이지가 개발된 화면 크기 (low-dpi: 120dpi, medium-dpi: 160dpi, high-dpi: 240dpi)


&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;

robotshttps://developers.google.com/search/docs/advanced/crawling/special-tagshttps://developers.google.com/search/docs/advanced/robots/robots_meta_tag









index
페이지 인덱싱 허용
All


noindex
페이지 인덱싱 금지
All


follow
링크를 따라갈 수 있음
All


nofollow
링크를 따라갈 수 없음
All


all
index and follow
Google


none
noindex and nofollow
Google


noarchive
검색 결과에 컨텐츠를 캐시하지 않음
Google


nosnippet
검색 결과에 설명을 표시 안함
Google


noimageindex
검색결과에 이미지를 캐시하지 않음
Google


&lt;meta name=&quot;robots&quot; content=&quot;index&quot;&gt;

contenthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-content
Open graph protocolhttps://ogp.me
Facebook sharehttps://developers.facebook.com/docs/plugins
&lt;meta property=&quot;og:url&quot; content=&quot;https://www.your-domain.com/your-page.html&quot;&gt;&lt;meta property=&quot;og:type&quot; content=&quot;website&quot;&gt;&lt;meta property=&quot;og:title&quot; content=&quot;Your Website Title&quot;&gt;&lt;meta property=&quot;og:description&quot; content=&quot;Your description&quot;&gt;&lt;meta property=&quot;og:image&quot; content=&quot;https://www.your-domain.com/path/image.jpg&quot;&gt;


글을 작성 했는지 여부를 반환하는 리턴값이 존재한다.제목은 파라미터로 보낸값으로 지정되는 것이 아닌 해당 URL 에서 자동으로 지정되는 방식이다.캐시를 사용하지 않으려면 &amp;time=$&#123;cache.getTime()&#125; 파라미터를 추가한다.

Twitter sharehttps://developer.twitter.com/en/docs/twitter-for-websites
&lt;meta property=&quot;twitter:card&quot; content=&quot;요약&quot;&gt;&lt;meta property=&quot;twitter:url&quot; content=&quot;주소&quot;&gt;&lt;meta property=&quot;twitter:title&quot; content=&quot;제목&quot;&gt;&lt;meta property=&quot;twitter:image&quot; content=&quot;이미지&quot;&gt;&lt;meta property=&quot;twitter:description&quot; content=&quot;설명&quot;&gt;


글을 작성 했는지 여부를 반환하는 리턴값이 존재한다.

http-equivhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#attr-http-equiv
&lt;!-- 그림위에 마우스 오버시 이미지 관련 툴바 숨김 --&gt;&lt;meta http-equiv=&quot;imagetoolbar&quot; content=&quot;no&quot;&gt;&lt;!-- 60초 마다 새로고침 --&gt;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;60&quot;&gt;&lt;!-- 주소로 5초후 이동 --&gt;&lt;meta http-equiv=&quot;refresh&quot; ccontent=&quot;5;url=주소&quot;&gt;&lt;!-- 캐시 사용 제한 --&gt;&lt;meta http-equiv=&quot;cash-control&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;&lt;!-- 캐시 만료 (뒤로가기버튼시 문서를 볼수 없도록 파기) --&gt;&lt;meta http-equiv=&quot;expires&quot; content=&quot;Mon, 08 Sep 2003 10:10:10 GMT&quot;&gt;&lt;!-- 최종 수정일 --&gt;&lt;meta http-equiv=&quot;last-modified&quot; content=&quot;Mon,20 Jul 2008 19:30:30&quot;&gt;&lt;!-- 최신 IE 엔진으로 렌더링 --&gt;&lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;IE=edge&quot;&gt;&lt;!-- 페이지 열때 효과 --&gt;&lt;meta http-equiv=&quot;page-enter&quot; content=&quot;revealtrans(duration=3,transition=0)&quot;&gt;&lt;!-- 페이지 닫을때 효과 --&gt;&lt;meta http-equiv=&quot;page-exit&quot; content=&quot;revealtrans(duration=3,transition=0)&quot;&gt;

transition







transition=0
BOX IN


transition=1
BOX OUT


transition=2
CIRCLE IN


transition=3
CIRCLE OUT


transition=4
WIPE UP


transition=5
WIPE DOWN


transition=6
WIPE RIGHT


transition=7
WIPE LEFT


transition=8
VERTICAL BLINDS


transition=9
HORIZONTAL BLINDS


transition=10
CHECKERBOARD ACROSS


transition=11
CHECKERBOARD DOWN


transition=12
RANDOM DISSOLVE


transition=13
SPLIT VERTICAL IN


transition=14
SPLIT VERTICAL OUT


transition=15
SPLIT HORIZONTAL IN


transition=16
SPLIT HORIZONTAL OUT


transition=17
STRIPS LEFT DOWN


transition=18
STRIPS LEFT UP


transition=19
STRIPS RIGHT DOWN


transition=20
STRIPS RIGHT UP


transition=21
RANDOM BARS HORIZONTAL


transition=22
RANDOM BARS VERTICAL


transition=23
RANDOM


titlehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/title

검색 엔진은 일반적으로 제목의 55-60 자 정도를 표시한다.

basehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
&lt;base target=&quot;_blank&quot; href=&quot;https://example.com/&quot;&gt;


상대 URL 을 지정한다. 기본값은 location.href 이다.문서에는 하나의 요소 만 있을 수 있다. 가장 처음 요소만 적용되고 나머지는 무시된다.

linkhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link
ashttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-as








audio
소리 및 음악 파일


video
비디오


Track
비디오 또는 오디오 WebVTT 트랙


script
자바스크립트 파일


style
CSS 스타일 시트


font
웹 글꼴


image
이미지


fetch
XHR 및 Fetch API 요청


worker
웹 워커


embed
멀티미디어 embed 요청


object
멀티미디어 object 요청


document
웹 페이지



rel=&quot;preload&quot; 일 경우에 사용한다.

crossoriginhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-crossorigin








anonymous
교차 출처 요청 (자격 증명 전송되지 않음)


use-credentials
교차 출처 요청 (자격 증명 전송 됨)



리소스를 가져올 때 CORS 를 허용한다.값을 지정하지 않으면 anonymous 로 동작한다.

disabledhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-disabled
fetchpriorityhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-fetchpriority
hrefhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-href
hreflanghttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-hreflang
imagesizeshttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-imagesizes
imagesrcsethttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-imagesrcset
integrityhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-integrity
mediahttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-media
prefetchhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-prefetch
referrerpolicyhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-referrerpolicy
relhttps://developer.mozilla.org/en-US/docs/Web/HTML/Link_types
stylesheet&lt;!-- blocking --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;&lt;!-- not blocking --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;print.css&quot; media=&quot;print&quot;&gt;&lt;!-- not blocking on large screens --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;mobile.css&quot; media=&quot;screen and (max-width: 480px)&quot;&gt;

icon&lt;link rel=&quot;icon&quot; href=&quot;favicon.svg&quot;&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;apple-icon-114.png&quot; type=&quot;image/png&quot;&gt;

manifesthttps://developer.mozilla.org/en-US/docs/Web/Manifest
&lt;link rel=&quot;manifest&quot; href=&quot;manifest.json&quot;&gt;

dns-prefetchhttps://developer.mozilla.org/en-US/docs/Web/Performance/dns-prefetch
&lt;link rel=&quot;dns-prefetch&quot; as=&quot;font&quot; href=&quot;https://fonts.googleapis.com/&quot;&gt;


브라우저에 URL 에 대한 DNS 를 확인하도록 알려줌으로써 리소스를 더 빨리 가져오도록 한다.link 요소에 적용할 수 있다.

IE 10 이상
prefetch&lt;link rel=&quot;prefetch&quot; as=&quot;image&quot; href=&quot;/image.jpg&quot;&gt;


dns-prefetch 는 도메인 이름만 분석하지만, prefetch 는 지정된 리소스를 다운로드한다.link 요소에 적용할 수 있다.

IE 11 이상
preconnect&lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.googleapis.com/&quot; crossorigin&gt;


dns-prefetch 와 유사하지만 dns lookup, tcp handshake, TLS 협상도 수행한다.link 요소에 적용할 수 있다.

IE 지원 안함
prerenderhttps://w3c.github.io/resource-hints/#prerender
&lt;link rel=&quot;prerender&quot; href=&quot;//example.com/renderpage.html&quot;&gt;


웹 페이지를 미리 렌더링한다.크롬에서 prerender 기능을 활성화 하려면 -prerender=enabled 옵션을 적용한다.크롬은 prerender 가 성능이 좋지 못하다고 판단하여 NoState Prefetch 를 사용한다.link 요소에 적용할 수 있다.

IE 11 이상
preloadhttps://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preloadhttps://www.debugbear.com/resource-hint-validator
&lt;link rel=&quot;preload&quot; as=&quot;image&quot;   href=&quot;poster.jpg&quot;   imagesrcset=&quot;    poster_400px.jpg 400w,    poster_1600px.jpg 1600w&quot;  imagesizes=&quot;50vw&quot;&gt;&lt;link rel=&quot;preload&quot; as=&quot;font&quot; href=&quot;https://example.com/font.woff&quot; crossorigin&gt;&lt;link rel=&quot;preload&quot; as=&quot;fetch&quot; href=&quot;movies.json&quot;&gt;

const preloadLink = document.createElement(&#x27;link&#x27;);preloadLink.rel = &#x27;preload&#x27;;preloadLink.as = &#x27;document&#x27;;preloadLink.href = &#x27;/news.html&#x27;;document.head.appendChild(preloadLink);


우선 순위를 높여서 리소스를 다운로드한다.마우스 오버시 이미지 교체와 같은 경우 미리 다운로드 해놓는 용도로 사용하면 좋다.img, script, link 요소에 적용할 수 있다.

IE 지원 안함
sizeshttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-sizes

rel=&quot;apple-touch-icon&quot; 일 경우 아이콘 사이즈를 지정할 수 있다.

titlehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-title
typehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-type

MIME 타입을 지정한다.type=&quot;text/css&quot; 는 기본값으로 생략하는 것을 권장한다.

stylehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/style
mediahttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/style#attr-media
noncehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/style#attr-nonce
titlehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/style#attr-title
scripthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script




로드 우선 순위 (네트워크 &#x2F; 깜박임)
실행 우선 순위



&lt;head&gt; 태그안의 &lt;script&gt;
Medium &#x2F; High
VeryHigh - Blocks parser


&lt;link rel=preload&gt; + &lt;script async&gt; hack or &lt;script type=module async&gt;
Medium &#x2F; High
High - Interrupts parser


&lt;script async&gt;
Lowest &#x2F; Low
High - Interrupts parser


&lt;script defer&gt;
Lowest &#x2F; Low
VeryLow


&lt;body&gt; 끝에 &lt;script&gt;
Medium &#x2F; High
Low - Waits parser end


&lt;body&gt; 끝에 &lt;script defer&gt;
Lowest &#x2F; Low - end of the queue
VeryLow


&lt;link rel=prefetch&gt; + &lt;script&gt; in a next-page navigation
Idle &#x2F; Lowest
스크립트가 언제 어떻게 사용 되는가에 따라 다름



웹브라우저가 외부 자바스크립트를 불러오는 일반 script 태그를 만나게 되면, 우선 해당 스크립트를 내려받아 해석하고 실행할 때까지 웹 문서의 HTML 코드 파싱작업을 잠시 뒤로 미룬다.

asynchttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async
&lt;script async src=&quot;script.js&quot;&gt;&lt;/script&gt;


HTML 파싱을 하면서 동시에 스크립트를 다운로드한다.스크립트 다운로드가 완료 (window 의 load 이벤트 전) 되면 즉시 실행한다.스크립트를 실행하는 동안 HTML 파싱이 중단된다.defer 속성과 동시에 적용 시 async 로 동작한다.

deferhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer
&lt;script defer src=&quot;script.js&quot;&gt;&lt;/script&gt;


HTML 파싱을 하면서 동시에 스크립트를 다운로드한다.스크립트 다운로드가 완료되어도 실행하지 않고, HTML 파싱이 끝난 후 (DOMContentLoaded 이벤트 전) 실행한다.document ready 상태가 되고 실행되므로 body 하단에 작성한 스크립트와 비슷한 효과를 얻을 수 있다.

crossoriginhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-crossorigin
fetchpriorityhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-fetchpriority
integrityhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-integrity
nomodulehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-nomodule
noncehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-nonce
referrerpolicyhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-referrerpolicy
srchttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-src
typehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-type

MIME 타입을 지정한다.type=&quot;text/javascript&quot; 는 기본값으로 생략하는 것을 권장한다.type=&quot;module&quot; 일 경우 자바스크립트 모듈로 처리된다. 이 때는 defer 속성이 적용되지 않는다.

noscripthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript
]]></content>
      <categories>
        <category>html</category>
        <category>head</category>
      </categories>
      <tags>
        <tag>html tags</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML body tags</title>
    <url>/html/body/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body


Basicheadinghttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements

h1 태그는 문서에서 1 개 만 사용하는 것을 권장한다.

phttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/p
brhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/br
hrhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr
Formattingabbrhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr
&lt;p&gt;&lt;dfn id=&quot;spec&quot;&gt;Specification&lt;/dfn&gt; (&lt;abbr title=&quot;Specification&quot;&gt;spec&lt;/abbr&gt;) is a ...&lt;/p&gt;

addresshttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/address
bhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/b
bdihttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi
&lt;ul&gt;  &lt;li&gt;User &lt;bdi&gt;إيان&lt;/bdi&gt;: 90 points&lt;/li&gt;  &lt;li&gt;User إيان: 90 points&lt;/li&gt;&lt;/ul&gt;


아랍어와 같은 텍스트를 표시 할 때 방향을 지정 할 수 있다.

IE 지원 안함
bdohttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo
blockquotehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote
&lt;blockquote cite=&quot;https://datatracker.ietf.org/doc/html/rfc1149&quot;&gt;  Avian carriers can provide high delay, low throughput, and low altitude service.&lt;/blockquote&gt;

citehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite
codehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/code
delhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/del
dfnhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn
emhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/em
ihttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/i
inshttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins
kbdhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd
&lt;p&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;Z&lt;/kbd&gt;&lt;/p&gt;

markhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark
&lt;p&gt;Description &lt;mark&gt;Highlighted&lt;/mark&gt;&lt;/p&gt;


하이라이트 표시한다.

meterhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter
&lt;meter value=&quot;90&quot; min=&quot;0&quot; max=&quot;100&quot; low=&quot;25&quot; high=&quot;75&quot; optimum=&quot;50&quot;&gt;Percent&lt;/meter&gt;


알려진 범위 또는 분수 값 내에서 스칼라 측정, 계기 (디스크 사용량, 쿼리 결과의 관련성 등) 에 사용한다.진행률 표시에는 &lt;progress&gt; 를 사용한다.

IE 지원 안함
prehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre
progresshttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress
&lt;progress  indeterminate  role=&quot;progressbar&quot;  aria-describedby=&quot;loading-zone&quot;  max=&quot;100&quot;  value=&quot;22&quot;/&gt;


작업 진행률에 사용한다.진행률이 반복될 경우 스크린 리더기에서 읽히지 않도록 tabindex=&quot;-1&quot; 속성을 적용한다.

IE 10 이상
qhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/q
rubyhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/rubyhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/rthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp
&lt;ruby xml:lang=&quot;zh-Hant&quot; style=&quot;ruby-position: under;&quot;&gt;  &lt;rbc&gt;    &lt;rb&gt;馬&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;mǎ&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;    &lt;rb&gt;來&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;lái&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;    &lt;rb&gt;西&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;xī&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;    &lt;rb&gt;亞&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;yà&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;  &lt;/rbc&gt;&lt;/ruby&gt;


루비 주석을 지정, 주 텍스트에 첨부 된 작은 추가 텍스트로 해당 문자의 발음이나 의미를 나타낸다.

shttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/s
samphttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp
smallhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/small
stronghttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong
subhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub
suphttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup
templatehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/templatehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot
&lt;table&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;td&gt;ID&lt;/td&gt;      &lt;td&gt;Name&lt;/td&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody id=&quot;target&quot;&gt;    &lt;!-- existing data could optionally be included here --&gt;  &lt;/tbody&gt;&lt;/table&gt;&lt;template id=&quot;template&quot;&gt;  &lt;tr&gt;    &lt;td&gt;&lt;/td&gt;    &lt;td&gt;&lt;/td&gt;  &lt;/tr&gt;&lt;/template&gt;

if (&#x27;content&#x27; in document.createElement(&#x27;template&#x27;)) &#123;  const $target = document.querySelector(&#x27;#target&#x27;);  const template = document.querySelector(&#x27;#template&#x27;);  for (let i = 0; i &lt; 3; i++) &#123;    const clone = template.content.cloneNode(true);    const td = clone.querySelectorAll(&#x27;td&#x27;);    td[0].textContent = i;    td[1].textContent = `ABC - $&#123;i&#125;`;    $target.appendChild(clone);  &#125;&#125;


template 태그는 렌더링 되지 않지만 자바스크립트로 접근할 수 있다.

timehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/time
&lt;time&gt;10:00&lt;/time&gt;&lt;time datetime=&quot;2000-02-14 20:00&quot;&gt;Valentines day&lt;/time&gt;


날짜와 시간을 컴퓨터가 읽을 수 있는 방식으로 인코딩하여 사용자 에이전트가 생일 달력이나 예정된 이벤트를 사용자의 캘린더에 추가 할 수 있게 해준다.검색 엔진이 더 정확한 검색 결과를 생성 할 수 있게 한다.

uhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/u
varhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/var
wbrhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr
&lt;p&gt;This is &lt;wbr&gt;longwordthatwillbreakatspecific&lt;wbr&gt;placeswhenthebrowserwindowisresized&lt;/p&gt;


텍스트에서 줄 바꿈을 추가 할 수 있는 위치를 지정할 수 있다.

IE 지원 안함
Forms and Inputformhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/formhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldsethttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend
&lt;form  name=&quot;&quot;  method=&quot;get&quot;  action=&quot;http://www.example.com&quot;  enctype=&quot;multipart/form-data&quot;  accept-charset=&quot;utf-8 iso-8859-1&quot;  target=&quot;_blank&quot;  autocomplete=&quot;off&quot;  novalidate  rel=&quot;search&quot;  &gt;  &lt;fieldset&gt;    &lt;legend&gt;제목&lt;/legend&gt;  &lt;/fieldset&gt;&lt;/form&gt;

labelhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/label
&lt;label for=&quot;form-element-id&quot;&gt;Label&lt;/label&gt;

inputhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input



Attributes
Types
Example value



type
all
button, checkbox, color, date, datetime-local, email, file, hidden, image, month, number, password, radio, range, reset, search, submit, tel, text, time, url, week


value
all
text


autocomplete
all
on, off, …


name
all
text


disabled
all
true, false


form
all
FormElement


readonly
almost all
true, false


required
almost all
true, false


list
almost all
Element


inputmode
string types
none, text, tel, url, email, numeric, decimal, search


dirname
text, search
text.dir


accept
file
.doc, image/png


capture
file
camera


multiple
email, file
true, false


checked
radio, checkbox
true, false


max
numeric types
10


min
numeric types
5


step
numeric types
1


size
email, password, tel, text, url
30


pattern
password, text, tel
[A-Za-z]+


maxlength
password, search, tel, text, url
10


minlength
password, search, tel, text, url
5


placeholder
password, search, tel, text, url
text


alt
image
text


src
image
URI


width
image
100


height
image
100


formaction
image, submit
URI


formenctype
image, submit
multipart/form-data


formmethod
image, submit
get, post


formnovalidate
image, submit
true, false


formtarget
image, submit
_blank


&lt;input id=&quot;label-for-id&quot;&gt;

textareahttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea
&lt;textarea name=&quot;&quot; clos=&quot;&quot; rows=&quot;&quot;&gt;&lt;/textarea&gt;

selecthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/selecthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgrouphttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/option
&lt;label for=&quot;item-choice&quot;&gt;Choose a item&lt;/label&gt;&lt;select id=&quot;item-choice&quot; size=&quot;노출되는 옵션수&quot; multiple&gt;  &lt;optgroup label=&quot;group-1&quot;&gt;    &lt;option&gt;item-11&lt;/option&gt;    &lt;option&gt;item-12&lt;/option&gt;  &lt;/optgroup&gt;  &lt;optgroup label=&quot;group-2&quot;&gt;    &lt;option&gt;item-21&lt;/option&gt;    &lt;option&gt;item-22&lt;/option&gt;  &lt;/optgroup&gt;&lt;/select&gt;

datalisthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist
&lt;input list=&quot;datalist-item&quot;&gt;&lt;datalist id=&quot;datalist-item&quot;&gt;  &lt;option value=&quot;item-1&quot;&gt;  &lt;option value=&quot;item-2&quot;&gt;&lt;/datalist&gt;


&lt;optgroup&gt; 은 동작 안 한다.

buttonhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/button
&lt;button type=&quot;button&quot;&gt;Button&lt;/button&gt;

outputhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/output
&lt;form oninput=&quot;result.value = parseInt(a.value) + parseInt(b.value)&quot;&gt;  &lt;input type=&quot;range&quot; id=&quot;b&quot; name=&quot;b&quot; value=&quot;50&quot; /&gt; +  &lt;input type=&quot;number&quot; id=&quot;a&quot; name=&quot;a&quot; value=&quot;10&quot; /&gt; =  &lt;output name=&quot;result&quot; for=&quot;a b&quot;&gt;60&lt;/output&gt;&lt;/form&gt;

Framesiframehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe
Imagesimghttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/img
&lt;img src=&quot;image.jpg&quot; alt=&quot;대체 텍스트&quot; onerror=&quot;this.src=&#x27;fallback.jpg&#x27;;&quot;&gt;

maphttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/maphttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/area
&lt;img src=&quot;image.jpg&quot; usemap=&quot;map-name&quot; alt=&quot;대체 텍스트&quot;&gt;&lt;map name=&quot;map-name&quot;&gt;  &lt;area shape=&quot;rect&quot; href=&quot;#&quot; target=&quot;_blank&quot; alt=&quot;개별 대체 텍스트&quot;    coords=&quot;좌상단 x 좌표, 좌상단 y 좌표, 우하단 x 좌표, 우하단 y 좌표&quot;  /&gt;  &lt;area shape=&quot;circle&quot; href=&quot;#&quot; target=&quot;_blank&quot; alt=&quot;개별 대체 텍스트&quot;    coords=&quot;중심축 x 좌표, 중심축 y 좌표, 반지름&quot;  /&gt;  &lt;area shape=&quot;poly&quot; href=&quot;#&quot; target=&quot;_blank&quot; alt=&quot;개별 대체 텍스트&quot;    coords=&quot;첫번째 x 좌표, 첫번째 y 좌표, 두번째 x 좌표, 두번째 y 좌표, 세번째 x 좌표, 세번째 y 좌표&quot;  /&gt;&lt;/map&gt;

canvashttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas
figurehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/figurehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption
&lt;figure&gt;  &lt;img src=&quot;image.jpg&quot;&gt;  &lt;figcaption&gt;Caption&lt;/figcaption&gt;&lt;/figure&gt;


일러스트레이션, 다이어그램, 사진, 코드 목록 등과 같은 자체 포함 된 콘텐츠를 지정한다.주 흐름과 관련이 있지만 위치는 주 흐름과 관계가 없으며 제거 된 경우 문서의 흐름에 영향을 미치지 않아야 한다.

picturehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture
svghttps://developer.mozilla.org/en-US/docs/Web/SVG
&lt;!-- SVG 1.1 이상에서 XML 헤더를 포함하는것이 좋음 --&gt;&lt;?xml version=&quot;1.1&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;&lt;!-- width 와 height 속성이 없으면 사이즈는 컨테이너 사이즈에 맞춰서 변경 됨 --&gt;&lt;!-- 수치는 정수로 지정하는 것이 좋음 --&gt;&lt;svg  role=&quot;img&quot;  aria-labelledby=&quot;title desc&quot;  xmlns=&quot;http://www.w3.org/2000/svg&quot;  xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;  baseProfile=&quot;full&quot;  x=&quot;0&quot;  y=&quot;0&quot;  width=&quot;800&quot;  height=&quot;600&quot;  viewBox=&quot;0 0 800 600&quot;  xml:space=&quot;preserve&quot;&gt;  &lt;!-- 접근성 --&gt;  &lt;title id=&quot;title&quot;&gt;제목&lt;/title&gt;  &lt;desc id=&quot;desc&quot;&gt;설명&lt;/desc&gt;  &lt;!-- 선 --&gt;  &lt;path id=&quot;lineAB&quot; d=&quot;M 100 350 l 150 -300&quot; stroke=&quot;red&quot; stroke-width=&quot;3&quot; fill=&quot;none&quot; /&gt;  &lt;path id=&quot;lineBC&quot; d=&quot;M 250 50 l 150 300&quot; stroke=&quot;red&quot; stroke-width=&quot;3&quot; fill=&quot;none&quot; /&gt;  &lt;path d=&quot;M 175 200 l 150 0&quot; stroke=&quot;green&quot; stroke-width=&quot;3&quot; fill=&quot;none&quot; /&gt;  &lt;path d=&quot;M 100 350 q 150 -300 300 0&quot; stroke=&quot;blue&quot; stroke-width=&quot;5&quot; fill=&quot;none&quot; /&gt;  &lt;g stroke=&quot;black&quot; stroke-width=&quot;3&quot; fill=&quot;black&quot;&gt;    &lt;circle id=&quot;pointA&quot; cx=&quot;100&quot; cy=&quot;350&quot; r=&quot;3&quot; /&gt;    &lt;circle id=&quot;pointB&quot; cx=&quot;250&quot; cy=&quot;50&quot; r=&quot;3&quot; /&gt;    &lt;circle id=&quot;pointC&quot; cx=&quot;400&quot; cy=&quot;350&quot; r=&quot;3&quot; /&gt;  &lt;/g&gt;  &lt;g font-size=&quot;30&quot; font=&quot;sans-serif&quot; fill=&quot;black&quot; stroke=&quot;none&quot; text-anchor=&quot;middle&quot;&gt;    &lt;text x=&quot;100&quot; y=&quot;350&quot; dx=&quot;-30&quot;&gt;A&lt;/text&gt;    &lt;text x=&quot;250&quot; y=&quot;50&quot; dy=&quot;-10&quot;&gt;B&lt;/text&gt;    &lt;text x=&quot;400&quot; y=&quot;350&quot; dx=&quot;30&quot;&gt;C&lt;/text&gt;  &lt;/g&gt;  &lt;path stroke=&quot;red&quot; stroke-width=&quot;6&quot; stroke-linecap=&quot;round&quot; stroke-dasharray=&quot;10, 10&quot; d=&quot;M5 20 l215 0&quot; /&gt;  &lt;!-- 도형 --&gt;  &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;200&quot; y2=&quot;200&quot; style=&quot;stroke: rgb(255,0,0); stroke-width: 2&quot; /&gt;  &lt;polyline points=&quot;20, 20 40, 25 60, 40 80, 120 120, 140 200, 180&quot; style=&quot;fill: none; stroke: black; stroke-width: 3&quot; /&gt;  &lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;40&quot; stroke=&quot;black&quot; stroke-width=&quot;3&quot; fill=&quot;red&quot; /&gt;  &lt;ellipse cx=&quot;200&quot; cy=&quot;80&quot; rx=&quot;100&quot; ry=&quot;50&quot; style=&quot;fill: yellow; stroke: purple; stroke-width: 2&quot; /&gt;  &lt;rect x=&quot;50&quot; y=&quot;20&quot; rx=&quot;20&quot; ry=&quot;20&quot; width=&quot;150&quot; height=&quot;150&quot; style=&quot;fill: red; stroke: black; stroke-width: 5; opacity: 0.5; fill-opacity: 0.1; stroke-opacity: 0.9&quot;&gt;    &lt;!-- Animation --&gt;    &lt;animate attributeType=&quot;XML&quot; attributeName=&quot;x&quot; from=&quot;-100&quot; to=&quot;120&quot; dur=&quot;10s&quot; rotate=&quot;auto&quot; begin=&quot;click&quot; repeatCount=&quot;indefinite&quot; fill=&quot;freeze&quot; /&gt;  &lt;/rect&gt;  &lt;polygon points=&quot;200, 10 250, 190 160, 210&quot; style=&quot;fill: lime; stroke: purple; stroke-width: 1&quot; /&gt;  &lt;polygon points=&quot;100, 10 40, 180 190, 60 10, 60 160, 180&quot; style=&quot;fill: lime; stroke: purple; stroke-width: 5; fill-rule: evenodd;&quot; /&gt;  &lt;!-- 문자 --&gt;  &lt;text x=&quot;0&quot; y=&quot;15&quot; fill=&quot;red&quot; transform=&quot;rotate(30 20, 40)&quot;&gt;SVG TEXT&lt;/text&gt;  &lt;a xlink:href=&quot;http://www.w3schools.com/svg/&quot; target=&quot;_blank&quot;&gt;    &lt;text x=&quot;0&quot; y=&quot;15&quot; fill=&quot;red&quot;&gt;SVG TEXT&lt;/text&gt;  &lt;/a&gt;  &lt;text x=&quot;10&quot; y=&quot;20&quot; style=&quot;fill: red;&quot;&gt;Several lines:    &lt;tspan x=&quot;10&quot; y=&quot;45&quot;&gt;First line.&lt;/tspan&gt;    &lt;tspan x=&quot;10&quot; y=&quot;70&quot;&gt;Second line.&lt;/tspan&gt;  &lt;/text&gt;&lt;/svg&gt;

Drawhttps://jwatt.org/svg/authoring

아트보드 크기가 소숫점일 경우 아이콘이 흐릿하게 되는 현상이 발생한다.
레티나 대응을 위해 2배 사이즈로 제작한다.
오브젝트가 아트보드를 넘으면 안된다. (Object &gt; Artboards &gt; Fit to Artwork Bounds)
패스보다는 도형을 이용해서 그리는 것이 사용 및 성능, 용량면에서 좋다.
선은 면 타입으로 변경한다. (Object &gt; Path &gt; Outline Stroke)
겹치는 path 는 path merge 를 통해서 path 개수를 줄인다.
그룹명은 ID 로 사용되므로 영문으로 작성, 의미없는 그룹은 지양한다.
마스크는 안드로이드 4에서 이슈가 많으므로 사용하지 않는다.
필터는 SVG 전용 필터를 사용한다. (Effect &gt; SVG Filters)

Export







Styling &gt; Internal CSS
&lt;style&gt; 태그 사용 (용량이 큼)


Styling &gt; Inline Style
style=&quot;&quot; 속성 사용 (용량이 큼)


Styling &gt; Presentation Attributes
용량이 작음 (권장)


Font &gt; Convert To Outlines
폰트를 면으로 변경 (사용자는 폰트가 없어도 표현이 되지만 용량이 큼)


Font &gt; SVG
&lt;text&gt; 태그 사용 (사용자는 폰트가 있어야 볼 수 있지만 용량이 작음)


Images &gt; Preserve/Embed
DataURI Base64 형태로 링크


Images &gt; Link
외부 이미지 형태로 링크


Object &gt; IDs &gt; Layer Names
레이어와 그룹이름을 사용해서 ID 를 설정


Object &gt; IDs &gt; Unique
랜덤한 ID 로 설정


Decimal
소숫점의 개수를 지정하는 옵션 (1 권장)


Minify
코드 압축 (비권장)


Responsive
width &#x2F; height 속성 사용 여부 (비권장)


Version
SVG 1.1 권장


Load
  
    svg
    svg symbol
    img
    object
    embed
    iframe
    CSS
    jQuery
    PHP
  
  
    
&lt;svg width=&quot;300&quot; height=&quot;100&quot;&gt;  &lt;line x1=&quot;0&quot; y1=&quot;0&quot; x2=&quot;300&quot; y2=&quot;100&quot;&gt;&lt;/svg&gt;


네트워크 요청이 없다.이미지 캐시가 안된다.        

&lt;svg width=&quot;0&quot; height=&quot;0&quot; class=&quot;visually-hidden&quot;&gt;  &lt;symbol id=&quot;icon1&quot; viewBox=&quot;0 0 100 100&quot;&gt;    &lt;title&gt;아이콘1&lt;/title&gt;    &lt;path d=&quot;...&quot;&gt;  &lt;/symbol&gt;  &lt;symbol id=&quot;icon2&quot; viewBox=&quot;0 0 100 100&quot;&gt;    &lt;title&gt;아이콘2&lt;/title&gt;    &lt;path d=&quot;...&quot;&gt;  &lt;/symbol&gt;&lt;/svg&gt;&lt;span&gt;  &lt;svg&gt;    &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#icon1&quot;&gt;&lt;/use&gt;  &lt;/svg&gt;&lt;/span&gt;&lt;span&gt;  &lt;svg&gt;    &lt;use xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; xlink:href=&quot;#icon2&quot;&gt;&lt;/use&gt;  &lt;/svg&gt;&lt;/span&gt;


하나의 심볼을 재활용 가능하다.이미지 캐시가 안된다.        

&lt;img src=&quot;image.svg&quot; onerror=&quot;this.onerror=null; this.src=&#x27;image.png&#x27;&quot;&gt;


네트워크 요청이 있다.        

&lt;object type=&quot;image/svg+xml&quot; data=&quot;image.svg&quot;&gt;&lt;/object&gt;

    
    
&lt;embed src=&quot;image.svg&quot; width=&quot;300&quot; height=&quot;200&quot; type=&quot;image/svg+xml&quot; pluginspage=&quot;http://www.adobe.com/svg/viewer/install/&quot;&gt;
    
    
&lt;iframe src=&quot;image.svg&quot;&gt;&lt;/iframe&gt;
    
    
img &#123;  background: url(image.png);  background-image: url(image.svg), none;&#125;
    
    
$(&#x27;img&#x27;).load(&#x27;image.svg&#x27;, (response) =&gt; &#123;  if (!response) &#123;    $(this).html(&#x27;Error loading SVG.&#x27;);  &#125;&#125;);
    
    
&lt;?php echo file_get_contents(&quot;image.svg&quot;); ?&gt;
    
  


Optimizationhttps://github.com/svg/svgo
svgo optionsplugins:# 줄 바꿈, 후행 및 반복 공간의 정리 속성- cleanupAttrs: true# &lt;style&gt; 요소에서 style 속성으로 스타일 이동 및 병합- inlineStyles: true# doctype 선언을 제거- removeDoctype: true# XML 처리 명령 제거- removeXMLProcInst: true# 주석 제거- removeComments: true# 메타데이터 제거- removeMetadata: true# 타이틀 제거- removeTitle: true# 설명 제거- removeDesc: true# id 없는 defs 요소 제거- removeUselessDefs: true# xmlns속성을 제거 (인라인 svg의 경우 기본적으로 비활성화 됨)- removeXMLNS: true# 편집기 네임 스페이스, 요소 및 속성 제거- removeEditorsNSData: true# 빈 속성 제거- removeEmptyAttrs: true# 숨겨진 요소 제거- removeHiddenElems: true# 빈 텍스트 요소 제거- removeEmptyText: true# 빈 컨테이너 요소 제거- removeEmptyContainers: true# 가능한 경우 viewBox 속성 제거# - removeViewBox: true# 가능한 경우 백그라운드 최적화- cleanupEnableBackground: true# 스타일 최소화- minifyStyles: true# 스타일을 속성으로 변환# - convertStyleToAttrs: true# rgb() 에서 #rrggbb, #rrggbb 에서 #rgb# - convertColors: true# 상대경로 또는 절대경로로 경로 데이터를 변환, 세그먼트를 다른 세그먼트로 변환, 쓸모없는 구분 기호를 제거# - convertPathData: true# 여러 변형을 하나로 축소하고, 행렬을 짧은 별칭으로 변환하는 등의 작업을 수행- convertTransform: true# 알 수없는 요소 내용 및 속성 제거# - removeUnknownsAndDefaults: false# 상속받지 않는 그룹의 &quot;프리젠테이션&quot; 속성 제거# - removeNonInheritableGroupAttrs: true# 사용하지 않는 stroke와 fill 속성 제거- removeUselessStrokeAndFill: true# 사용하지 않는 네임 스페이스 선언 제거- removeUnusedNS: true# 사용하지 않는 ID 제거, 사용된 ID 축소- cleanupIDs: true# 숫자 값을 고정 된 정밀도로 반올림, 기본 px 단위를 제거# - cleanupNumericValues: true# 숫자값을 반올림# - cleanupListOfValues: false# 요소의 속성을 둘러싸는 그룹으로 이동# - moveElemsAttrsToGroup: true# 일부 그룹 속성을 포함 된 요소로 이동# - moveGroupAttrsToElems: true# 불필요한 그룹 제거- collapseGroups: true# 래스터 이미지 제거# - removeRasterImages: true# 여러 경로를 하나로 병합- mergePaths: true# 몇 가지 기본 도형을 패스로 변경# - convertShapeToPath: true# 가독성을 위해 요소 속성 정렬- sortAttrs: true# 뷰박스가 있는 경우 너비 높이 속성 제거- removeDimensions: true# 패턴을 기준으로 속성 제거# - removeAttrs: &#123;attrs: &#x27;(stroke|fill)&#x27;&#125;# ID 또는 className으로 임의의 요소를 제거# - removeElementsByAttr: true# 외부 &lt;svg&gt;요소 에 클래스 이름을 추가# - addClassesToSVGElement: true# 외부 &lt;svg&gt;요소에 속성을 추가# - addAttributesToSVGElement: true# &lt;style&gt;요소 제거# - removeStyleElement: true# &lt;script&gt;요소 제거# - removeScriptElement: true

Mediaaudiohttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio
videohttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/videohttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/sourcehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/track








MP4
MPEG (H.264 Video Encoding, AAC Audio Encoding)


WebM
구글이 개발한 파일 형식 (Vp8 Video Encoding, Vorbis Audio Encoding)


OGG
오픈소스 코덱 (Theora Video Encoding, Vorbis Audio Encoding)


&lt;video autoplay muted playsinline oncontextmenu=&quot;false&quot;&gt;  &lt;source src=&quot;video.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt;

autoplayhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-autoplay

페이지 처음 접속 시 자동 재생은 muted 상태에서만 가능하다.

autopictureinpicturehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-autopictureinpicture
controlshttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-controls
controlslisthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-controlslist
crossoriginhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin
disablepictureinpicturehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-disablepictureinpicture
disableremoteplaybackhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-disableremoteplayback
heighthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-height
loophttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-loop
mutedhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-muted
playsinlinehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-playsinline

IOS 에서 영상이 전체화면으로 재생되지 않도록 한다.

posterhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-poster
preloadhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-preload
srchttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-src
widthhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-width
Linksahttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/a
navhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav
&lt;nav&gt;  &lt;a href=&quot;/menu1/&quot;&gt;Menu 1&lt;/a&gt;  &lt;a href=&quot;/menu2/&quot;&gt;Menu 2&lt;/a&gt;&lt;/nav&gt;


일련의 탐색 링크의 주요 블럭에만 사용한다.스크린리더기에서 렌더링 생략 여부를 결정할 수 있다.

menuhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu
Listslisthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/olhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/ulhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/li
&lt;!-- ol (Ordered List), ul (Unordered List) --&gt;&lt;ol reversed=&quot;reversed&quot; start=&quot;3&quot;&gt;  &lt;li&gt;List Item&lt;/li&gt;  &lt;!-- value 값부터 넘버링 됨 --&gt;  &lt;li value=&quot;9&quot;&gt;&lt;/li&gt;&lt;/ol&gt;

dlhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/dlhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/dthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd
Tablestablehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/tablehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/captionhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgrouphttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/colhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/theadhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbodyhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoothttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/trhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/thhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/td
&lt;table&gt;  &lt;caption&gt;table title (화면상에 표시됨)&lt;/caption&gt;  &lt;!-- 열 묶음 집합 (같은 순서에 있는 열들을 쉽게 관리하기 위해 사용) --&gt;  &lt;colgroup&gt;    &lt;!-- 열 묶음 (열의 그룹화) --&gt;    &lt;col span=&quot;1&quot;&gt;  &lt;/colgroup&gt;  &lt;thead&gt;    &lt;tr&gt;      &lt;!-- scope: 제목 셀 (th) 의 진행 방향을 지정 (낭독기가 방향을 잡을 수 있음) --&gt;      &lt;th scope=&quot;col&quot; abbr=&quot;head&quot;&gt;cell title (기본적으로 bold 속성과 center 속성을 가짐)&lt;/th&gt;    &lt;/tr&gt;  &lt;/thead&gt;  &lt;tbody&gt;    &lt;tr&gt;      &lt;td&gt;cell&lt;/td&gt;    &lt;/tr&gt;  &lt;/tbody&gt;  &lt;tfoot&gt;    &lt;tr&gt;      &lt;td&gt;footer&lt;/td&gt;    &lt;/tr&gt;  &lt;/tfoot&gt;&lt;/table&gt;

Email template
  



레이아웃은 테이블 태그로 구성한다.CSS 는 인라인 스타일로 정의한다.넓이, 높이값을 테이블 속성으로 지정한다.한 이미지 높이값은 1500px 을 초과할 수 없다.이미지의 링크는 이미지맵으로 지정한다.

Styles and Semanticsdivhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/div
spanhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/span
headerhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/header
&lt;article&gt;  &lt;header&gt;    &lt;h3&gt;Title&lt;/h3&gt;    &lt;p&gt;Description&lt;/p&gt;  &lt;/header&gt;  &lt;p&gt;Description&lt;/p&gt;&lt;/article&gt;


문서 또는 섹션의 헤더를 정의한다.소개, 탐색 링크 모음, 한개의 문서에 여러개 사용 가능하다.일반적으로 하나 이상의 제목 요소, 로고, 저자 정보를 포함한다.&lt;footer&gt;, &lt;address&gt;, &lt;header&gt; 내부에 사용 할 수 없다.

footerhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer
&lt;footer&gt;  &lt;p&gt;Author&lt;/p&gt;  &lt;p&gt;Copyright&lt;/p&gt;&lt;/footer&gt;


문서 또는 섹션의 바닥 글을 정의한다.한개의 문서에 여러개 사용 가능하다.일반적으로 저자 정보, 저작권 정보, 연락처 정보, 사이트 맵, 위로 가기 링크, 관련된 문서 등을 포함한다.

mainhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/main
&lt;main&gt;  &lt;h1&gt;Title&lt;/h1&gt;  &lt;p&gt;Description&lt;/p&gt;  &lt;article&gt;    &lt;h2&gt;Title&lt;/h2&gt;    &lt;p&gt;Description&lt;/p&gt;  &lt;/article&gt;&lt;/main&gt;&lt;main hidden&gt;  &lt;h1&gt;Other Title&lt;/h1&gt;&lt;/main&gt;


문서의 주요 내용을 정의한다.문서에서 한개만 사용 가능하지만, HTML 5.2 이후 hidden 속성으로 여러개 사용도 가능하다.&lt;article&gt;, &lt;aside&gt;, &lt;footer&gt;, &lt;header&gt;, &lt;nav&gt; 내부에 사용 할 수 없다.

IE 지원 안함
sectionhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/section
&lt;section&gt;  &lt;h1&gt;Title&lt;/h1&gt;  &lt;p&gt;Description&lt;/p&gt;&lt;/section&gt;


문서의 섹션을 정의한다.

articlehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/article
&lt;article&gt;  &lt;h1&gt;Title&lt;/h1&gt;  &lt;p&gt;Description&lt;/p&gt;&lt;/article&gt;


독립적인 내용, 포럼&#x2F;블로그 게시물, 뉴스 기사, 논평 등에 사용한다.

asidehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside
&lt;aside&gt;  &lt;h4&gt;Title&lt;/h4&gt;  &lt;p&gt;Description&lt;/p&gt;&lt;/aside&gt;


추가적인 내용, 관련된 컨텐츠에 사용한다.

detailshttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/detailshttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary
&lt;details open&gt;  &lt;summary&gt;Summary&lt;/summary&gt;  &lt;p&gt;Description&lt;/p&gt;&lt;/details&gt;


사용자가 필요에 따라 보거나 숨길 수 있는 추가 세부 정보를 지정한다.&lt;details&gt; 요소 의 보이는 머리글, 제목을 클릭하여 세부 정보를 보거나 숨길 수 있다.

IE 지원 안함
dialoghttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialoghttps://web.dev/building-a-dialog-component
&lt;dialog open&gt;  &lt;form method=&quot;dialog&quot;&gt;    &lt;button value=&quot;cancel&quot;&gt;Cancel&lt;/button&gt;    &lt;button value=&quot;default&quot;&gt;Confirm&lt;/button&gt;  &lt;/form&gt;&lt;/dialog&gt;&lt;button onclick=&quot;document.querySelector(&#x27;dialog&#x27;).showModal()&quot;&gt;Open&lt;/button&gt;

const $dialog = document.querySelector(&#x27;dialog&#x27;);$dialog.addEventListener(&#x27;close&#x27;, () =&gt; &#123;  console.log($dialog.returnValue);&#125;);

dialog &#123;  box-shadow: 0 2px 5px rgba(0,0,0,0.3);  border: none;  border-radius: 10px;  &amp;::backdrop &#123;    background: linear-gradient(rgba(0,0,0,0.1), rgba(0,0,0,0.4));    animation: fade-in 1s;  &#125;&#125;@keyframes fade-in &#123;  from &#123; opacity: 0; &#125;  to &#123; opacity: 1; &#125;&#125;


대화 상자 또는 창을 정의, 팝업 대화 상자 및 모달에 사용한다.

IE 지원 안함
datahttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/data
&lt;data value=&quot;123&quot;&gt;Text&lt;/data&gt;


마우스 오버 시 (ID 123) 텍스트가 우측 영역에 추가되어 보인다.

Programmingembedhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed
objecthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/objecthttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/param
]]></content>
      <categories>
        <category>html</category>
        <category>body</category>
      </categories>
      <tags>
        <tag>html tags</tag>
      </tags>
  </entry>
  <entry>
    <title>WAI-ARIA v1.2</title>
    <url>/html/wai-aria/</url>
    <content><![CDATA[
  https://www.w3.org/TR/wai-aria-1.2


RolesAbstract roleshttps://www.w3.org/TR/wai-aria-1.2/#abstract_roles

  command
  composite
  input
  landmark
  range
  roletype
  section
  sectionhead
  select
  structure
  widget
  window



역할의 개념을 정의하고 상속 구조를 잡기 위한 상위 개념의 role 속성 값으로 요소에 직접 사용하면 안된다.

Widget roleshttps://www.w3.org/TR/wai-aria-1.2/#widget_roles

  button
  checkbox
  gridcell
  link
  menuitem
  menuitemcheckbox
  menuitemradio
  option
  progressbar
  radio
  scrollbar
  searchbox
  separator
  slider
  spinbutton
  switch
  tab
  tabpanel
  textbox
  treeitem



  combobox
  grid
  listbox
  menu
  menubar
  radiogroup
  tablist
  tree
  treegrid



사용자와 상호작용하는 요소를 나타내는 위젯에 사용되는 role 속성 값이다.위젯은 단일 요소로 구성되기도 하고 복합적인 여러 요소로 구성되기도 한다.

Document structure roleshttps://www.w3.org/TR/wai-aria-1.2/#document_structure_roles

  application
  article
  blockquote
  caption
  cell
  columnheader
  definition
  deletion
  directory
  document
  emphasis
  feed
  figure
  generic
  group
  heading
  img
  insertion
  list
  listitem
  math
  meter
  none
  note
  paragraph
  presentation
  row
  rowgroup
  rowheader
  separator
  strong
  subscript
  superscript
  table
  term
  time
  toolbar
  tooltip



페이지의 구조를 기술하는 데 사용되는 role 속성 값이다.이들 role 속성 값이 적용된 요소들은 일반적으로 사용자와 상호작용하지 않는다.

Landmark roleshttps://www.w3.org/TR/wai-aria-1.2/#landmark_roles

  banner
  complementary
  contentinfo
  form
  main
  navigation
  region
  search



페이지의 내비게이션에 사용되는 영역들을 정의하기 위해 사용되는 role 속성 값이다.

Live region roleshttps://www.w3.org/TR/wai-aria-1.2/#live_region_roles

  alert
  log
  marquee
  status
  timer


Window roleshttps://www.w3.org/TR/wai-aria-1.2/#window_roles

  alertdialog
  dialog



브라우저 또는 애플리케이션 내에서 창 역할을 한다.

States and propertieshttps://www.w3.org/TR/wai-aria-1.2/#states_and_properties
Translatable states and propertieshttps://www.w3.org/TR/wai-aria-1.2/#translatable-states-and-properties

  aria-label
  aria-placeholder
  aria-roledescription
  aria-valuetext


Global states and propertieshttps://www.w3.org/TR/wai-aria-1.2/#global_states

  aria-atomic
  aria-busy
  aria-controls
  aria-current
  aria-describedby
  aria-details
  aria-dropeffect
  aria-flowto
  aria-grabbed
  aria-hidden
  aria-keyshortcuts
  aria-label
  aria-labelledby
  aria-live
  aria-owns
  aria-relevant
  aria-roledescription


Attributeshttps://www.w3.org/TR/wai-aria-1.2/#state_prop_taxonomy
Widget attributeshttps://www.w3.org/TR/wai-aria-1.2/#attrs_widgets

  aria-autocomplete
  aria-checked
  aria-disabled
  aria-errormessage
  aria-expanded
  aria-haspopup
  aria-hidden
  aria-invalid
  aria-label
  aria-level
  aria-modal
  aria-multiline
  aria-multiselectable
  aria-orientation
  aria-placeholder
  aria-pressed
  aria-readonly
  aria-required
  aria-selected
  aria-sort
  aria-valuemax
  aria-valuemin
  aria-valuenow
  aria-valuetext


Live region attributeshttps://www.w3.org/TR/wai-aria-1.2/#attrs_liveregions

  aria-atomic
  aria-busy
  aria-live
  aria-relevant


Drag-and-drop attributeshttps://www.w3.org/TR/wai-aria-1.2/#attrs_dragdrop

  aria-dropeffect
  aria-grabbed


Relationship attributeshttps://www.w3.org/TR/wai-aria-1.2/#attrs_relationships

  aria-activedescendant
  aria-colcount
  aria-colindex
  aria-colspan
  aria-controls
  aria-describedby
  aria-details
  aria-errormessage
  aria-flowto
  aria-labelledby
  aria-owns
  aria-posinset
  aria-rowcount
  aria-rowindex
  aria-rowspan
  aria-setsize

]]></content>
      <categories>
        <category>html</category>
        <category>wai-aria</category>
      </categories>
      <tags>
        <tag>accessibility</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - ArrayBuffer</title>
    <url>/javascript-global-objects/array-buffer/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer


Static propertiesconst buffer = new ArrayBuffer(20); // 20byte 의 버퍼영역 생성buffer.byteLength; // 20const int32View = new Int32Array(buffer); // 정수 32bit (4byte) = buffer (20byte) 에는 5 개의 값을 저장 가능// 자바스크립트의 최대값은 8byte 를 사용해야 함


인자에 지정한 byte 크기의 버퍼 영역을 생성한다.기본값 은 0 이며 최대값은 약 300,000,000 을 지정할 수 있다.버퍼 생성 후에는 사이즈를 변경할 수 없다.

@@specieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/@@species
class ExtendBuffer extends ArrayBuffer &#123;  static get [Symbol.species]() &#123; // 오버라이드    return ArrayBuffer;  &#125;&#125;const buffer = new ExtendBuffer(20);const obj = buffer.slice(3, 7);obj.byteLength; // 4


constructor 를 반환한다.

Static methodsArrayBuffer.isViewhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView
const buffer = new ArrayBuffer(20);ArrayBuffer.isView(buffer); // falseconst typedArray = new Int16Array();ArrayBuffer.isView(typedArray); // trueconst dataView = new DataView(buffer);ArrayBuffer.isView(dataView); // true


TypedArray 와 DataView 가 아닐 경우 false 를 반환한다.

Instance propertiesbyteLengthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength
Instance methodsslicehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice
const buffer = new ArrayBuffer(20);const a = buffer.slice(0); // 시작인덱스 0 부터 시작했으므로 전체 복사a.byteLength; // 20const b = buffer.slice(3, 7); // 시작인덱스 3 부터 끝인덱스 7 까지 복사b.byteLength; // 4


지정 범위를 복사한다.

]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>array-buffer</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>structured data</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Boolean</title>
    <url>/javascript-global-objects/boolean/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean


Instance methodsBoolean(new Boolean(false)); // trueBoolean(new String(false)); // trueBoolean(undefined); // falseBoolean(null); // falseBoolean(0); // falseBoolean(-0); // falseBoolean(NaN); // falseBoolean(&#x27;&#x27;); // false

toStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString
valueOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>boolean</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Array</title>
    <url>/javascript-global-objects/array/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array


Static properties@@specieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species
Static methodsArray.fromhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from
Array.from(&#123; 0: &#x27;zero&#x27;, 1: &#x27;one&#x27;, length: 2 &#125;); // [&quot;zero&quot;, &quot;one&quot;]Array.from(&#x27;abc&#x27;); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]Array.from(  // 첫번째 인자는 Array-like  &#123; 0: 10, 1: 20, length: 2 &#125;,  // 두번째 인자는 맵 함수  function(value) &#123;    return value + this.a;  &#125;,  // 세번째 인자는 맵 데이터 객체  &#123; a: 100 &#125;); // [110, 120]


Array-like 를 Array 로 반환한다.

Array.isArrayhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray
Array.isArray(undefined); // falseArray.isArray(&#x27;abc&#x27;); // falseArray.isArray(&#123; a: 123, length: 1 &#125;); // falseArray.isArray([1, 2, 3]); // true

Array.ofhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
new Array(3); // []: length 3Array.of(3); // [3]: length 1


인자값을 유일한 원소로 하는 배열을 생성한다.

Instance propertieslengthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length
@@unscopableshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables
Instance methodsathttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at
concathttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat
const a = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];const b = [&#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;];const c = a.concat(b);c; // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]

const a = [&#x27;a&#x27;, &#x27;b&#x27;];const b = [&#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;];a.push.apply(a, b); // 기존 배열을 변경console.info(a); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]


배열을 합쳐서 새 배열을 반환한다.

copyWithinhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin
// (복사한 값을 설정할 시작 인덱스, 복사 시작 인덱스, 복사 종료 인덱스)const array = [1, 2, 3, 4, 5];array.copyWithin(1, 4, 5); // [1, 5, 3, 4, 5]array.copyWithin(0, 2); // [3, 4, 5, 4, 5]array.copyWithin(4); // [1, 2, 3, 4, 1]const arrayLike = &#123; 0: &#x27;AB&#x27;, 1: &#x27;CD&#x27;, 2: &#x27;가나다&#x27;, length: 3 &#125;;const object = Array.prototype.copyWithin.call(arrayLike, 0, 1);object; // &#123; 0: &quot;CD&quot;, 1: &quot;가나다&quot;, 2: &quot;가나다&quot;, length: 3 &#125;


배열의 일부를 복사하여 원본 배열에 적용한다.배열의 크기는 변하지 않는다.

entrieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries
const array = [10, 20, 30];const iterator = array.entries();iterator.next(); // &#123; value: Array(2), done: false &#125;for (let [key, value] of iterator) &#123;  console.log(`key: $&#123;key&#125;, value: $&#123;value&#125;`);&#125;const array = [10, 20, 30];const iterator = array[Symbol.iterator]();iterator.next(); // &#123; value: 10, done: false &#125;


배열의 각 인덱스에 대한 키&#x2F;값 쌍을 가지는 새로운 Array Iterator 객체를 반환한다.

everyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every
const array = [11, 12, 13, 14];array.every(function(value, index, array) &#123;  return value &gt; this.a;&#125;, &#123; a: 3 &#125;); // true


주어진 함수의 테스트를 모두 통과하면 true 를 반환한다.

fillhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill
// (채울 값, 시작 인덱스, 종료 인덱스)const array = [1, 2, 3, 4, 5];array.fill(0, 1, 2); // [1, 0, 3, 4, 5]array.fill(0, 2); // [1, 2, 0, 0, 0]array.fill(0); // [0, 0, 0, 0, 0]const dummy = new Array(10).fill(5).map((a, b) =&gt; a * b); // [0, 5, 10, 15, 20, 25, 30, 35, 40, 45]


시작 인덱스부터 종료 인덱스 전까지 정적인 값으로 채운다.

filterhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
const array = [1, 2, 3, 4];const newArray = array.filter(function(value, index, array) &#123;  return value % 2;&#125;); // [1, 3]


주어진 함수의 테스트를 통과하는 모든 요소를 모아 새로운 배열로 반환한다.

findhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
const array = [1, 2, 3, 4, 5];array.find(function(value, index, allData) &#123;  return value === this.a;&#125;, &#123; a: 3 &#125;); // 3


주어진 함수의 테스트를 통과하는 첫 번째 요소의 값을 반환한다.

findIndexhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex
// 키 반환const array = [1, 2, 3, 4, 5];array.findIndex(function(value, index, allData) &#123;  return value === this.a;&#125;, &#123; a: 3 &#125;); // 2


주어진 함수의 테스트를 통과하는 첫 번째 요소의 인덱스를 반환한다.

flathttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat
[1, 2, [3, 4]].flat(); // [1, 2, 3, 4][1, 2, [3, 4, [5, 6]]].flat(); // [1, 2, 3, 4, [5, 6]][1, 2, [3, 4, [5, 6]]].flat(2); // [1, 2, 3, 4, 5, 6][1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]].flat(Infinity); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10][1, 2, , 4, 5].flat(); // [1, 2, 4, 5]


지정한 깊이값까지 배열을 평탄화 한다.빈 인자는 제거된다.

flatMaphttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap
const array = [&#x27;it is Sunny in&#x27;, &#x27;&#x27;, &#x27;California&#x27;];array.map(x =&gt; x.split(&#x27; &#x27;)); // [[&quot;it&quot;, &quot;is&quot;, &quot;Sunny&quot;, &quot;in&quot;], [&quot;], [&quot;California&quot;]]array.map(x =&gt; x.split(&#x27; &#x27;)).flat(); // [&quot;it&quot;, &quot;is&quot;, &quot;Sunny&quot;, &quot;in&quot;, &quot;, &quot;California&quot;]array.flatMap(x =&gt; x.split(&quot; &quot;)); // [&quot;it&quot;, &quot;is&quot;, &quot;Sunny&quot;, &quot;in&quot;, &quot;, &quot;California&quot;]


map 을 수행 후 결과를 평탄화 한다.

forEachhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
const array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];array.forEach(function(value, index, array) &#123;  console.log(value);&#125;); // a b c


주어진 함수를 배열 요소 각각에 대해 실행한다.

groupByhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/groupBy
groupByToMaphttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/groupByToMap
includeshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes
const array = [&#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;];array.includes(&#x27;bbb&#x27;); // truearray.includes(&#x27;bb&#x27;); // false

const a = [1, 4, 3, 2];const b = [0, 2, 1, 5];console.log(a.filter(n =&gt; !b.includes(n))); // a - b: [4, 3]


배열이 특정 요소를 포함하고 있는지 판별한다.

indexOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf
const array = [&#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;, &#x27;ddd&#x27;, &#x27;ccc&#x27;];array.indexOf(&#x27;ccc&#x27;); // 2array.indexOf(&#x27;eee&#x27;); // -1


배열에서 지정된 요소를 찾을 수 있는 첫번째 인덱스를 반환한다.없을 경우 -1 을 반환한다.

function toggleIndex(array, value) &#123;  const index = array.indexOf(value);  if (index === -1) &#123;    array.push(value); // 배열에 값이 없으면 추가  &#125; else &#123;    array.splice(index, 1); // 배열에 값이 있으면 삭제  &#125;&#125;

joinhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join
const array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];array.join(); // a,b,carray.join(&#x27;_&#x27;); // a_b_c


배열의 모든 요소를 연결해 하나의 문자열을 반환한다.

keyshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys
const iterator = [1, 2, 3].keys();for (let key of iterator) &#123;  console.log(key);&#125; // 1 2 3


배열의 각 인덱스를 키 값으로 가지는 새로운 Array Iterator 객체를 반환한다.

lastIndexOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf
const array = [&#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;, &#x27;ddd&#x27;, &#x27;ccc&#x27;];array.lastIndexOf(&#x27;ccc&#x27;); // 4array.lastIndexOf(&#x27;eee&#x27;); // -1


배열에서 지정된 요소를 찾을 수 있는 마지막 인덱스를 반환한다.없을 경우 -1 을 반환한다.

maphttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
const array = [1, 2, 3];array.map(function(value, index, array) &#123;  return value * 10;&#125;); // [10, 20, 30]

// querySelectorAll 객체 순회const elements = document.querySelectorAll(&#x27;h3&#x27;);[].map.call(elements, function(obj) &#123;  return obj.innerText;&#125;);


배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환한다.

pophttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop
const array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;];array.pop(); // earray; // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]


배열에서 마지막 요소를 제거하고 그 요소를 반환한다.

pushhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push
const array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];array.push(&#x27;d&#x27;, &#x27;e&#x27;); // 5array; // [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]


배열의 끝에 하나 이상의 요소를 추가하고 배열의 새로운 길이를 반환한다.

reducehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce

배열의 각 요소에 대해 주어진 함수를 실행하고 하나의 결과값을 반환한다.왼쪽에서 오른쪽으로 진행된다.

// 배열 총 합const array = [10, 20, 30, 40];array.reduce(function(accumulator, currentValue, currentIndex, array) &#123;  return accumulator + currentValue;&#125;); // 100


initialValue 를 지정하지 않았을 경우 첫번째 인자에 누적값을 적용하고, 두번째 인덱스부터 시작한다.




callback
accumulator
currentValue
currentIndex
array
returnValue



1번째 호출
10
20
1
[10, 20, 30, 40]
30


2번째 호출
30
30
2
[10, 20, 30, 40]
60


3번째 호출
60
40
3
[10, 20, 30, 40]
100


Use case 1const array = [&#123; x: 1 &#125;, &#123; x: 2 &#125;, &#123; x: 3 &#125;];array.reduce(function(accumulator, currentValue) &#123;  return accumulator + currentValue.x;&#125;, 100) // 106


객체배열의 값을 모두 더한다.

Use case 2const array = [[0, 1], [2, 3], [4, 5]];array.reduce(function(accumulator, currentValue) &#123;  return accumulator.concat(currentValue);&#125;, []); // [0, 1, 2, 3, 4, 5]// 추천array.flat(); // [0, 1, 2, 3, 4, 5]


이중 배열을 평탄화한다.

Use case 3const array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;a&#x27;];array.reduce(function(accumulator, currentValue) &#123;  if (currentValue in accumulator) &#123;    accumulator[currentValue]++;  &#125; else &#123;    accumulator[currentValue] = 1;  &#125;  return accumulator;&#125;, &#123;&#125;); // &#123;a: 3, b: 2, c: 1&#125;


배열에서 중복되는 인자 개수를 확인한다.

Use case 4const array = [1, 2, 1, 2, 3, 5, 4, 5, 3, 4, 4, 4, 4];array.sort().reduce(function(accumulator, currentValue) &#123;  const length = accumulator.length;    if (length === 0 || accumulator[length - 1] !== currentValue) &#123;    accumulator.push(currentValue);  &#125;  return accumulator;&#125;, []); // [1, 2, 3, 4, 5]// 추천[...new Set(array)]; // [1, 2, 3, 4, 5]


배열에서 중복 항목을 제거한다.

reduceRighthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight
const array = [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;];array.reduce(function(prev, cur) &#123;  return prev + cur;&#125;); // 12345array.reduceRight(function(prev, cur) &#123;  return prev + cur;&#125;); // 54321


배열의 각 요소에 대해 주어진 함수를 실행하고 하나의 결과값을 반환한다.오른쪽에서 왼쪽으로 진행된다.

reversehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse
const array = [1, 2, 3];array.reverse(); // [3, 2, 1]


배열의 순서를 반전한다.

shifthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift
const array = [1, 2, 3];array.shift(); // 1array; // [2, 3]


배열에서 첫 번째 요소를 제거하고 제거된 요소를 반환한다.

slicehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice
const array = [1, 2, 3, 4, 5];array.slice(2); // [3, 4, 5]array.slice(2, 4); // [3, 4]


시작 인덱스부터 종료 인덱스 전까지 복사 후 새로운 배열 반환한다.

somehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some
const array = [1, 2, 3, 4];array.some(function(value, index, array) &#123;  return value &gt; this.a;&#125;, &#123; a: 3 &#125;); // true


주어진 함수의 테스트를 하나라도 통과하면 true 를 반환한다.

sorthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
const array = [&#x27;c&#x27;, 11, &#x27;a&#x27;, &#x27;A&#x27;, 1, &#x27;ad&#x27;, 3, &#x27;b&#x27;, 12];array.sort(); // [1, 11, 12, 3, &quot;A&quot;, &quot;a&quot;, &quot;ad&quot;, &quot;b&quot;, &quot;c&quot;]


배열 요소를 정렬한다.기본 정렬 순서는 문자열의 유니코드 코드 포인트로 정해진다.

Use case 1const array = [11, 1, 3, 12, 3];array.sort(function(a, b) &#123;  return a - b;&#125;); // [1, 3, 3, 11, 12]


정렬 함수를 적용할 수 있다.

Use case 2const array = [  &#123; num: 21, str: &#x27;item-10&#x27; &#125;,  &#123; num: 100, str: &#x27;item-6&#x27; &#125;,  &#123; num: 0, str: &#x27;item-11&#x27; &#125;,  &#123; num: -12, str: &#x27;item-100&#x27; &#125;,  &#123; num: 10, str: &#x27;item-15&#x27; &#125;,  &#123; num: 15, str: &#x27;item-20&#x27; &#125;,];// 숫자 값array.sort(function(a, b) &#123;  if (a.num &gt; b.num) &#123;    return 1;  &#125;  if (a.num &lt; b.num) &#123;    return -1;  &#125;  return 0;&#125;);// 문자 값 (&#x27;str-10&#x27;, &#x27;str-100&#x27;, &#x27;str-11&#x27;, ...)array.sort(function(a, b) &#123;  const strA = a.str.toUpperCase();  const strB = b.str.toUpperCase();    if (strA &lt; strB) &#123;    return -1;  &#125;    if (strA &gt; strB) &#123;    return 1;  &#125;    return 0;&#125;);// 문자 숫자 조합 정렬 (&#x27;str-10&#x27;, &#x27;str-11&#x27;, &#x27;str-100&#x27;, ...)array.sort((a, b) =&gt; &#123;  return a.str.localeCompare(b.str, undefined, &#123;numeric: true, sensitivity: &#x27;base&#x27;&#125;); // asce  // return b.str.localeCompare(a.str, undefined, &#123;numeric: true, sensitivity: &#x27;base&#x27;&#125;); // desc&#125;);


객체 배열을 정렬한다.

splicehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
// (startIndex, deleteCount, &quot;item1&quot;, &quot;item2&quot;, ...)const array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;];// 인덱스 2 값 삭제array.splice(2, 1); // [&quot;c&quot;]array; // [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;]// 인덱스 3 값 추가array.splice(3, 0, &#x27;e&#x27;); // []array; // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;e&quot;, &quot;d&quot;]// 인덱스 3 값 변경array.splice(3, 1, &#x27;f&#x27;); // [&quot;d&quot;]array; // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;f&quot;]// 초기화array.splice(0); // []


배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경한다.두번째 인자를 지정하지 않으면 모든 요소가 삭제된다.

toLocaleStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString
const array = [1, &#x27;a&#x27;, new Date(&#x27;21 Dec 1997 14:12:00 UTC&#x27;)];const localeString = array.toLocaleString(&#x27;en&#x27;, &#123; timeZone: &#x27;UTC&#x27; &#125;);localeString; // 1,a,12/21/1997, 2:12:00 PM


배열의 요소를 나타내는 문자열을 반환한다.

toStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString
const array = [1, &#x27;a&#x27;, new Date(&#x27;21 Dec 1997 14:12:00 UTC&#x27;)];const localeString = array.toString(&#x27;en&#x27;, &#123; timeZone: &#x27;UTC&#x27; &#125;);localeString; // 1,a,Sun Dec 21 1997 23:12:00 GMT+0900 (대한민국 표준시)


배열의 요소를 나타내는 문자열을 반환한다.

unshifthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift
const array = [1, 2, 3];array.unshift(4, 5); // 5array; // [4, 5, 1, 2, 3]


새로운 요소를 배열의 맨 앞쪽에 추가하고 배열의 새로운 길이를 반환한다.

valueshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values
const iterator = [1, 2, 3].values();iterator.next(); // &#123;value: 1, done: false&#125;


배열의 각 인덱스에 대한 값을 가지는 새로운 Array Iterator 객체를 반환한다.

@@iteratorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>array</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Class</title>
    <url>/javascript-global-objects/class/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class


InstanceES 5var Example = function() &#123; // 함수 객체  this.method = function() &#123;    return &#x27;abc&#x27;;  &#125;&#125;;var prototype = Example.prototype; // Example 함수와 연관이 있는 프로토타입 객체var constructor = prototype.constructor; // 프로토타입과 관련한 함수 객체var instance = new Example(); // Example 의 객체 instance 생성instance.method(); // abcconstructor === Example; // true: 모든 함수에 대해 Example.prototype.constructor == Exampleinstance.constructor === Example; // true: constructor 프로퍼티는 클래스

ES 6 Function declarationclass Example &#123;  method() &#123;    return &#x27;abc&#x27;;  &#125;&#125;const instance = new Example();instance.method(); // abc

ES 6 Function expressionconst Example = class &#123;  method() &#123;    return &#x27;abc&#x27;;  &#125;&#125;;const instance = new Example();instance.method(); // abc


use strict 를 선언하지 않아도 strict 모드에서 실행된다.클래스 내부에서 메서드 선언시 prototype 프로퍼티에 자동으로 연결된다.클래스 외부에서 Class.prototype.method = function() &#123;&#125; 로 지정 가능하지만 성능은 좋지 않다.호이스팅되지 않고 같은 클래스를 두번 선언할수 없다.

fieldshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static
Publichttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields
ES 5function Example() &#123;  this.publicInstanceProperty = &#x27;a&#x27;;  this.publicInstanceMethod = function() &#123;    return &#x27;b&#x27;;  &#125;;&#125;Example.publicStaticProperty = &#x27;c&#x27;;Example.publicStaticMethod = function() &#123;  return &#x27;d&#x27;;&#125;;

ES 6class Example &#123;  publicInstanceProperty = &#x27;a&#x27;;  publicInstanceMethod() &#123;    return &#x27;b&#x27;;  &#125;  static publicStaticProperty = &#x27;c&#x27;;  static publicStaticMethod() &#123;    return &#x27;d&#x27;  &#125;;&#125;

Privatehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields
ES 5function Example() &#123;  var privateProperty = &#x27;a&#x27;;  var privateMethod = function() &#123;    return &#x27;b&#x27;;  &#125;;&#125;

ES 6class Example &#123;  #privateProperty = &#x27;a&#x27;;  #privateMethod() &#123;    return &#x27;b&#x27;;  &#125;  static #privateStaticProperty = &#x27;c&#x27;;  static #privateStaticMethod() &#123;    return &#x27;d&#x27;;  &#125;&#125;


정적 속성과 메서드는 클래스의 인스턴스 없이 호출이 가능하며 클래스가 인스턴스화되면 호출할 수 없다.

constructorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor
class Example &#123;  constructor() &#123;    this.property = &#x27;a&#x27;; // 속성 초기화    // return 10; // 무시되므로 어떤 속성이나 메서드도 내보내지 않음    return &#123; // 필요한 속성 또는 메서드만 내보낼 수 있음      property: this.property,      // method: this.method,    &#125;;  &#125;  method() &#123;    return &#x27;b&#x27;;  &#125;&#125;const instance = new Example();instance.property; // ainstance.method(); // not a function


클래스 인스턴스를 생성하고, 생성한 인스턴스를 초기화하는 역할을 하는 특별한 메서드이다.constructor 를 작성하지 않으면 prototype 의 기본 constructor 가 호출된다.new 키워드를 통해서 기본적으로 인스턴스를 반환하지만 constructor 내부에 return 문을 작성해서 이외의 값을 반환할 수 있다. (number, string 타입은 무시)


자식 클래스와 부모 클래스 양쪽에 constructor 를 작성하지 않아도 인스턴스는 생성된다. (default constructor)자식 클래스에 constructor 를 작성하지 않고 부모 클래스에만 constructor 를 작성하면 자식 클래스의 default constructor 가 호출되고 부모 클래스의 constructor 가 호출된다.자식 클래스에만 constructor 를 작성하고 부모 클래스에는 constructor 를 작성하지 않으면 자식 클래스의 constructor 는 호출 되지만 에러가 발생한다.자식 클래스와 부모 클래스 양쪽에 constructor 를 작성하면 자식 클래스의 constructor 가 호출되지만 에러가 발생한다. (super 키워드로 메서드 오버라이딩 하면 에러가 나지 않음)

superhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super

부모 클래스에 같은 이름의 메서드가 존재하면 자식 클래스의 메서드가 호출되지 않는다.이때 최상단에 super 키워드 사용해서 부모 클래스를 호출한다.

Class patternclass Parent &#123;  text = &#x27;a&#x27;;  constructor(number) &#123;    this.number = number;    console.log(&#x27;Parent&#x27;, this.number);  &#125;  method(text) &#123; // Abstraction (추상화)    this.text = text;  &#125;&#125;class Child extends Parent &#123;  constructor(number) &#123;    super(number);    this.number = 456;    console.log(&#x27;Child&#x27;, this.number);  &#125;  method(text) &#123;    super.method();    this.text = text;  &#125;&#125;const instance = new Child(123); // Parent 123 Child 456

Singleton patternconst Parent = &#123;  method() &#123;    console.log(&#x27;Parent&#x27;);  &#125;&#125;;const Child = &#123;  method() &#123;    super.method();    console.log(&#x27;Child&#x27;);  &#125;&#125;;Object.setPrototypeOf(Child, Parent);Child.method(); // Parent Child

extendshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends
ES 5function Sports(member) &#123;  this.member = member;&#125;Sports.prototype = &#123;  construct: Sports, // 역 참조를 위해 constructor 프로퍼티를 명시적으로 설정  getMember: function() &#123;    return this.member;  &#125;,&#125;;function Soccer(member) &#123; // Sports 상속  Sports.call(this, member); // Sports constructor 호출&#125;Soccer.prototype = Object.create(Sports.prototype, &#123;  setGround: &#123;    value: function(ground) &#123;      this.ground = ground;    &#125;,  &#125;,&#125;);// Soccer.prototype = new Sports();Soccer.prototype.constructor = Soccer; // constructor 재정의var soccer = new Soccer(123);soccer.setGround(&#x27;abc&#x27;);soccer.getMember(); // 123soccer.ground; // abc

ES 6class Sports &#123;  constructor(member) &#123;    this.member = member;    // console.log(`Sports : $&#123;new.target.name&#125;`); // 클래스 이름 출력  &#125;  getMember() &#123;    return this.member;  &#125;&#125;class Soccer extends Sports &#123; // Sports 상속  constructor(member) &#123;    super(member);    // console.log(`Soccer : $&#123;new.target.name&#125;`); // 클래스 이름 출력  &#125;  setGround(ground) &#123;    this.ground = ground;  &#125;&#125;const soccer = new Soccer(123);soccer.setGround(&#x27;abc&#x27;);soccer.getMember(); // 123soccer.ground; // abc

extends Built-in objectclass ExtendArray extends Array &#123;  constructor(array) &#123;    super(...array);  &#125;  getTotalSum() &#123;    let total = 0;    for (let value of this) &#123;      total += value;    &#125;    return total;  &#125;&#125;const extendArray = new ExtendArray([10, 20]);extendArray.getTotalSum(); // 30

extends DOM interfaceclass ExtendsImage extends Image &#123;  constructor() &#123;    super();  &#125;  setProperty(image) &#123;    this.src = image.src;    this.alt = image.alt;    this.title = image.title;  &#125;&#125;const extendsImage = new ExtendsImage();extendsImage.setProperty(&#123;  src: &#x27;image.png&#x27;,  alt: &#x27;alt text&#x27;,  title: &#x27;image name&#x27;,&#125;);document.querySelector(&#x27;body&#x27;).appendChild(extendsImage);
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>class</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - DataView</title>
    <url>/javascript-global-objects/data-view/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView


Instance propertiesconst littleEndian = (() =&gt; &#123;  const buffer = new ArrayBuffer(2);  new DataView(buffer).setInt16(0, 256, true /* littleEndian */);  // Int16Array uses the platform&#x27;s endianness.  return new Int16Array(buffer)[0] === 256;&#125;)();console.log(littleEndian); // true or false

bufferhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer
byteLengthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength
byteOffsethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset
Instance MethodsgetInt8https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8
getUint8https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8
getInt16https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16
getUint16https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16
getInt32https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32
getUint32https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32
getFloat32https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32
getFloat64https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64
getBigInt64https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigInt64
getBigUint64https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigUint64
setInt8https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8
setUint8https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8
setInt16https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16
setUint16https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16
setInt32https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32
setUint32https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32
setFloat32https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32
setFloat64https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64
setBigInt64https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64
setBigUint64https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>data-view</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>structured data</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Date</title>
    <url>/javascript-global-objects/date/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date
  https://momentjs.com


Static methodsDate.nowhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now
const start = Date.now();setTimeout(() =&gt; &#123;  const ms = Date.now() - start;  console.log(`seconds elapsed = $&#123;Math.floor(ms / 1000)&#125;`); // seconds elapsed = 2&#125;, 2000);


1970년 1월 1일 00:00:00 UTC 이후 경과 된 밀리 초 수를 반환한다.

Date.parsehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse
const unixTimeZero = Date.parse(&#x27;01 Jan 1970 00:00:00 GMT&#x27;);unixTimeZero; // 0const javaScriptRelease = Date.parse(&#x27;04 Dec 1995 00:12:00 GMT&#x27;);javaScriptRelease; // 818035920000


날짜를 문자열로 표현하며 문자열을 인식할 수 없거나 경우에 따라 잘못된 날짜 값 (예: 2015-02-31) 이 포함된 경우1970년 1월 1일, 00:00:00 UTC 또는 NaN 이후 밀리초 수를 반환한다. (ES 5 이하 사용 지양)

Date.UTChttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC
const date = new Date(Date.UTC(96, 1, 2, 3, 4, 5));date.toUTCString(); // Fri, 02 Feb 1996 03:04:05 GMTconst date = new Date(Date.UTC(0, 0, 0, 0, 0, 0));date.toUTCString(); // Sun, 31 Dec 1899 00:00:00 GMT


생성자와 유사한 매개 변수를 승인 하지만 UTC 로 처리한다. (1970년 1월 1일 00:00:00 UTC 이후의 밀리 초 수를 반환)

Instance methods@@toPrimitivehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive
getDatehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate
getDayhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay
getFullYearhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear
getHourshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours
getMillisecondshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds
getMinuteshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes
getMonthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth
getSecondshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds
getTimehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime
getTimezoneOffsethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
getUTCDatehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate
getUTCDayhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay
getUTCFullYearhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear
getUTCHourshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours
getUTCMillisecondshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds
getUTCMinuteshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes
getUTCMonthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth
getUTCSecondshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds
getYearhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear
setDatehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate
setFullYearhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear
setHourshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours
setMillisecondshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds
setMinuteshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes
setMonthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth
setSecondshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds
setTimehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime
setUTCDatehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate
setUTCFullYearhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear
setUTCHourshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours
setUTCMillisecondshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds
setUTCMinuteshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes
setUTCMonthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth
setUTCSecondshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds
setYearhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear
toDateStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString
toISOStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
toJSONhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON
toGMTStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString
toLocaleDateStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString
toLocaleStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString
toLocaleTimeStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString
toStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString
toTimeStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString
toUTCStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString
valueOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf
const date = new Date(Date.UTC(96, 1, 2, 3, 4, 5));date.valueOf(); // 823230245000const date = new Date(&#x27;02 Feb 1996 03:04:05 GMT&#x27;);date.valueOf(); // 823230245000


프리미티브 값을 반환한다.

ExamplesSecond to Time stringconst secondToTimeString = (seconds) =&gt; &#123;  const sec = parseInt(seconds);  const h = Math.floor(sec / 3600);  const m = Math.floor((sec % 3600) / 60);  const s = sec % 60;  return `$&#123; h &lt; 10 ? &#x27;0&#x27; + h : h &#125;:$&#123; m &lt; 10 ? &#x27;0&#x27; + m : m &#125;:$&#123; s &lt; 10 ? &#x27;0&#x27; + s : s &#125;`;&#125;;

Time string to Secondconst timeStringToSecond = (timeString) =&gt; &#123;  const split = timeString.split(&#x27;:&#x27;);  const h = parseInt(split[0]) * 60 * 60;  const m = parseInt(split[1]) * 60;  const s = parseInt(split[2]);  return h + m + s;&#125;;]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>date</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - JSON</title>
    <url>/javascript-global-objects/json/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON


Static methodsJSON.parsehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse
JSON.stringifyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
JSON.stringify(object, null, 2); // null 로 2칸 띄움

ExamplesParse for FileReaderconst reader = new FileReader();const validationFailed = () =&gt; &#123;  alert(&#x27;failed&#x27;);&#125;;reader.onload = (event) =&gt; &#123;  try &#123;    const parse = JSON.parse(event.target.result.toString());  &#125; catch (error) &#123;    console.log(error);  &#125;&#125;;reader.onerror = () =&gt; validationFailed;reader.readAsText(JSONFile);
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>json</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Function</title>
    <url>/javascript-global-objects/function/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function


Instance propertieslengthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length
namehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
Instance methodsapplyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply
const array = [5, 6, 2, 7, 3];const max = Math.max.apply(null, array);max; // 7

const a = [0, 1];const b = [2, 3, 4];const c = a.concat(b); // 기존 배열은 유지하고 새 배열을 반환a.push.apply(a, b); // 기존 배열을 변경console.info(a); // [0, 1, 2, 3, 4]


주어진 this 값 및 전달된 배열 인수와 함께 함수를 호출한다.

callhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call
function Product(name, price) &#123;  this.name = name;  this.price = price;&#125;function Food(name, price) &#123;  Product.call(this, name, price);  this.category = &#x27;food&#x27;;&#125;new Food(&#x27;cheese&#x27;, 5).name; // cheese


주어진 this 값 및 전달된 여러 개의 인수와 함께 함수를 호출한다.

bindhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
function fn(y) &#123;  return this.x + y; // 일반 함수에서 this 는 전역 객체&#125;const a = &#123; x: 1 &#125;;const b = fn.bind(a);b(2); // 3


주어진 값을 this 로 지정하는 새로운 함수를 반환한다.

toStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString
Function propertiesevalhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval
isFinitehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite
isNaNhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN
parseFloathttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat
parseInthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt
encodeURIhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI
encodeURI(&#x27;https://www.naver.com/?text1=가&amp;text2=나&#x27;);// https://www.naver.com/?text1=%EA%B0%80&amp;text2=%EB%82%98


URI 전체를 인코딩 할 때 사용한다.알파벳, 0 ~ 9 숫자, ; , / ? : @ &amp; = + $ # - _ . ! ~ * &#39; ( ) 를 제외한 문자를 인코딩 (이스케이프 처리) 한다.한글은 변환하지만, 인터넷 주소에서 쓰이는 특수문자는 변환하지 않는다.

encodeURIComponenthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent
encodeURIComponent(&#x27;https://www.naver.com/?text1=가&amp;text2=나&#x27;);// https%3A%2F%2Fwww.naver.com%2F%3Ftext1%3D%EA%B0%80%26text2%3D%EB%82%98


URI 파라미터를 인코딩 할 때 사용한다.알파벳, 0 ~ 9 숫자 - _ . ! ~ * &#39; ( ) 를 제외한 문자를 인코딩 (이스케이프 처리) 한다.한글을 포함하여 인터넷 주소에서 쓰이는 특수문자까지 변환한다.

decodeURIhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI


decodeURIComponenthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent
Function typeFunction declarationfn(); // 1function fn() &#123; // hoisted  console.log(1);&#125;

if (false) &#123;  function fn() &#123;    console.log(1);  &#125;&#125;


함수 선언식은 호이스팅 된다.조건문 내에서 함수 선언식은 브라우저별로 동작이 다르기 때문에 사용을 지양한다.

Function expressionfn(); // TypeError: fn is not a functionconst fn = function() &#123; // notHoisted  console.log(1);&#125;;

let fn;if (false) &#123;  fn = function() &#123;    console.log(1);  &#125;;&#125;


함수 표현식은 호이스팅 안된다.조건문 내에서 함수 표현식은 사용에 문제 없다.

Arrow functionhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
const fn = () =&gt; 123;const fn = () =&gt; &#123;&#125;;const fn = param =&gt; &#123;&#125;;const fn = param =&gt; (&#123; key: value &#125;);const fn = (param) =&gt; &#123;&#125;;const fn = (param1, param2) =&gt; &#123;&#125;;const fn = (param1, param2, ...rest) =&gt; &#123;&#125;;const fn = (param1 = 10, param2 = 20) =&gt; &#123;&#125;;const fn = (param1 = 10, param2 = param1 + 5, ...rest) =&gt; &#123;&#125;;const fn = ([a, b] = [1, 2]) =&gt; a + b;const fn = (&#123;a: b&#125; = &#123;a: 1 + 2&#125;) =&gt; &#123;&#125;;

const fn = () =&gt; &#123;&#125;;fn.prototype; // undefinednew fn(); // TypeError: is not a constructor

const fn = (...rest) =&gt; &#123;  console.log(rest); // [1, 2, 3]  console.log(arguments); // ReferenceError: arguments is not defined&#125;;fn(1, 2, 3);


new 연산자로 인스턴스를 생성 할 수 없다.자신의 this, arguments, super, new.target 을 바인딩 하지 않는다.prototype, argumets 속성이 없기 때문에 사용 할 수 없다.

thishttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this
Global contextconsole.log(this === window); // truea = 100;console.log(window.a); // 100this.b = &#x27;text&#x27;;console.log(window.b); // textconsole.log(b); // text

Function contextfunction fna() &#123;  return this;&#125;const fnb = function() &#123;  return this;&#125;;const fnc = () =&gt; &#123;  return this;&#125;;// In a browserfna() === window; // truefnb() === window; // truefnc() === window; // true// In Nodefna() === globalThis; // true

Class contextclass Example &#123;  constructor() &#123;    const proto = Object.getPrototypeOf(this);    console.log(Object.getOwnPropertyNames(proto));  &#125;  first() &#123;&#125;  second() &#123;&#125;  static third() &#123;&#125;&#125;new Example(); // [&#x27;constructor&#x27;, &#x27;first&#x27;, &#x27;second&#x27;]

Instance contextconst Example = function() &#123;  this.number = 1;&#125;;// prototype 일반 함수Example.prototype.a = function() &#123;  console.log(this === window); // false (this 는 instance)  setTimeout(function() &#123; // setTimeout 일반 함수    console.log(this === window); // true (this 는 전역 객체)  &#125;, 500);  setTimeout(() =&gt; &#123; // setTimeout 화살표 함수    console.log(this === window); // false (this 는 instance)  &#125;, 1000);&#125;;// prototype 화살표 함수Example.prototype.b = () =&gt; &#123;  console.log(this === window); // true (this 는 전역 객체)  setTimeout(function() &#123; // setTimeout 일반 함수    console.log(this === window); // true (this 는 전역 객체)  &#125;, 500);  setTimeout(() =&gt; &#123; // setTimeout 화살표 함수    console.log(this === window); // true (this 는 전역 객체)  &#125;, 1000);&#125;;const instance = new Example();instance.a(); // false true falseinstance.b(); // true true true

returnhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return
Closure
외부 스코프에 정의된 변수가 내부 스코프에서 사용될 때, 외부 스코프가 종료되어도 변수의 값이 유지되어 있는 현상이다.

ES 5function count() &#123;  // 외부함수의 this 와 arguments 를 접근하려면 아래와 같이 선언  // var self = this, outerArguments = arguments;  var value = 10; // 함수 실행이 종료되어도 값이 유지 됨  return function() &#123;    return value++;  &#125;&#125;var a = count();a(); // 10a(); // 11var b = count();b(); // 10

ES 6function counter(n) &#123;  return &#123;    get count() &#123; return n++; &#125;,    set count(m) &#123; n = m; &#125;  &#125;&#125;const a = counter(10);a.count; // 10a.count; // 11const b = counter(10);b.count; // 10

Async functionhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function
const delay = () =&gt; &#123;  return new Promise((resolve) =&gt; &#123;    setTimeout(() =&gt; &#123;      resolve(&#x27;done&#x27;);    &#125;, 1000);  &#125;);&#125;async function forLoop() &#123;  console.log(&#x27;start&#x27;);  for(let i = 0; i &lt; 5; i++) &#123;    console.log(await delay());  &#125;  console.log(&#x27;end&#x27;);&#125;const forInLoop = async function() &#123;  console.log(&#x27;start&#x27;);  for (const i in [0, 1, 2, 3, 4]) &#123;    console.log(await delay());  &#125;  console.log(&#x27;end&#x27;);&#125;;const forAwaitLoop = async () =&gt; &#123;  console.log(&#x27;start&#x27;);  for await (const i of [0, 1, 2, 3, 4]) &#123;    console.log(await delay());  &#125;  console.log(&#x27;end&#x27;);&#125;;


forEach 는 await 를 지원하지 않는다.

Generatorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*
function* idMaker() &#123;  var index = 0;  while (true)    yield index++;&#125;var gen = idMaker();console.log(gen.next().value); // 0console.log(gen.next().value); // 1console.log(gen.next().value); // 2console.log(gen.next().value); // 3// ...

function* anotherGenerator(i) &#123;  yield i + 1;  yield i + 2;  yield i + 3;&#125;function* generator(i) &#123;  yield i;  yield* anotherGenerator(i);  yield i + 10;&#125;var gen = generator(10);console.log(gen.next().value); // 10console.log(gen.next().value); // 11console.log(gen.next().value); // 12console.log(gen.next().value); // 13console.log(gen.next().value); // 20

Passing arguments into Generatorsfunction* logGenerator() &#123;  console.log(0);  console.log(1, yield);  console.log(2, yield);  console.log(3, yield);&#125;var gen = logGenerator();// the first call of next executes from the start of the function// until the first yield statementgen.next(); // 0gen.next(&#x27;pretzel&#x27;); // 1 pretzelgen.next(&#x27;california&#x27;); // 2 californiagen.next(&#x27;mayonnaise&#x27;); // 3 mayonnaise

Return statement in a generatorfunction* yieldAndReturn() &#123;  yield &#x27;Y&#x27;;  return &#x27;R&#x27;;  yield &#x27;unreachable&#x27;;&#125;var gen = yieldAndReturn();console.log(gen.next()); // &#123; value: &quot;Y&quot;, done: false &#125;console.log(gen.next()); // &#123; value: &quot;R&quot;, done: true &#125;console.log(gen.next()); // &#123; value: undefined, done: true &#125;

Generator as an object propertyconst someObj = &#123;  *generator() &#123;    yield &#x27;a&#x27;;    yield &#x27;b&#x27;;  &#125;&#125;const gen = someObj.generator();console.log(gen.next()); // &#123; value: &#x27;a&#x27;, done: false &#125;console.log(gen.next()); // &#123; value: &#x27;b&#x27;, done: false &#125;console.log(gen.next()); // &#123; value: undefined, done: true &#125;

Generator as an object methodclass Foo &#123;  *generator() &#123;    yield 1;    yield 2;    yield 3;  &#125;&#125;const f = new Foo ();const gen = f.generator();console.log(gen.next()); // &#123; value: 1, done: false &#125;console.log(gen.next()); // &#123; value: 2, done: false &#125;console.log(gen.next()); // &#123; value: 3, done: false &#125;console.log(gen.next()); // &#123; value: undefined, done: true &#125;

Generator as a computed propertyclass Foo &#123;  *[Symbol.iterator]() &#123;    yield 1;    yield 2;  &#125;&#125;const SomeObj = &#123;  *[Symbol.iterator]() &#123;    yield &#x27;a&#x27;;    yield &#x27;b&#x27;;  &#125;&#125;console.log(Array.from(new Foo)); // [ 1, 2 ]console.log(Array.from(SomeObj)); // [ &#x27;a&#x27;, &#x27;b&#x27; ]

Generators are not constructablefunction* f() &#123;&#125;var obj = new f; // throws &quot;TypeError: f is not a constructor

Generator defined in an expressionconst foo = function* () &#123;  yield 10;  yield 20;&#125;;const bar = foo();console.log(bar.next()); // &#123;value: 10, done: false&#125;

Generator examplefunction* powers(n)&#123;  //endless loop to generate  for(let current =n;; current *= n)&#123;    yield current;  &#125;&#125;for(let power of powers(2))&#123;  //controlling generator  if(power &gt; 32) break;  console.log(power);  //2  //4  //8  //16  //32&#125;

Returnhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return
ExamplesLoop issuefor (var i = 0; i &lt; 3; i++) &#123;  setTimeout(function() &#123;    console.log(i); // 3 3 3 (의도하지 않은 동작)  &#125;, i * 500);&#125;

Solution 1for (var i = 0; i &lt; 3; i++) &#123;  (function(i) &#123;    setTimeout(function() &#123;      console.log(i); // 0 1 2    &#125;, i * 500);  &#125;(i));&#125;


즉시 실행 함수로 감싸면서 인자로 i 를 넘겨주는 클로저를 구현한다.

Solution 2function loop(i) &#123;  setTimeout(function() &#123;    console.log(i); // 0 1 2  &#125;, i * 500);&#125;for (var i = 0; i &lt; 3; i++) &#123;  loop(i);&#125;

Solution 3for (let i = 0; i &lt; 3; i++) &#123;  setTimeout(function() &#123;    console.log(i); // 0 1 2  &#125;, i * 500);&#125;


기본적으로 함수 내부에 i 가 없으면 외부 함수 스코프에서 탐색한다.let 을 사용하는 방법이 가장 적절하다.

]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>function</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Map</title>
    <url>/javascript-global-objects/map/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map


Static propertiesconst map = new Map([  [&#x27;a&#x27;, &#x27;1&#x27;],  [&#x27;b&#x27;, &#x27;2&#x27;],  [&#x27;a&#x27;, &#x27;3&#x27;],]);// a 키가 중복되어 기존 값을 덮어 씌움// [&quot;a&quot;, &quot;3&quot;]// [&quot;b&quot;, &quot;2&quot;]




비교
Map
Object



의도하지 않은 키
명시적으로 제공한 키 외에 어떤 키도 없음
Object 의 프로토타입을 가지므로 기본 키가 존재함


키 자료형
함수, 객체 등을 포함한 모든 값이 가능
반드시 String 또는 Symbol 이어야 함


키 순서
삽입순으로 정렬
정렬되지 않음


크기
size 속성을 통해 쉽게 알아낼 수 있음
직접 알아내야 함


순회
바로 순회 가능
먼저 모든 키를 배열로 알아낸 후 순회


성능
잦은 키-값 추가와 제거에서 더 좋은 성능
잦은 키-값 추가와 제거에서 최적화가 없음


@@specieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species
Instance propertiessizehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size
Instance methodsclearhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear
const map = new Map([  [&#x27;key1&#x27;, &#x27;value1&#x27;],  [&#123;&#125;, &#x27;Object&#x27;],]);map.clear();map.size; // 0

deletehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete
const map = new Map([  [&#x27;key1&#x27;, &#x27;value1&#x27;],  [&#123;&#125;, &#x27;Object&#x27;],]);const object = &#123;&#125;;map.set(object, &#x27;Object&#x27;);map.delete(&#x27;key1&#x27;); // truemap.delete(&#123;&#125;); // falsemap.delete(object); // truemap.size; // 1

gethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get
map.get(&#x27;a&#x27;);map.get(1);map.get(&#123;&#125;);map.get(NaN);...

hashttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has
const map = new Map();map.set(&#x27;one&#x27;, 100);map.has(&#x27;one&#x27;); // true

sethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set
const map = new Map();map.set(&#x27;one&#x27;, &#x27;111&#x27;);map.set(function() &#123;&#125;, &#x27;Function&#x27;);map.set(new Number(&#x27;123&#x27;), &#x27;Instance&#x27;);map.set(NaN, &#x27;Not a Number&#x27;);map.set(&#123;&#125;, &#x27;Object&#x27;);map.set(&#123;&#125;, &#x27;Object new&#x27;); // 각각 따로 생성됨const object = &#123; key: &#x27;abc&#x27; &#125;;map.set(object, &#x27;Object&#x27;); // 오브젝트를 키로 사용할때 값은 주석을 의미map.set(object, &#x27;Object new&#x27;); // 대체됨for (let [key, value] of map) &#123;  console.log(key, value); // &#123; key: &quot;abc&quot; &#125; &quot;Object new&quot;&#125;

Iteration methods@@iteratorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator
keyshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys
const map = new Map([  [&#x27;key1&#x27;, &#x27;value&#x27;],  [&#123;&#125;, &#x27;Object&#x27;],]);const iterator = map.keys();iterator.next(); // &#123;value: &quot;key1&quot;, done: false&#125;iterator.next(); // &#123;value: &#123;&#125;, done: false&#125;iterator.next(); // &#123;value: undefined, done: true&#125;

valueshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values
const map = new Map([  [&#x27;key1&#x27;, &#x27;value&#x27;],  [&#123;&#125;, &#x27;Object&#x27;],]);const iterator = map.values();iterator.next(); // &#123;value: &quot;value1&quot;, done: false&#125;iterator.next(); // &#123;value: &quot;Object&quot;, done: false&#125;iterator.next(); // &#123;value: undefined, done: true&#125;

entrieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries
const map = new Map([  [&#x27;key1&#x27;, &#x27;value1&#x27;],  [&#x27;key2&#x27;, &#x27;value2&#x27;],]);const iterator = map.entries();iterator.next(); // &#123;value: Array(2), done: false&#125;iterator.next(); // &#123;value: Array(2), done: false&#125;iterator.next(); // &#123;value: undefined, done: true&#125;

forEachhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>map</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>keyed collections</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Math</title>
    <url>/javascript-global-objects/math/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math


Static propertiesMath.Ehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E
Math.LN2https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2
Math.LN10https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10
Math.LOG2Ehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E
Math.LOG10Ehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E
Math.PIhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI
Math.SQRT1_2https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2
Math.SQRT2https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2
Static methodsMath.abshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs
Math.abs(&#x27;-1&#x27;); // 1Math.abs(-2); // 2Math.abs(null); // 0Math.abs(&#x27;&#x27;); // 0Math.abs([]); // 0Math.abs([2]); // 2Math.abs([1, 2]); // NaNMath.abs(&#123;&#125;); // NaNMath.abs(&#x27;string&#x27;); // NaNMath.abs(); // NaN


절대값을 반환한다.

Math.acoshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos

아크코사인 값을 반환한다.

Math.acoshhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh

쌍곡 아크코사인 (hyperbolic arccosine) 값을 반환한다.

Math.asinhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin

아크 사인 값을 반환한다.

Math.asinhhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh

쌍곡 아크사인 (hyperbolic arcsine) 값을 반환한다.

Math.atanhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan

아크 탄젠트 값을 반환한다.

Math.atanhhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh

쌍곡 아크탄젠트 (hyperbolic arctangent) 값을 반환한다.

Math.atan2https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2

아크 탄젠트 2 값을 반환한다.

Math.cbrthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt

세제곱근 (cube root) 을 반환한다.

Math.ceilhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil

올림하여 반환한다.

Math.clz32https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

32 비트 값에서 0 비트 수를 반환한다.

Math.coshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos

코사인 값을 반환한다.

Math.coshhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh

쌍곡 코사인 (hyperbolic cosine) 값을 반환한다.

Math.exphttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp

자연로그 상수 (e) 의 x 승을 반환한다.

Math.expm1https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1

자연로그 상수 (e) 의 x 승 -1 을 반환한다.

Math.floorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor
Math.floor(5.95); // 5Math.floor(5.05); // 5Math.floor(5); // 5Math.floor(-5.05); // -6


주어진 숫자보다 작거나 같은 가장 큰 정수를 반환한다.

Math.froundhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

32 비트 유동 소수 값을 반환한다.

Math.hypothttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot

인수의 제곱 합계의 제곱근을 반환한다.

Math.imulhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

파라미터 값을 곱하고 결과를 32 비트로 변환하여 반환한다.

Math.loghttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log

자연 로그 값을 반환한다.

Math.log1phttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p

log(1 + 인자 값) 을 반환한다.

Math.log10https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10

10 을 밑으로 한 로그 값을 반환한다.

Math.log2https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2

2 를 밑으로 한 로그 값을 반환한다.

Math.maxhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max

인자 중 큰 수를 반환한다.

Math.minhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min

인자 중 작은 수를 반환한다.

Math.powhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow
Math.pow(2, 4); // 16 (2 의 4 승)


제곱값을 반환한다.

Math.randomhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
Math.floor((Math.random() * 5) + 1); // 1 ~ 5 사이의 랜덤 정수Math.floor((Math.random() * 7) + 3); // 3 ~ 10 사이의 랜덤 정수Math.floor((Math.random() * 3) + 1) * 50; // 50, 100, 150 중 랜덤 수&#x27;#&#x27; + Math.round(Math.random()* 0xFFFFFF).toString(16); // 랜덤 색상


0 이상 1 미만 임의의 실수를 반환한다.

Math.roundhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round

반 올림하여 반환한다.

Math.signhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
Math.sign(3); // 1Math.sign(-3); // -1Math.sign(0); // 0Math.sign(&#x27;-3&#x27;); // -1


인수가 양수이면 1 을 반환한다.인수가 음수이면 -1 을 반환한다.인수가 +0 이면 0 을 반환한다.인수가 -0 이면 -0 을 반환한다.그렇지 않으면 NaN 반환한다.

Math.sinhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin

사인 값을 반환한다.

Math.sinhhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh

쌍곡 사인 (hyperbolic sine) 값을 반환한다.

Math.sqrthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt

제곱근을 반환한다.

Math.tanhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan

탄젠트 값을 반환한다.

Math.tanhhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh

쌍곡 탄젠트 (hyperbolic tangent) 값을 반환한다.

Math.trunchttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

소수점을 제거하여 반환한다.

]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>math</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Object</title>
    <url>/javascript-global-objects/object/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object


Static methodsObject.assignhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
Object.assign(null, &#123; a: 1 &#125;); // null 지정 불가Object.assign(123); // Number &#123;[[PrimitiveValue]]: 123&#125;Object.assign(123, 456); // Number &#123;[[PrimitiveValue]]: 123&#125;Object.assign(&#x27;ABC&#x27;, &#123; a: 1 &#125;); // String &#123;0: &quot;A&quot;, 1: &quot;B&quot;, 2: &quot;C&quot;, a: 1, length: 3, [[PrimitiveValue]]: &quot;ABC&quot;&#125;Object.assign(Symbol(&#x27;ABC&#x27;), &#123; a: 1 &#125;); // Symbol &#123;a: 1, [[PrimitiveValue]]: Symbol(ABC)&#125;Object.assign(&#x27;ABC&#x27;, &#x27;DEF&#x27;); // 파라미터 모두 문자열 사용 불가

Object.assign(&#123;&#125;, [&#x27;a&#x27;, &#x27;b&#x27;, &#123; c: 10 &#125;]); // Array to Object: &#123; 0: &#x27;a&#x27;, 1: &#x27;b&#x27;, 2: &#123; c: 10 &#125; &#125;


열거 가능한 모든 자체속성을 하나 이상의 소스 객체에서 대상 객체로 복사한다.

CopyES 5const a = &#123; one: 10, two: [20, &#123; three: 30, four: 40 &#125;] &#125;;// 방법 1const b = JSON.parse(JSON.stringify(a)); // 문자열 변환 직후 객체 형식으로 변환// 방법 2function deepCloneObject(object) &#123;  if (object === null || typeof object !== &#x27;object&#x27;) &#123;    return object;  &#125;  const result = Array.isArray(object) ? [] : &#123;&#125;;  for (let key of Object.keys(object)) &#123;    result[key] = deepCloneObject(object[key]);  &#125;  return result;&#125;const b = deepCloneObject(a);

ES 6const a = &#123; one: 1, two: [2, 3], three: &#123; four: 4 &#125; &#125;;// 방법 1const b = Object.assign(&#123;&#125;, a); // 하위 객체는 참조 됨// 방법 2const b = &#123;  ...a,  two: [...a.two],  three: &#123;...a.three&#125;,&#125;

Mergeconst a = &#123; one: 1 &#125;;const b = &#123; two: 2 &#125;;const c = Object.assign(a, b); // a 와 b 를 병합하여 새로운 c 생성

// get 메서드를 한번 실행 시킴에 주의const object = &#123;  one: 1,  get getValue() &#123;    return ++this.one;  &#125;,&#125;;Object.assign(&#123;&#125;, object); // &#123; one: 1, getValue: 2 &#125;


Object.assign 을 사용하더라도 복합 오브젝트일 경우 내부 오브젝트는 참조가 되므로, deepCloneObject() 함수를 사용하여 재귀 복사를 진행해야 한다.

Object.createhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
const a = &#123;  one: 1,  two ()&#123;    console.log(this.one, this.three);  &#125;,&#125;;const b = Object.create(a);b.one = 2;b.three = 3;b.two(); // 2 3


기존 객체를 새로 작성된 객체의 프로토타입으로 사용하여 새 객체를 작성한다.

Object.definePropertyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty
Object.defineProperty(&#123;&#125;, &#x27;key&#x27;, &#123;  value: 1, // 속성 값  writable: true, // 속성 값 변경 가능  enumerable: true, // 열거 가능  configurable: true, // 프로퍼티 삭제 가능&#125;);


새 특성을 정의하거나 기존 특성을 수정한다.

Object.definePropertieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties
const object = Object.defineProperties(&#123;&#125;, &#123;  one: &#123;    value: 123,    writable: true,  &#125;,  two: &#123;&#125;,&#125;);object.one; // 123


새 특성을 정의하거나 기존 특성을 수정한다.여러 속성을 한번에 적용 할 수 있다.

Object.freezehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
const object = &#123;  a: 123,&#125;;Object.freeze(object);object.a = 0; // Throws an error in strict mode


객체를 고정한다.속성 추가 &#x2F; 수정 &#x2F; 제거, 열거 가능 여부 모두 수정 할 수 없다.

Object.fromEntrieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries
Object.fromEntries([[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2]]); // &#123; a: 1, b: 2 &#125;const entries = new Map([  [&#x27;abc&#x27;, &#x27;def&#x27;],  [&#x27;ghi&#x27;, 123],]);const object = Object.fromEntries(entries);object; // &#123; abc: &quot;def&quot;, ghi: 123 &#125;


키값 목록을 객체로 반환한다.

Object.getOwnPropertyDescriptorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor
const object = &#123; a: 123 &#125;;const descriptor = Object.getOwnPropertyDescriptor(object, &#x27;a&#x27;);descriptor.configurable; // truedescriptor.value; // 123


자체 속성에 대한 속성 설명을 반환한다.객체의 프로토타입 체인이 아닌 객체에 직접 존재하는 설명이다.

Object.getOwnPropertyDescriptorshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors
const object = &#123; a: 123 &#125;;const descriptors = Object.getOwnPropertyDescriptors(object);descriptors.a.writable; // truedescriptors.a.value; // 123


모든 속성 설명자를 반환한다.

Object.getOwnPropertyNameshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames
const object = &#123; a: 1, b: 2 &#125;;Object.getOwnPropertyNames(object); // [&quot;a&quot;, &quot;b&quot;]Object.keys(object); // [&quot;a&quot;, &quot;b&quot;]Object.defineProperties(object, &#123;  a: &#123;    enumerable: false,  &#125;,&#125;);Object.getOwnPropertyNames(object); // [&quot;a&quot;, &quot;b&quot;]Object.keys(object); // [&quot;a&quot;]

const array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];Object.keys(array); // [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;]Object.getOwnPropertyNames(array); // [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;length&quot;]


모든 속성명을 배열로 반환한다.심볼을 제외하고 열거 할 수 없는 속성을 포함한다.

Object.getOwnPropertySymbolshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols
const object = &#123;&#125;;const a = Symbol(&#x27;a&#x27;);const b = Symbol.for(&#x27;b&#x27;);object[a] = &#x27;localSymbol&#x27;;object[b] = &#x27;globalSymbol&#x27;;Object.getOwnPropertySymbols(object).length; // 2


모든 심볼 속성을 배열로 반환한다.

Object.getPrototypeOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf
const prototype = &#123;&#125;;const object = Object.create(prototype);Object.getPrototypeOf(object) === prototype; // true


객체의 프로토타입을 반환한다.

Object.ishttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is

객체를 비교한다.









==
값만 비교


===
값과 타입을 모두 비교


Object.is()
값과 타입을 모두 비교 (더 정확함)


Object.is(1, &#x27;1&#x27;); // false1 === &#x27;1&#x27;; // falseObject.is(null, null); // truenull === null; // trueObject.is(undefined, null); // falseundefined === null; // falseObject.is(0, -0); // false0 === -0; // trueObject.is(NaN, NaN); // trueNaN === NaN; // falseObject.is(Number.NaN, Number.NaN); // trueNumber.NaN === Number.NaN; // falseObject.is(NaN, Number.NaN); // trueNaN === Number.NaN; // falseObject.is(NaN, 0/0); // trueNaN === 0/0; // false

function isObject(object) &#123;  return object != null &amp;&amp; typeof object === &#x27;object&#x27;;&#125;function deepEqualObject(object1, object2) &#123;  const keys1 = Object.keys(object1);  const keys2 = Object.keys(object2);  if (keys1.length !== keys2.length) &#123;    return false;  &#125;  for (const key of keys1) &#123;    const val1 = object1[key];    const val2 = object2[key];    const areObjects = isObject(val1) &amp;&amp; isObject(val2);        if (areObjects &amp;&amp; !deepEqualObject(val1, val2) || !areObjects &amp;&amp; val1 !== val2) &#123;      return false;    &#125;  &#125;  return true;&#125;const object1 = &#123;  a: 1,  b: &#123;    c: 2,  &#125;,&#125;;const object2 = &#123;  a: 1,  b: &#123;    c: 2,  &#125;,&#125;;deepEqualObject(object1, object2); // true

Object.isExtensiblehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
const object = &#123;&#125;;Object.isExtensible(object); // trueObject.preventExtensions(object); // &#123;&#125;Object.isExtensible(object); // false


새 속성을 추가 할 수 있는지 여부를 반환한다.

Object.isFrozenhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
const object = &#123;&#125;;Object.isFrozen(object); // falseObject.freeze(object); // &#123;&#125;Object.isFrozen(object); // true


객체의 고정 여부를 반환한다.

Object.isSealedhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
const object = &#123;&#125;;Object.isSealed(object); // falseObject.seal(object);Object.isSealed(object); // true


객체의 봉인 여부를 반환한다.

Object.keyshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
const object = &#123; a: &#x27;abc&#x27;, b: 123, c: false &#125;;Object.keys(object); // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]


객체의 자체 열거 가능 속성 이름의 배열을 반환하며, 일반 루프와 동일한 순서로 반복한다.

Object.valueshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
Object.values(&#123; 0: &#x27;a&#x27;, 1: &#x27;b&#x27;, 2: &#123; c: 10 &#125; &#125;); // Object to Array: [&#x27;a&#x27;, &#x27;b&#x27;, &#123; c: 10 &#125;]


for-in 루프에서 제공한 순서와 동일한 순서로 지정된 객체 자체 열거 가능 속성 값의 배열을 반환한다.프로토타입 체인의 속성도 열거한다.

Object.entrieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries
const object = Object.entries(&#123; one: &#x27;abc&#x27;, two: 123 &#125;); // [[&quot;one&quot;, &quot;abc&quot;], [&quot;two&quot;, &quot;123&quot;]]for (const [key, value] of Object.entries(object)) &#123;console.log(`$&#123;key&#125;: $&#123;value&#125;`);&#125;// one: abc// two: 123


객체를 배열로 반환한다.프로토타입 체인의 속성도 열거 가능하다.

Object.preventExtensionshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions
const object = &#123;&#125;;Object.preventExtensions(object);try &#123;  Object.defineProperty(object, &#x27;a&#x27;, &#123;    value: 123,  &#125;);&#125; catch (error) &#123;  console.log(error); // TypeError: Cannot define property property1, object is not extensible&#125;


새로운 속성이 객체에 추가되는 것을 제한한다.

Object.sealhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal
const object = &#123; a: 100 &#125;;Object.seal(object);object.a = 200;object.a; // 200delete object.a; // cannot delete when sealed


객체를 봉인하여 새로운 속성이 추가되지 않도록 하고 기존의 모든 속성을 구성 할 수없는 것으로 표시한다.현재 속성의 값은 쓰기 가능한 한 계속 변경 할 수 있다.

Object.setPrototypeOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf
const Example = function() &#123;&#125;;Example.prototype.method = function() &#123;  return 123;&#125;;const object = Object.setPrototypeOf(&#123;&#125;, Example.prototype); // 참조. 프로토타입 공유object.method();// __proto__ 과 prototypeconst Example = function() &#123;  this.a = 1;&#125;;Example.prototype.method = function() &#123;&#125;; // Example.prototype: 상속해 줄 객체const instance = new Example(); // instance.__proto__: 상속 받은 객체instance.__proto__ === Example.prototype; // true


객체의 프로토타입을 다른 객체로 설정한다.

Instance propertiesconstructorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor
__proto__https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto
Instance methods__defineGetter__https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__
__defineSetter__https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__
__lookupGetter__https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__
__lookupSetter__https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__
hasOwnPropertyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty
const object = &#123; a: 1 &#125;;&#x27;a&#x27; in object; // true&#x27;constructor&#x27; in object; // true&#x27;__proto__&#x27; in object; // true&#x27;toString&#x27; in object; // trueobject.hasOwnProperty(&#x27;a&#x27;); // trueobject.hasOwnProperty(&#x27;constructor&#x27;); // falseobject.hasOwnProperty(&#x27;__proto__&#x27;); // falseobject.hasOwnProperty(&#x27;toString&#x27;); // false

class Example &#123;  get method() &#123;    return 1;  &#125;&#125;const instance = new Example();instance.method; // 1&#x27;method&#x27; in instance; // trueinstance.hasOwnProperty(&#x27;method&#x27;); // false

isPrototypeOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf
propertyIsEnumerablehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable
toLocaleStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString
toStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString
valueOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>object</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Number</title>
    <url>/javascript-global-objects/number/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number


Binary octalBinaryES 5// 불가능

ES 60b00001111; // 150b0101; // 5

OctalES 5017; // 15

ES 60o17; // 150o0101; // 65

Static propertiesNumber.EPSILONhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON
0.1 + 0.2; // 0.30000000000000004

ES 5(Math.pow(10, 1) * 0.1 + Math.pow(10, 1) * 0.2) / 10; // 0.3

ES 6function epsilonEqual(a, b) &#123;  return Math.abs(a - b) &lt; Number.EPSILON;&#125;epsilonEqual(0.1 + 0.2, 0.3); // true


Number 형으로 표현될 수 있는 1 과 1 보다 큰 값 중에서 가장 작은 값의 차이다.
IEEE-754 부동소수점 표현 방식은 1/2, 1/1024 같은 분수를 정확하게 표현할 수 있다.하지만 가장 많이 사용하는 분수는 10진수 분수로 1/10, 1/100 등이다.
이진 실수 표현은 단순히 0.1 과 같은 값을 정확하게 표현할 수 없다.자바스크립트에서 숫자는 높은 정밀도를 가지고 있어서 0.1 에 근사한 근사치를 낼 수 있지만,정확하게 표현할 수 없다는 점은 문제를 야기할 수 있다.

Number.MAX_SAFE_INTEGERhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER
Number.MAX_SAFE_INTEGER; // 9007199254740991


자바스크립트에서 안전한 최대 정수 값이다.

Number.MAX_VALUEhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE
function multiply(x, y) &#123;  if (x * y &gt; Number.MAX_VALUE) &#123;    return (&#x27;Process as Infinity&#x27;);  &#125;  return (x * y);&#125;multiply(1.7976931348623157e+308, 1); // 1.7976931348623157e+308multiply(1.7976931348623157e+308, 2); // Process as Infinity


자바스크립트에서 표현할 수 있는 가장 큰 양의 숫자 값이다.

Number.MIN_SAFE_INTEGERhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER
Number.MIN_SAFE_INTEGER; // -9007199254740991


자바스크립트에서 안전한 최소 정수 값이다.

Number.MIN_VALUEhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE
function multiply(x, y) &#123;  if (x * y &lt; Number.MIN_VALUE) &#123;    return &#x27;Process as -Infinity&#x27;;  &#125;  return (x * y);&#125;multiply(5e-324, 1); // 5e-324multiply(-1.7976931348623157e+308, 2); // Process as -Infinity


자바스크립트에서 표현할 수 있는 가장 작은 양의 숫자 값이다.

Number.NaNhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN
function clean(x) &#123;  if (x === Number.NaN) &#123;    return null;  &#125;  if (isNaN(x)) &#123;    return 0;  &#125;&#125;clean(Number.NaN); // 0


숫자가 아님 (Not a Number) 을 뜻한다.

Number.NEGATIVE_INFINITYhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY
function checkNumber(smallNumber) &#123;  if (smallNumber === Number.NEGATIVE_INFINITY) &#123;    return &#x27;Process number as -Infinity&#x27;;  &#125;  return smallNumber;&#125;checkNumber(-Number.MAX_VALUE); // -1.7976931348623157e+308checkNumber(-Number.MAX_VALUE * 2); // Process number as -Infinity


음의 무한대이다.산술 연산의 결과가 표현할 수 있는 가장 작은 값보다 더 0 에 가까울 때 발생, 이런 경우에 자바스크립트는 0 을 반환한다.

Number.POSITIVE_INFINITYhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY
function checkNumber(bigNumber) &#123;  if (bigNumber === Number.POSITIVE_INFINITY) &#123;    return &#x27;Process number as Infinity&#x27;;  &#125;  return bigNumber;&#125;checkNumber(Number.MAX_VALUE); // 1.7976931348623157e+308checkNumber(Number.MAX_VALUE * 2); // Process number as Infinity


양의 무한대이다.산술 연산의 결과가 표현할 수 있는 가장 큰 수보다 더 크다면 오버플로, 자바스크립트에서 Infinity 라고 표현하는 무한대의 값이다.

Static methodsNumber.isFinitehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite
Number.isFinite(1 / 0); // falseNumber.isFinite(0 / 0); // falseNumber.isFinite(10 / 5); // true


주어진 값이 유한수인지 판별한다.

Number.isIntegerhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
function fits(x, y) &#123;  if (Number.isInteger(y / x)) &#123;    return &#x27;Fits!&#x27;;  &#125;  return &#x27;Does NOT fit!&#x27;;&#125;fits(5, 10); // Fits!fits(5, 11); // Does NOT fit!


주어진 값이 정수인지 판별한다.

Number.isNaNhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN
Number.isNaN(NaN); // trueisNaN(NaN); // trueNumber.isNaN(Number.NaN); // trueisNaN(Number.NaN); // trueNumber.isNaN(0 / 0); // trueisNaN(0 / 0); // trueNumber.isNaN(null); // falseisNaN(null); // falseNumber.isNaN(true); // falseisNaN(true); // falseNumber.isNaN(&#x27;&#x27;); // falseisNaN(&#x27;&#x27;); // falseNumber.isNaN(undefined); // falseisNaN(undefined); // trueNumber.isNaN(&#123;&#125;); // falseisNaN(&#123;&#125;); // trueNumber.isNaN(&#x27;NaN&#x27;); // falseisNaN(&#x27;NaN&#x27;); // true


주어진 값이 숫자가 아닌지 판별한다.

Number.isSafeIntegerhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger
function warn(x) &#123;  if (Number.isSafeInteger(x)) &#123;    return &#x27;Precision safe.&#x27;;  &#125;  return &#x27;Precision may be lost!&#x27;;&#125;warn(Math.pow(2, 53)); // Precision may be lost!warn(Math.pow(2, 53) - 1); // Precision safe.


주어진 값이 안전한 정수값인지 확인한다.

Number.parseFloathttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat
function circumference(r) &#123;  if (Number.isNaN(Number.parseFloat(r))) &#123;    return 0;  &#125;  return parseFloat(r) * 2.0 * Math.PI ;&#125;circumference(&#x27;4.567abcdefgh&#x27;); // 28.695307297889173circumference(&#x27;abcdefgh&#x27;); // 0


문자열을 분석해 부동소수점 실수로 반환한다.

Number.parseInthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt
function roughScale(x, base) &#123;  const parsed = Number.parseInt(x, base);  if (Number.isNaN(parsed)) &#123;    return 0;  &#125;  return parsed * 100;&#125;roughScale(&#x27; 0xF&#x27;, 16); // 1500roughScale(&#x27;321&#x27;, 2); // 0

parseInt(&#x27;2개&#x27;); // 2Number(&#x27;2개&#x27;); // NaN


문자열을 분석하고 특정 진수를 사용한 정수로 변환해 반환한다.

Instance methodstoExponentialhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential
toFixedhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed
const number = 1.23456789;number.toFixed(1); // 1.2number.toFixed(3); // 1.234


소수점을 지정한 개수만큼 표시한다.

toLocaleStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString
const number = 12345.6789;number.toLocaleString(); // 12,345.679number.toLocaleString(&#x27;de-DE&#x27;); // 12.345,679number.toLocaleString(&#x27;ko-KR&#x27;, &#123; style: &#x27;currency&#x27;, currency: &#x27;KRW&#x27; &#125;); // ₩12,346number.toLocaleString(&#x27;en-US&#x27;, &#123; style: &#x27;currency&#x27;, currency: &#x27;USD&#x27; &#125;); // $12,345.68number.toLocaleString(&#x27;ja-JP&#x27;, &#123; style: &#x27;currency&#x27;, currency: &#x27;JPY&#x27; &#125;); // ￥12,346number.toLocaleString(&#x27;de-DE&#x27;, &#123; style: &#x27;currency&#x27;, currency: &#x27;EUR&#x27; &#125;); // 12.345,68 €number.toLocaleString(&#x27;en-US&#x27;, &#123; notation: &#x27;compact&#x27;, compactDisplay: &#x27;short&#x27; &#125;); // 12Knumber.toLocaleString(&#x27;en-US&#x27;, &#123; notation: &#x27;compact&#x27;, compactDisplay: &#x27;long&#x27; &#125;); // 12 thousandnumber.toLocaleString(&#x27;en-US&#x27;, &#123; style: &#x27;percent&#x27;, minimumFractionDigits: 2 &#125;); // 1,234,567.89%

toPrecisionhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision
toStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString
valueOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf
ExamplesNumeric with commaconst numericWithComma = (value) =&gt; &#123;  if (value === undefined) return false;  return new Intl.NumberFormat().format(value);&#125;;
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>number</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Operators</title>
    <url>/javascript-global-objects/operators/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators


Priority


연산자 (우선순위 높은 순서)
종류



맴버 연산자
. []


객체 호출&#x2F;생성 연산자
() new


부정&#x2F;증가 연산자
! ~ - + ++ -- typeof void delete


곱셈&#x2F;나눗셈 연산자
* / %


덧셈&#x2F;뺄셈 연산자
+ -


비트단위 시프트 연산자
&lt;&lt; &gt;&gt; &gt;&gt;&gt;


관계 연산자
&lt; &lt;= &gt; &gt;= in instanceof


같음 비교 연산자
== != === !==


비트 단위 논리곱 연산자
&amp;


비트단위 배타적 논리합 연산자
^


비트단위 논리합 연산자
|


논리 곱 연산자
&amp;&amp;


논리 합 연산자
||


조건 연산자
?:


할당 연산자
= += -= *= /= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^= |=


콤마 연산자
,


Assignmenthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#assignment_operators



이름
복합 할당 연산자
뜻



할당
x = y
x = y


덧셈 할당
x += y
x = x + y


뺄셈 할당
x -= y
x = x - y


곱셈 할당
x *= y
x = x * y


나눗셈 할당
x /= y
x = x / y


나머지 연산 할당
x %= y
x = x % y


지수 연산 할당
x **= y
x = x ** y


왼쪽 이동 연산 할당
x &lt;&lt;= y
x = x &lt;&lt; y


오른쪽 이동 연산 할당
x &gt;&gt;= y
x = x &gt;&gt; y


부호 없는 오른쪽 이동 연산 할당
x &gt;&gt;&gt;= y
x = x &gt;&gt;&gt; y


비트 AND 할당
x &amp;= y
x = x &amp; y


비트 XOR 할당
x ^= y
x = x ^ y


비트 OR 할당
x |= y
x = x | y


논리적 AND 할당
x &amp;&amp;= f()
x &amp;&amp; (x = f())


논리적 OR 할당
x ||= f()
x || (x = f())


논리적 무효 할당
x ??= f()
x ?? (x = f())


Comparisonhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#comparison_operators
const a = 3;const b = 4;




연산자
설명
참을 반환하는 예제



== (동등)
피연산자들이 같으면 참을 반환
3 == a &#39;3&#39; == a 3 == &#39;3&#39;


!= (부등)
피연산자들이 다르면 참을 반환
a != 4 b != &#39;3&#39;


=== (일치)
피연산자들이 같고 피연산자들의 같은 형태인 경우 참을 반환
3 === a


!== (불일치)
피연산자들이 다르거나 형태가 다른 경우 참을 반환
a !== &#39;3&#39; 3 !== &#39;3&#39;


&gt; (보다 큰)
좌변의 피연산자 보다 우변의 피연산자가 크면 참을 반환
b &gt; a &#39;12&#39; &gt; 2


&gt;= (보다 크거나 같음)
좌변의 피연산자 보다 우변의 피연산자가 크거나 같으면 참을 반환
b &gt;= a a &gt;= 3


&lt; (보다 작음)
좌변의 피연산자 보다 우변의 피연산자가 작으면 참을 반환
a &lt; b &#39;2&#39; &lt; 12


&lt;= (보다 작거나 같음)
좌변의 피연산자 보다 우변의 피연산자가 작거나 같으면 참을 반환
a &lt;= b b &lt;= 5


Arithmetichttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#arithmetic_operators
1 / 2; // 0.51 / 2 == 1.0 / 2.0; // this is true




연산자
설명
예제



% (나머지)
이항 연산자. 두 피연산자를 나눈후 나머지를 반환
12 % 5 는 2 를 반환


++ (증가)
단항 연산자. 피연산자에 1 을 더함
x 가 3 일때, ++x 는 x 를 4 로 만들고 4 를 반환. x++ 는 3 을 반환하고 x 를 4 로 만듬


-- (감소)
단항 연산자. 피연산자에 1 을 뺌
x 가 3 일때, --x 는 x 를 2 로 만들고 2 를 반환. x-- 는 3 을 반환하고 x 를 2 로 만듬


- (단항 부정)
단항 연산자. 피연산자의 부호를 변경한 값을 반환
x 가 3 이면 -x 는 -3 을 반환


+ (숫자화)
단항 연산자. 피연산자가 숫자값이 아니라면 피연산자를 숫자로 변환하기를 시도
+&#39;3&#39; 은 3 을 반환. +true 는 1 을 반환


**
지수 연산자. 거듭제곱을 계산
2 ** 3 은 8 을 반환. 10 ** -1 은 0.1 을 반환


Bitwisehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#bitwise_operators



연산자
사용법
설명



비트단위 논리곱
a &amp; b
두 피연산자의 각 자리 비트의 값이 둘다 1 일 경우 해당하는 자리에 1 을 반환


비트단위 논리합
a | b
두 피연산자의 각 자리 비트의 값이 둘다 0 일 경우 해당하는 자리에 0 을 반환


비트단위 배타적 논리합
a ^ b
두 피연산자의 각 자리 비트의 값이 같을 경우 해당하는 자리에 0 을 반환 (두 피연산자의 각 자리 비트의 값이 다를 경우 해당하는 자리에 1 을 반환)


비트단위 부정
~ a
피연산자의 각 자리의 비트를 반전


왼쪽 시프트
a &lt;&lt; b
오른쪽에서 0 들을 이동시키면서, a 의 이진수의 각 비트를 b 비트 만큼 왼쪽으로 이동시킨 값을 반환


부호 전파 오른쪽 시프트
a &gt;&gt; b
사라지는 비트를 버리면서, a 의 이진수의 각 비트를 b 비트만큼 이동시킨값을 반환


부호 없는 오른쪽 시프트
a &gt;&gt;&gt; b
사라지는 비트를 버리고 왼쪽에서 0 을 이동시키면서, a 의 이진수의 각 비트를 b 비트 만큼 이동시킨 값을 반환


Logicalhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#logical_operators
x &amp;&amp;= y; // x &amp;&amp; (x = y)x ||= y; // x || (x = y)x ??= y; // x ?? (x = y)




연산자
구문
설명



&amp;&amp; (논리 AND)
a &amp;&amp; b
a 을 true 로 변환할 수 있는 경우 b 을 반환하고, 그렇지 않으면 a 을 반환


|| (논리 OR)
a || b
a 을 true 로 변환할 수 있으면 a 을 반환하고, 그렇지 않으면 b 를 반환


! (논리 NOT)
!expression
단일 피연산자를 true 로 변환할 수 있으면 false 를 반환. 그렇지 않으면 true 를 반환


Stringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#string_operators
&#x27;a&#x27; + &#x27;b&#x27;; // ablet string = &#x27;a&#x27;;string += &#x27;b&#x27;; // ab

Conditionalhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#conditional_ternary_operator
const boolean = (number &gt; 10) ? true : false;

Commahttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#comma_operator
const a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];const b = [a, a, a, a, a];for (let i = 0, j = 9; i &lt;= j; i++, j--) &#123;  console.log(`b[$&#123;i&#125;][$&#123;j&#125;]=$&#123;b[i][j]&#125;`);&#125; // b[0][9]=9 b[1][8]=8 b[2][7]=7 b[3][6]=6 b[4][5]=5

Unaryhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#unary_operators
deletea = 42;var b = 43;myobj = new Number();myobj.h = 4;delete a; // true (can delete if declared implicitly)delete b; // false (cannot delete if declared with var)delete Math.PI; // false (cannot delete predefined properties)delete myobj.h; // true (can delete user-defined properties)delete myobj; // true (can delete if declared implicitly)

var array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;];delete array[3];if (3 in array) &#123;  // this does not get executed&#125;

var array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;];array[3] = undefined;if (3 in array) &#123;  // this gets executed&#125;

typeoftypeof true; // &quot;boolean&quot;typeof null; // &quot;object&quot;typeof abc; // &quot;undefined&quot;typeof &#x27;round&#x27;; // &quot;string&quot;typeof 1; // &quot;number&quot;typeof [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]; // &quot;object&quot;typeof new Date(); // &quot;object&quot;typeof new Function(&#x27;5 + 2&#x27;); // &quot;function&quot;

void&lt;a href=&quot;javascript:void(0)&quot;&gt;Click here to do nothing&lt;/a&gt;&lt;a href=&quot;javascript:void(document.form.submit())&quot;&gt;Click here to submit&lt;/a&gt;


구문은 실행되나, 현재의 문서에는 로드되지 않는다.void(0) 은 undefined 로 평가된다.javascript: 구문을 사용하는 것은 보안문제가 발생할 수 있으므로 사용을 지양한다.

Relationalhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#relational_operators
in// Arraysvar array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;];3 in array; // true6 in array; // false&#x27;4&#x27; in array; // true (인덱스로 확인)&#x27;a&#x27; in array; // false (요소 찾는 기능이 아님)&#x27;length&#x27; in array; // true (length 는 array 의 속성)// built-in objects&#x27;length&#x27; in new String(&#x27;a&#x27;); // true&#x27;PI&#x27; in Math; // true// Custom objectsconst object = &#123; a: &#x27;abc&#x27;, b: 123 &#125;;&#x27;a&#x27; in object; // true

instanceofconst date = new Date();date instanceof Date; // truedate instanceof Object; // truedate instanceof Number; // false


모든 객체는 Object 의 인스턴스이다.

Spreadhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
// Stringconst a = [...&#x27;abcde&#x27;];a; // [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]// Arrayconst a = [1, 2];const b = [10, 20];const array = [100, ...a, 200, ...b];array; // [100, 1, 2, 200, 10, 20]array.length; // 6// Function parameterconst array = [10, 20, 30];function fn(a, b, c) &#123;  console.log(a, b, c);&#125;fn(...array); // 10 20 30// restconst fn = (...rest) =&gt; &#123;  console.log(rest);&#125;;fn(...[1, 2, 3]); // [1, 2, 3]const fn = (p, ...rest) =&gt; &#123;  console.log(p, rest);&#125;;fn(...[1, 2, 3]); // 1 [2, 3]

Destructuring assignmenthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
ArrayES 5var array = [1, 2];var a = array[0];var b = array[1];

ES 6const [a, b, c] = [1, 2, 3];const [a, b] = [1, 2, 3];const [a, b, c, d] = [1, 2, 3];const [a, b, [c, d]] = [1, 2, [3, 4]];const [a, , c] = [1, 2, 3];const [a, ...b] = [1, 2, 3];const [a, b, c = 3] = [1, 2, 10];const [a, b = a + 1] = [1]; // 왼쪽에서 오른쪽으로 디폴트값 적용function fn ([a, b = 2] = [1, 3]) &#123;  console.log(a, b);&#125;fn(undefined); // 1 3

ObjectES 5var a = 1, b = 2;var object = &#123; a: a, b: b &#125;;var object = &#123; a: 1, b: 2 &#125;;var a = object.a;var b = object.b;

ES 6const a = 1, b = 2;const object = &#123; a, b &#125;;const &#123; a, b &#125; = &#123; a: 1, b: 2 &#125;;const &#123; a, b: &#123; c &#125; &#125; = &#123; a: 1, b: &#123; c: 10 &#125; &#125;;const &#123; a, b = 7 &#125; = &#123; a: 1 &#125;;function fn (&#123; a = 3, b = 4, c = 5 &#125; = &#123;&#125;) &#123;  console.log(a, b, c);&#125;fn(&#123; a: 1, b: 2 &#125;); // 1 2 5

Optional chaininghttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining
const animal = &#123;  cat: &#123;    name: &#x27;abc&#x27;,  &#125;&#125;;console.log(animal.dog?.name); // undefinedconsole.log(animal.method?.()); // undefined
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>operators</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Promise</title>
    <url>/javascript-global-objects/promise/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise


Static methodsfunction create() &#123;  // pending  return new Promise(function(resolve, reject) &#123;    resolve();    console.log(&#x27;1: resolve&#x27;);  &#125;);&#125;// settledcreate().then(  function() &#123;    console.log(&#x27;3: success&#x27;); // fulfill  &#125;,  function() &#123;    console.log(&#x27;3: fail&#x27;); // reject  &#125;,);console.log(&#x27;2: end&#x27;);

function create() &#123;  return new Promise((resolve, reject) =&gt; &#123;    setTimeout(() =&gt; &#123;      resolve();    &#125;, 5000);  &#125;);&#125;async function() &#123;  try &#123;    await create();  catch (error) &#123;    console.log(error);  &#125;&#125;









pending (대기)
이행되거나 거부되지 않은 초기 상태


fulfilled (이행)
성공적으로 완료된 상태


rejected (거부)
실패한 상태


settled (처리)
대기중이지 않으며 이행되거나 거부되었을 때 처리되었다고 함


Promise.allhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all
function order(ms) &#123;  return new Promise((resolve, reject) =&gt; &#123;    setTimeout(() =&gt; &#123;      console.log(&#x27;run&#x27;, ms);      (ms &gt; 2000) ? reject(&#x27;fail&#x27;) : resolve(ms);    &#125;, ms);  &#125;);&#125;Promise.all([order(1000), order(500), order(1500)]).then((ms) =&gt; console.log(&#x27;done&#x27;, ms));Promise.all([order(1000), order(500), order(2500)]).then(  (ms) =&gt; console.log(&#x27;done&#x27;, ms),  (error) =&gt; console.log(&#x27;done&#x27;, error),);


모든 프로미스가 이행되거나, 하나라도 거부되었을 때 프로미스 객체를 반환한다.

Promise.allSettledhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled

모든 프로미스를 이행하거나 거부한 후, 각 프로미스에 대한 결과를 나타내는 객체 배열을 반환한다.

Promise.anyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any

단 하나라도 프로미스가 이행되면 프로미스 객체를 반환한다.

Promise.racehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race
function order(ms) &#123;  return new Promise((resolve, reject) =&gt; &#123;    setTimeout(() =&gt; &#123;      console.log(ms);      resolve(ms);    &#125;, ms);  &#125;);&#125;Promise.race([order(1000), order(500), order(1500)]).then((ms) =&gt; console.log(&#x27;done&#x27;, ms));


가장 먼저 처리된 프로미스를 반환한다.

Promise.rejecthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject
Promise.reject(&#x27;reject!&#x27;).then(  (param) =&gt; console.log(&#x27;success&#x27;, param),  (param) =&gt; console.log(&#x27;fail&#x27;, param),);

const error = new Error(&#x27;error!&#x27;);Promise.reject(error).then(  (param) =&gt; console.log(&#x27;success&#x27;, param),  (param) =&gt; console.log(&#x27;fail&#x27;, param),);Promise.reject(error).catch(  (error) =&gt; console.log(error.message),);Promise.reject(error).then(  (param) =&gt; console.log(&quot;success&quot;, param),  (param) =&gt; console.log(&quot;fail&quot;, param),);

Promise.resolvehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve
Promise.resolve([&#x27;a&#x27;, &#x27;b&#x27;]).then((param) =&gt; console.log(param));

Promise.resolve(&#123; a: 1, b: 2 &#125;).then((param) =&gt; &#123;  for (let name in param) &#123;    console.log(name, param[name]);  &#125;&#125;);

const promise = Promise.resolve(&#123;  then(resolve, reject) &#123;    console.log(&#x27;then&#x27;);    resolve(&#x27;thenable&#x27;);    reject(&#x27;not&#x27;); // 실행 안됨  &#125;&#125;);promise.then((param) =&gt; console.log(param));

Instance methodscatchhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch
function create(param) &#123;  return new Promise((resolve, reject) =&gt; &#123;    (param === &#x27;ok&#x27;) ? resolve(param) : reject(param);  &#125;);&#125;create(&#x27;fail&#x27;).then(  (param) =&gt; &#123;    console.log(&#x27;success&#x27;);  &#125;,).catch(  (param) =&gt; &#123;    console.log(&#x27;catch fail&#x27;);  &#125;,);create(&#x27;fail&#x27;).then(  (param) =&gt; &#123;    console.log(&#x27;success&#x27;);  &#125;,  (param) =&gt; &#123;    console.log(&#x27;fail&#x27;);    throw &#x27;error&#x27;;  &#125;,).catch(  (param) =&gt; &#123;    console.log(&#x27;catch fail&#x27;, param);  &#125;,).then(  (param) =&gt; &#123;    console.log(&#x27;1: end&#x27;, param);  &#125;,  (param) =&gt; &#123;    console.log(&#x27;2: end&#x27;, param);  &#125;,);

thenhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then
function create() &#123;  return new Promise((resolve) =&gt; resolve(100));&#125;create().then(() =&gt; console.log(&#x27;1&#x27;));create().then(  (param) =&gt; &#123;    console.log(&#x27;2&#x27;, param);    return param + 50;  &#125;,);create().then(  (param) =&gt; &#123;    console.log(&#x27;3&#x27;, param);    return param + 1000;  &#125;,).then(  (param) =&gt; console.log(&#x27;4&#x27;, param),);

finallyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>promise</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Proxy</title>
    <url>/javascript-global-objects/proxy/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy


Static methods// 직접 요청const object = &#123; a: 0 &#125;;object.a = 1; // setterobject.a; // getter [[Get]] 빌트인 메서드 호출 1// 간접 요청const object = &#123; a: 0 &#125;;const proxy = new Proxy(object, &#123;&#125;);// target: native array, function, 다른 proxy 을 포함한 객체// &#123;&#125; 핸들러 (프로퍼티들이 함수인 객체)proxy.a; // 0


기존 오프젝트를 직접 변형하지 않고 한단계 거쳐서 사용하는 것이 프록시의 주 목적이다.기본적인 동작 (속성 접근, 할당, 순회, 열거, 함수호출 등) 의 새로운 행동을 정의할 때 사용한다.

Proxy.revocablehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable
const revocableObject = Proxy.revocable(&#123; a: 0 &#125;, &#123;  get(target, key) &#123;    return target[key];  &#125;&#125;);revocableObject.proxy.a; // 0revocableObject.revoke();revocableObject.proxy.a; // Error


무효화를 위한 오브젝트를 생성하여 반환한다. (프록시 취소)

Handlerconst handler = &#123;  b: 1,  set() &#123;    console.log(this.b); // 1 (일반 함수에서 this 는 프록시의 handler)    this.c = 2;    return true;  &#125;,  get: () =&gt; &#123;    console.log(this === window); // true (화살표 함수에서 this 는 window)  &#125;&#125;;const proxy = new Proxy(&#123; a: 0 &#125;, handler);handler.c; // undefinedproxy.d = 3; // handler.set() 이 실행됨handler.c; // 2proxy.a; // true

applyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/apply
function getValue(...value) &#123;  return value.reduce(function(previous, current) &#123;    return previous + current;  &#125;);&#125;const proxy = new Proxy(getValue, &#123;  apply(target, thisObject, args) &#123; // 함수 호출 바인드    return target.apply(thisObject, args);  &#125;&#125;);proxy(10, 20, 30); // 60proxy.apply(&#x27;&#x27;, [10, 20, 30]); // 60proxy.call(&#123; add: 100 &#125;, 10, 20, 30); // 60

constructhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/construct
functionfunction fn(value) &#123;  this.value = value;&#125;const proxy = new Proxy(fn, &#123; // 함수로 인스턴스 생성  construct(target, args, newTarget) &#123;    return new target(...args);  &#125;&#125;);new proxy(&#x27;a&#x27;).value; // a

classclass Example &#123;  constructor(value) &#123;    this.value = value;  &#125;&#125;const proxy = new Proxy(Example, &#123; // 클래스로 인스턴스 생성  constructor(target, args, newTarget) &#123;    return new target(...args);  &#125;&#125;);new proxy(&#x27;a&#x27;).value; // a

definePropertyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty
const object = &#123;&#125;;const proxy = new Proxy(object, &#123;  defineProperty(target, key, descriptor) &#123; // 프로퍼티를 추가하거나 값을 변경    descriptor.value = descriptor.value + &#x27;!&#x27;;    Object.defineProperty(target, key, descriptor);    return true;  &#125;&#125;);Object.defineProperty(proxy, &#x27;a&#x27;, &#123;  value: &#x27;0&#x27;,  writable: true,  configurable: true,&#125;);object; // &#123; a: &quot;0!&quot; &#125;

deletePropertyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty
const object = &#123; a: 0, b: 1 &#125;;const proxy = new Proxy(object, &#123;  deleteProperty(target, key) &#123; // 프로퍼티 삭제    return delete target[key];  &#125;&#125;);delete proxy.a; // truedelete proxy.c; // true (대상이 없어도 true 반환하는 것에 주의)Object.seal(object); // 프로퍼티를 추가하거나 존재하는 프로퍼티를 삭제할 수 없도록 설정 (configurable: false)const descriptor = Object.getOwnPropertyDescriptor(object, &#x27;b&#x27;);descriptor; // &#123; value: 1, writable: true, enumerable: true, configurable: false &#125;if (descriptor.configurable) &#123;  console.log(delete proxy.b);&#125; else &#123;  console.log(&#x27;삭제 불가&#x27;);&#125;

gethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get
const proxy = new Proxy(&#123; a: 0 &#125;, &#123;  get(target, key, receiver) &#123; // 프로퍼티 값을 반환    return `($&#123;target[key]&#125;)`;  &#125;&#125;);proxy.a; // (0)

const proxy = new Proxy([10, 20], &#123;  get(target, key, receiver) &#123;    return target[0] + target[1];  &#125;&#125;);proxy.a; // 30

getOwnPropertyDescriptorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor
const object = Object.defineProperty(&#123;&#125;, &#x27;a&#x27;, &#123; value: 0, configurable: true &#125;);const proxy = new Proxy(object, &#123;  getOwnPropertyDescriptor(target, key) &#123; // 디스크립터 반환    const descriptor = Object.getOwnPropertyDescriptor(target, key);    if (descriptor.configurable) &#123;      return &#123; configurable: true, enumerable: true, value: &#x27;100&#x27; &#125;    &#125;  &#125;&#125;);Object.getOwnPropertyDescriptor(proxy, &#x27;a&#x27;); // &#123; value: &quot;100&quot;, writable: false, enumerable: true, configurable: true &#125;

getPrototypeOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getPrototypeOf
class Example &#123;  getValue() &#123;    return &#x27;a&#x27;;  &#125;&#125;const instance = new Example();const proxy = new Proxy(instance, &#123;  getPrototypeOf(target) &#123; // prototype 반환    return Object.getPrototypeOf(target);  &#125;&#125;);Object.getPrototypeOf(proxy); // &#123; constructor: function, getValue: function &#125;proxy.__proto__; // &#123; constructor: function, getValue: function &#125;Example.prototype.isPrototypeOf(proxy); // trueObject.prototype.isPrototypeOf(proxy); // true

hashttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/has
const proxy = new Proxy(&#123; a: 0 &#125;, &#123;  has(target, key) &#123; // 프로퍼티 키 존재 여부를 반환    return key in target;  &#125;&#125;);&#x27;a&#x27; in proxy; // true&#x27;b&#x27; in proxy; // false

const object = &#123; a: 0 &#125;;Object.preventExtensions(object); // 프로퍼티를 추가할 수 없는 상태로 설정 (한번 설정하면 취소불가)const proxy = new Proxy(object, &#123;  has(target, key) &#123;    return target[key];  &#125;&#125;);&#x27;a&#x27; in proxy; // Error&#x27;b&#x27; in proxy; // Error

isExtensiblehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/isExtensible
const object = &#123;&#125;;const proxy = new Proxy(object, &#123;  isExtensible(target) &#123; // 프로퍼티 추가 가능 여부    return Object.isExtensible(target);  &#125;&#125;);Object.isExtensible(proxy); // trueObject.preventExtensions(object); // 프로퍼티 추가 금지 제한Object.isExtensible(proxy); // false

ownKeyshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys
const object = Object.defineProperties(&#123;&#125;, &#123;  a: &#123; value: 0, enumerable: true &#125;,  b: &#123; value: 1 &#125;,&#125;);const proxy = new Proxy(object, &#123;  ownKeys(target) &#123; // 프로퍼티 키를 배열로 반환    // getOwnPropertyNames, keys, getOwnPropertySymbols, Reflect.ownKeys 가 실행되면 호출    return Object.getOwnPropertyNames(target);    // return Object.keys(target); // 트랩의 원래 기능을 변경하면 에러가 발생  &#125;&#125;);Object.getOwnPropertyNames(proxy); // [&quot;a&quot;, &quot;b&quot;]Object.keys(proxy); // [&quot;a&quot;]

preventExtensionshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/preventExtensions
const object = &#123; a: 0 &#125;;const proxy = new Proxy(object, &#123;  preventExtensions(target) &#123; // 프로퍼티 추가 금지    Object.preventExtensions(target);    return true;  &#125;&#125;);Object.preventExtensions(proxy);Object.isExtensible(object); // false

sethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set
const proxy = new Proxy(&#123;&#125;, &#123;  set(target, key, value, receiver) &#123; // 프로퍼티 키와 값을 설정    console.log(target, key, value); // &#123;&#125; &quot;a&quot; 1    console.log(target == receiver, receiver); // false 리시버는 Proxy 오브젝트 (&#123;&#125;)    target[key] = value;    return true; // 트랩처리의 성공을 반환  &#125;&#125;);proxy.a = 1;proxy.a; // 1

const proxy = new Proxy(&#123; a: 0 &#125;, &#123;  set(target, key, value, receiver) &#123;    target[key] = value;    console.log(receiver.number, target.number); // 100 undefined    target[&#x27;number&#x27;] = receiver.number;    return true;  &#125;&#125;);// 상속const object = Object.create(proxy, &#123;  number: &#123; value: 100 &#125;,&#125;);object.b = 10;object.a; // 0object.b; // 10object.number; // 100

setPrototypeOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/setPrototypeOf
class A &#123;  getA() &#123;    return 1;  &#125;&#125;class B &#123;  getB() &#123;    return 2;  &#125;&#125;const instance = new B();const proxy = new Proxy(instance, &#123;  setPrototypeOf(target, proto) &#123; // __proto__ 에 prototype 설정    Object.setPrototypeOf(target, proto);    return true;  &#125;&#125;);Object.setPrototypeOf(proxy, A.prototype);instance.getA(); // 1instance.getB(); // Error

Validationconst proxy = new Proxy(&#123;&#125;, &#123;  set(object, property, value) &#123;    if (property === &#x27;number&#x27;) &#123;      if (!Number.isInteger(value)) &#123;        throw new TypeError(&#x27;The number is not an integer&#x27;);      &#125;      if (value &gt; 200) &#123;        throw new RangeError(&#x27;The number seems invalid&#x27;);      &#125;    &#125;        // The default behavior to store the value    object[property] = value;  &#125;&#125;);proxy.number = 100;proxy.number; // 100proxy.number = &#x27;abc&#x27;; // Throws an exceptionproxy.number = 300; // Throws an exception


traps 은 OS 에서 사용하는 용어로 실행 중인 프로그램에 이상이 발생했을 때 프로그램을 중단하고 사전에 정의된 제어로 이동하는 동작을 의미한다.

ExamplesGet params for URL query stringconst params = new Proxy(new URL(&#x27;http://www.naver.com?a=10&amp;b=20&#x27;).searchParams, &#123;  get: (searchParams, prop) =&gt; searchParams.get(prop),&#125;);console.log(params.a, params.b); // 10 20
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>proxy</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>reflection</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Reflect</title>
    <url>/javascript-global-objects/reflect/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect


Static methods
중간에서 가로챌 수 있는 자바스크립트 작업에 대한 메서드를 제공하는 내장 객체이다.객체가 아니므로 생성자를 사용할 수 없다. (정적 메서드)

Reflect.applyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply
Reflect.apply(String.prototype.indexOf, &#x27;ABC&#x27;, [&#x27;B&#x27;]); // 1

function getValue(...values) &#123;  return this.a + values.reduce(function(prev, current) &#123;    return prev + current;  &#125;);&#125;Reflect.apply(getValue, &#123; a: 100 &#125;, [10, 20, 30]); // 160

function getValue(...values) &#123;  return this.a + values.reduce(function(prev, current) &#123;    return prev + current;  &#125;);&#125;const proxy = new Proxy(getValue, &#123;  apply(target, thisObject, params) &#123; // 함수 호출 바인드    return Reflect.apply(target, thisObject, params);  &#125;&#125;);Reflect.apply(proxy, &#123; a: 100 &#125;, [10, 20, 30]); // 160

Reflect.constructhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct
functionfunction fn(value) &#123;  this.value = value;&#125;const reflect = Reflect.construct(fn, [&#x27;a&#x27;]); // 함수로 인스턴스 생성reflect.value; // a

classclass Example &#123;  constructor(value) &#123;    this.value = value;  &#125;&#125;const reflect = Reflect.construct(Example, [&#x27;a&#x27;]); // 클래스로 인스턴스 생성reflect.value; // a

class A &#123;  constructor(value) &#123;    this.value = value;  &#125;  getValue() &#123;    return this.value;  &#125;&#125;class B &#123;  getValue() &#123;    return &#x27;B getValue()&#x27;;  &#125;&#125;const reflect = Reflect.construct(A, [&#x27;a&#x27;], B); // B 클래스의 prototype 을 사용하여 인스턴스를 생성reflect.getValue(); // B getValue()

class A &#123;  constructor(...values) &#123;    this.values = values;  &#125;  getValues() &#123;    return this.values;  &#125;&#125;const proxy = new Proxy(A, &#123;  construct(target, params, proxy) &#123;    return Reflect.construct(target, params);  &#125;&#125;);const reflect = Reflect.construct(proxy, [&#x27;a&#x27;, &#x27;b&#x27;]);reflect.getValues(); // [&quot;a&quot;, &quot;b&quot;]

Reflect.definePropertyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty
const object = &#123; a: 0 &#125;;const result = Reflect.defineProperty(object, &#x27;b&#x27;, &#123; // 프로퍼티를 추가하거나 값을 변경  get() &#123;    return this.a;  &#125;&#125;);result; // trueobject.b; // 0

Reflect.deletePropertyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty
const object = &#123; a: 0, b: 1 &#125;;Reflect.deleteProperty(object, &#x27;b&#x27;); // true 프로퍼티 삭제Reflect.deleteProperty(object, &#x27;b&#x27;); // true (존재하지 않아도 true)Object.freeze(object);Reflect.deleteProperty(object, &#x27;a&#x27;); // false

Reflect.gethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get
const object = &#123;  a: 1,  b: 2,  get getSum() &#123;    return this.a + this.b;  &#125;,&#125;;Reflect.get(object, &#x27;a&#x27;); // 1Reflect.get(object, &#x27;b&#x27;); // 2Reflect.get(object, &#x27;getSum&#x27;); // 3

const array = [&#x27;a&#x27;, &#x27;b&#x27;];Reflect.get(array, 1); // &quot;b&quot;Reflect.get(array, &#x27;3&#x27;); // undefined

const proxy = new Proxy(&#123; a: 0 &#125;, &#123;  get(target, key, receiver) &#123; // 프로퍼티 값을 반환    // return target[key] + &#x27;!&#x27;; // ES 5 형태    return Reflect.get(target, key) + &#x27;!&#x27;; // 권장  &#125;&#125;);Reflect.get(proxy, &#x27;a&#x27;); // 0!

Reflect.getOwnPropertyDescriptorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor
const result = Reflect.getOwnPropertyDescriptor(&#123; a: 0 &#125;, &#x27;a&#x27;); // 디스크립터 반환result; // &#123;value: 0, writable: true, enumerable: true, configurable: true&#125;

Reflect.getPrototypeOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf
Reflect.getPrototypeOf(&#123; a: 0 &#125;); // &#123; ... &#125; prototype 반환

Reflect.hashttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has
Reflect.has(&#123; a: 0 &#125;, &#x27;a&#x27;); // trueReflect.has(function() &#123;&#125;, &#x27;hasOwnProperty&#x27;); // true

const object = &#123; a: 0 &#125;;const proxy = new Proxy(object, &#123;  has(target, key) &#123; // 프로퍼티 키 존재 여부를 반환    Reflect.has(target, key);  &#125;&#125;);Reflect.has(object, &#x27;a&#x27;); // trueReflect.has(proxy, &#x27;a&#x27;); // false

Reflect.isExtensiblehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible
const object = &#123;&#125;;Reflect.preventExtensions(object); // // Object.seal(), Object.freeze() 와 동일한 결과. 프로퍼티 추가 가능 여부Reflect.isExtensible(object); // false

Reflect.ownKeyshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys
const object = &#123;  a: 0,  b: 1,  [Symbol.for(&#x27;one&#x27;)]: 10,&#125;;Reflect.ownKeys(object); // [&quot;a&quot;, &quot;b&quot;, Symbol(one)] 프로퍼티 키를 배열로 반환

Reflect.preventExtensionshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions
const object = &#123;&#125;;Reflect.preventExtensions(object); // true 프로퍼티 추가 금지Reflect.defineProperty(object, &#x27;a&#x27;, &#123; value: 0 &#125;); // false

Reflect.sethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set
const object = &#123;&#125;;Reflect.set(object, &#x27;a&#x27;, 0); // trueobject; // &#123; a: 0 &#125;

const object = &#123;  set setData(value) &#123;    Reflect.set(object, value[0], this.default || value[1]);  &#125;&#125;;Reflect.set(object, &#x27;setData&#x27;, [&#x27;a&#x27;], &#123; default: 10 &#125;);Reflect.set(object, &#x27;setData&#x27;, [&#x27;b&#x27;, 20]);object; // &#123;a: 10, b: 20&#125;

const array = [&#x27;a&#x27;];Reflect.set(array, 1, &#x27;b&#x27;);array; // [&quot;a&quot;, &quot;b&quot;]Reflect.set(array, 0, &#x27;c&#x27;);array; // [&quot;c&quot;, &#x27;b&#x27;]

const object = &#123;&#125;;const proxy = new Proxy(object, &#123;  set(target, key, value, receiver) &#123; // 프로퍼티 키와 값을 설정    Reflect.set(target, key, value);  &#125;&#125;);Reflect.set(proxy, &#x27;a&#x27;, 0);object; // &#123; a: 0 &#125;

Reflect.setPrototypeOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf
const fn = function() &#123;&#125;;fn.prototype.getValue = function() &#123;  return this.value;&#125;;const object = &#123; value: 0 &#125;;Reflect.setPrototypeOf(object, fn.prototype); // __proto__ 에 prototype 설정object.getValue(); // 0
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>reflect</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>reflection</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Regular Expression</title>
    <url>/javascript-global-objects/regexp/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
  https://github.com/francisrstokes/super-expressive


Static propertiesconst flags = /pattern/flags; // 방법 1const flags = new RegExp(&#x27;pattern&#x27;, &#x27;flags&#x27;); // 방법 2// 각 문자와 숫자는 해당 문자 또는 문자열이 테스트 할 문자열에 있을 경우 trueconst flags = /a/; // &quot;a&quot; 가 있는 문자열 모두가 TRUE (대소문자 구분)const flags = /about/; // &quot;about&quot; 가 있는 문자열 모두가 TRUE (대소문자 구분)// 대소문자 구분 없이 해당 문자 또는 문자열을 검색 할 경우 끝에 i 를 붙임const flags = /a/i; // &#x27;a&#x27; 또는 &#x27;A&#x27; 가 있는 문자열 모두가 TRUE (대소문자 구분 안함)// 여러개의 이어지는 내용들을 검색 할 경우는 - 를 넣어 표현const flags = /[a-z]/; // &#x27;a&#x27; 에서 &#x27;z&#x27; 까지중 하나만 있으면 모두가 TRUE (대소문자 구분)// 여러가지의 문자 또는 문자열을 검색 할 경우 | 를 넣어 표현const flags = /a|b|c/; // &#x27;a&#x27; 또는 &#x27;b&#x27; 또는 &#x27;c&#x27; 가 있는 문자열 모두가 TRUE (대소문자 구분)const flags = /[a-z]|[0-9]/; // &#x27;a&#x27; 에서 &#x27;z&#x27; 까지 또는 &#x27;0&#x27; 에서 &#x27;9&#x27; 까지 중 하나만 있으면 모두가 TRUE (대소문자 구분)// 해당 문자 또는 문자열이 없는 경우를 검색 할 경우 브래킷(&#x27;[&#x27;, &#x27;]&#x27;) 안에 &#x27;^&#x27; 를 넣어 표현const flags = /[^a-z]/; // &#x27;a&#x27; 에서 &#x27;z&#x27; 까지의 문자가 아닌 문자가 있을 경우 TRUE (대소문자 구분)// 문자열의 첫번째 글자가 일치 해야 할 경우는 &#x27;^&#x27; 를 브래킷(&#x27;[&#x27;, &#x27;]&#x27;) 밖에 넣어 표현const flags = /^[a-z]/; // &#x27;a&#x27; 에서 &#x27;z&#x27; 까지의 문자로 시작하는 문자열일 경우 TRUE (대소문자 구분)// 문자열의 끝쪽 글자가 해당 문자 또는 문자열과 일치 해야 할 경우는 &#x27;$&#x27; 를 넣어 표현const flags = /[a-z]$/; // &#x27;a&#x27; 에서 &#x27;z&#x27; 까지의 문자로 끝나는 문자열일 겨우 TRUE (대소문자 구분)// 문자열 구간const flags = /A.*?C/g; // A 에서 시작해서 C 로 끝나는 구간// 특수문자(&#x27;\&#x27;, &#x27;^&#x27;, &#x27;$&#x27;, &#x27;*&#x27;, &#x27;+&#x27;, &#x27;?&#x27;, &#x27;.&#x27;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;|&#x27;, &#x27;&#123;&#x27;, &#x27;&#125;&#x27;, &#x27;[&#x27;, &#x27;]&#x27;)를 검색 할 경우는 &#x27;\&#x27; 를 넣어 표현const flags = /\\/; // &#x27;\&#x27; 가 있는 문자열일 경우 TRUE (대소문자 구분)flags.test(&#x27;some test words&#x27;) ? console.log(&#x27;success&#x27;) : console.log(&#x27;fail&#x27;);// &#x27;some test words&#x27;.match(flags) ? console.log(&#x27;success&#x27;) : console.log(&#x27;fail&#x27;);

Flags







g
(Global) 패턴에 맞는 모든 문자 찾기


i
(Ignore Case) 대소문자 무시


m
(Multiline) 여러 줄


^
문자열의 시작을 의미, m 플래그를 사용 할 경우 경우는 각 문자열의 시작


$
문자열의 끝을 의미, m 플래그를 사용 할 경우 경우는 각 문자열의 끝


.
모든 한 문자


[문자들]
괄호안의 문자중 하나와 매치


[^문자들]
괄호안의 문자가 아닌 문자와 매치


[문자1-문자2]
문자 1 과 문자 2 와 그 사이의 값과 매치


(문자열)
문자열과 매치


|
좌우 패턴중 하나를 의미


*
앞의 패턴이 0 회 또는 그 이상 반복 됨


+
앞의 패턴이 1 회 또는 그 이상 반복 됨


?
앞의 패턴이 0 또는 1 회 반복


&#123;1,3&#125;
앞의 패턴이 1 에서 3 회 반복


&#123;1&#125;
앞의 패턴이 1 회 반복


&#123;,10&#125;
앞의 패턴이 10 회 이하 반복


\
일반 문자에 \ 을 붙여서 특수한 용도로 사용


\f
폼 피드


\r
캐리지 리턴


\n
새줄


\t
일반 탭문자


\v
세로 탭문자


\0
NULL 널 문자


[\b]
백스페이스


\s
공백 문자


\S
공백이아닌문자


\d
정수 ([0-9])


\D
정수가 아닌 문자 ([^0-9])


\w
알파벳 문자, 숫자, _ ([a-zA-Z0-9_])


\W
알파벳 문자, 숫자, _ 가 아닌 문자 ([^a-zA-Z0-9_])


\b
단어의 경계 공백, 새줄


\B
경계가 아닌 문자


\cX
컨트롤 + 문자


\xhh
핵사 코드


\uhhhh
유니 코드


@@specieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species
Instance propertiesflagshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags
dotAllhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll
globalhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global
hasIndiceshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices
ignoreCasehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase
multilinehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline
sourcehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source
stickyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky
unicodehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode
lastIndexhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex
const regexp = /CD/y;regexp.lastIndex; // 0 기본값regexp.test(&#x27;ABCDEFG&#x27;); // falseregexp.lastIndex = 2; // 라스트 인덱스 지정regexp.test(&#x27;ABCDEFG&#x27;); // trueregexp.lastIndex; // 4 라스트 인덱스 자동으로 변경 됨


lastIndex 부터 검색한다.

Instance methodsexechttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec
testhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test
toStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString
@@matchhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match
@@matchAllhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll
@@replacehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace
@@searchhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search
@@splithttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split
ExamplesSearch for IDE/* border: 1px solid #fff; =&gt; border: solid 1px #fff; */border: (.*)?px solid (.*)?;border: solid $1px $2;

Allow character


Regexp
Description



/[0-9]/ or /\d/
숫자


/[a-z]/
영문 소문자


/[A-Z]/
영문 대문자


/[a-zA-Z]/
영문 대소문자


/[0-9a-zA-Z_]/ or /\w/
숫자, 영문, _


/[가-힇ㄱ-ㅎㅏ-ㅣ]/
한글


/[ぁ-ゔ]+|[ァ-ヴー]+[々〆〤]/
일어


/[一-龥]/
한자


/[0-9a-zA-Z가-힇ㄱ-ㅎㅏ-ㅣぁ-ゔァ-ヴー々〆〤一-龥]/
모든 문자 (특수문자 제외)


Specific format


Regexp
Test
Description



/^[a-z0-9_]&#123;4,10&#125;$/
abcd_12345
아이디 (영문 소문자, 숫자, _ 포함한 4 ~ 10 문자)


/(.)\1+/
abcd11efg
연속 된 문자


]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>regexp</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - SharedArrayBuffer</title>
    <url>/javascript-global-objects/shared-array-buffer/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer


Instance propertiesbyteLengthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength
Instance methodsslicehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice
const sab = new SharedArrayBuffer(1024);sab.slice(); // SharedArrayBuffer &#123; byteLength: 1024 &#125;sab.slice(2); // SharedArrayBuffer &#123; byteLength: 1022 &#125;sab.slice(-2); // SharedArrayBuffer &#123; byteLength: 2 &#125;sab.slice(0, 1); // SharedArrayBuffer &#123; byteLength: 1 &#125;

ExamplesUsing it in a WebGL bufferconst canvas = document.querySelector(&#x27;canvas&#x27;);const gl = canvas.getContext(&#x27;webgl&#x27;);const buffer = gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER, buffer);gl.bufferData(gl.ARRAY_BUFFER, sab, gl.STATIC_DRAW);
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>shared-array-buffer</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>structured data</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Set</title>
    <url>/javascript-global-objects/set/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set


Static propertiesconst set = new Set([1, 2, 1, 3, 4]);set.size; // 4for (let element of set) &#123;  console.log(element); // 1 2 3 4&#125;[...set]; // Array [1, 2, 3, 4]


배열과 다르게 추가한 순서대로 읽히는 것을 보장한다.값이 키 역할도 하기 때문에 값이 같으면 추가되지 않는다. (유일한 값들만 있음)

@@specieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species
Instance propertiessizehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size
Instance methodsaddhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add
const set = new Set();set.add(&#x27;a&#x27;).add(&#x27;b&#x27;); // &#123;&quot;a&quot;, &quot;b&quot;&#125;set.add(() =&gt; &#123;&#125;); // &#123;&quot;a&quot;, &quot;b&quot;, ƒ&#125;

clearhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear
const set = new Set([&#x27;a&#x27;, &#x27;b&#x27;]);set.clear();set.size; // 0

deletehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete
const set = new Set([&#x27;a&#x27;, &#x27;b&#x27;]);set.delete(&#x27;a&#x27;); // trueset; // &#123;&quot;b&quot;&#125;

hashttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has
const set = new Set([&#x27;a&#x27;]);set.has(&#x27;a&#x27;); // true

Iteration methods@@iteratorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator
const set = new Set([&#x27;one&#x27;, () =&gt; &#123;&#125;]);const iterator = set[Symbol.iterator]();iterator.next(); // &#123;value: &quot;one&quot;, done: false&#125;iterator.next(); // &#123;value: function() &#123;&#125;, done: false&#125;iterator.next(); // &#123;value: undefined, done: true&#125;

valueshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values
const set = new Set([1, 2, 3]);const iterator = set.values(); // set.keys() 동일iterator.next().value; // 1iterator.next().value; // 2iterator.next().value; // 3

keys
value 와 동일하게 동작한다.

entrieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries
const set = new Set([&#x27;one&#x27;, () =&gt; &#123;&#125;]);const iterator = set.entries();iterator.next(); // &#123;value: Array(2), done: false&#125;iterator.next(); // &#123;value: Array(2), done: false&#125;iterator.next(); // &#123;value: undefined, done: true&#125;

forEachhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>set</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>keyed collections</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Statements</title>
    <url>/javascript-global-objects/statements/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements


Control flowBlockhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block
breakhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break
let i = 0;while (i &lt; 6) &#123;  if (i === 3) &#123;    break;  &#125;  i = i + 1;&#125;i; // 3

outer: &#123;  inner: &#123;    console.log(&#x27;1&#x27;); // 1    break outer; // inner, outer 둘다 빠져나옴    console.log(&#x27;2&#x27;); // 건너뜀  &#125;  console.log(&#x27;3&#x27;); // 건너뜀&#125;

continuehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue
let string = &#x27;&#x27;;for (let i = 0; i &lt; 10; i++) &#123;  if (i === 3) &#123;    continue; // 현재 반복 건너뜀 (다음 반복으로 이동)  &#125;  string = string + i;&#125;string; // &quot;012456789&quot;

let i = 0;let j = 8;outer: while (i &lt; 4) &#123;  console.log(&#x27;i: &#x27; + i);  i += 1;  inner: while (j &gt; 4) &#123;    console.log(&#x27;j: &#x27; + j);    j -= 1;    if ((j % 2) == 0) continue inner;    console.log(j + &#x27; is odd.&#x27;);  &#125;  console.log(&#x27;i = &#x27; + i);  console.log(&#x27;j = &#x27; + j);&#125;/*i: 0// start innerj: 87 is odd.j: 7j: 65 is odd.j: 5// end inneri = 1 j = 4 i: 1i = 2j = 4i: 2i = 3j = 4i: 3i = 4j = 4*/

Emptyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty
if elsehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else
switchhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch
const expression = &#x27;a&#x27;;switch (expression) &#123;  case &#x27;a&#x27;:    console.log(0);    break;  case &#x27;b&#x27;:  case &#x27;c&#x27;:    console.log(1);    break;  default:    console.log(2);&#125;

throwhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw
function fn(a, b) &#123;  if (isNaN(a) || isNaN(b)) &#123;    throw &#x27;Parameter is not a number!&#x27;;  &#125;&#125;try &#123;  fn(1, &#x27;a&#x27;);&#125; catch (error) &#123;  console.error(error); // &quot;Parameter is not a number!&quot;&#125;

try catchhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch
try &#123;  // try_statements&#125; catch (exception) &#123;  // catch_statements&#125; catch (exception if condition) &#123; // 비표준  // catch_statements&#125; finally &#123;  // finally_statements&#125;

Declarationsvarhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var
a = 1; // 호스팅 객체의 속성으로 생성console.log(this.a); // 1delete this.a; // trueconsole.log(this.a); // undefinedvar a = 1; // var로 정의된 변수는 non-configurable 로 구분되어 삭제 할 수 없음console.log(this.a); // 1delete this.a; // falseconsole.log(this.a); // 1

// var a; // 호이스팅 되어 맨 처음 정의 (값 undefined)console.log(a); // 호이스팅이 되었기 때문에 에러가 아닌 undefined 반환var a = 1;console.log(b); // 호이스팅이 안 되었기 때문에 ReferenceError 반환let b = 2;


var 변수는 function-scoped 변수로, 호이스팅이 된다.

lethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let
var a = 1; // 호스팅 객체 (window)let b = 2; // 글로벌 객체console.log(this.a, window.a, this.b); // 1 1 undefined


block-scoped 변수로, 같은 이름의 변수를 재선언 할 수 없고 호이스팅이 되지 않는다.글로벌 객체에 생성된 변수이기 때문에 호스팅 객체 (window) 에 정의 되지 않는다.글로벌 객체가 호스팅 객체에 포함되어 있는 개념이다.

Use scopelet a;&#123;  let b = 10;  a = function() &#123; // 스코프 내부에 a 가 없으면 상위 스코프 탐색    console.log(b);  &#125;;&#125;a(); // 10console.log(b); // undefined // 스코프 내부의 변수를 알 수 없음

Use functionvar a = 1;let b = 2;function fn() &#123;  var a = 10;  let b = 20;  console.log(a, this.a, b, this.b); // 일반 함수 내부에서의 this 는 window&#125;fn(); // 10 1 20 undefined

Use try catchlet a = 1;try &#123;  let a = 2;  console.log(a); // 2  throw Error;&#125; catch (error) &#123;  console.log(a); // 1&#125;

Use switch caselet a = 1;switch (a) &#123;  case 3:    let a = 2;    console.log(a); // 2&#125;console.log(a); // 1

consthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const

let 과 전반적으로 동일하지만, 상수로 한번 정한 값을 바꿀 수 없다는 차이점이 있다.

Iterationsdo whilehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while
let string = &#x27;&#x27;;let i = 0;do &#123;  i = i + 1;  string = string + i;&#125; while (i &lt; 5);console.log(string); // &quot;12345&quot;

forhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for
let string = &#x27;&#x27;;for (let i = 0; i &lt; 9; i++) &#123;  string = string + i;&#125;console.log(string); // &quot;012345678&quot;

let i = 0;for (;;) &#123;  if (i &gt; 3) break;  console.log(i);  i++;&#125;

for inhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in
for (let index in [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]) &#123;  console.log(index); // 0 1 2&#125;

const object = &#123; a: 1, b: 2, c: 3 &#125;;for (const property in object) &#123;  console.log(`$&#123;property&#125;: $&#123;object[property]&#125;`); // &quot;a: 1&quot; &quot;b: 2&quot; &quot;c: 3&quot;&#125;


객체의 모든 non-Symbol, enumerable properties 를 반복하며 key 를 반환한다.상속한 속성은 표시하지 않는다.

for ofhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of
for (let value of [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]) &#123;  console.log(value); // a b c&#125;

// 일반 객체는 사용 불가const object = &#123; a: 10, b: 20 &#125;;for (let value of object) &#123;  console.log(value); // Uncaught TypeError: &#123;(intermediate value)(intermediate value)&#125; is not iterable&#125;// Object.keys를 사용해서 key 배열 반환for (let value of Object.keys(object)) &#123;  console.log(value, object[value]);&#125;


반복가능한 객체 (Array, Map, Set, String, TypedArray, arguments, [Symbol.iterator] 속성이 있는 컬렉션 요소) 를 반복하며 value 를 반환한다.

for await ofhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of
whilehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while
initialization;while (condition) &#123;  try &#123; statement; &#125;  finally &#123; final_expression &#125;&#125;

Othersdebuggerhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger
exporthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export
// 하나씩 내보내기export const name1, name2, nameN;export const name1 = &#x27;&#x27;, name2 = &#x27;&#x27;, nameN = &#x27;&#x27;;export function fn() &#123;&#125;export class ClassName &#123;&#125;// 목록으로 내보내기export &#123; name1, name2, nameN &#125;;// 내보내면서 이름 바꾸기export &#123; variable1 as name1, variable2 as name2, variableN as nameN &#125;;// 비구조화로 내보내기export const &#123; name1, name2: bar &#125; = object;// 기본 내보내기export default expression;export default function() &#123;&#125;export default function fn() &#123;&#125;export &#123; name1 as default &#125;;// 모듈 조합export * from ...; // does not set the default exportexport * as name1 from ...;export &#123; name1, name2, ..., nameN &#125; from ...;export &#123; import1 as name1, import2 as name2, ..., nameN &#125; from ...;export &#123; default &#125; from ...;

importhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import
import defaultExport from &#x27;module-name&#x27;;import * as name from &#x27;module-name&#x27;;import &#123; export1 &#125; from &#x27;module-name&#x27;;import &#123; export1 as alias1 &#125; from &#x27;module-name&#x27;;import &#123; export1 , export2 &#125; from &#x27;module-name&#x27;;import &#123; foo , bar &#125; from &#x27;module-name/path/to/specific/un-exported/file&#x27;;import &#123; export1 , export2 as alias2 , [...] &#125; from &#x27;module-name&#x27;;import defaultExport, &#123; export1 [ , [...] ] &#125; from &#x27;module-name&#x27;;import defaultExport, * as name from &#x27;module-name&#x27;;import &#x27;module-name&#x27;;const promise = import(&#x27;module-name&#x27;);

import.metahttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta
labelhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label
outer:while (token != null) &#123;  break outer; // outer 루프 종료&#125;

while (token != null) &#123;  break; // 이터러블 스코프에서는 생략 가능 (자동 레이블 생성)&#125;

outer: &#123;  break outer; // 이터러블 스코프가 아닐 경우 명시해야 함&#125;

outer: &#123;  inner: &#123;    break outer; // 일반 스코프에서 상위 레이블로 이동 가능  &#125;&#125;

outer: function fn() &#123;  break outer; // 함수 스코프에서 상위 레이블로 이동 불가능&#125;

withhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>statements</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - String</title>
    <url>/javascript-global-objects/string/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String


Template literalshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
const a = 1;const b = 2;function tagFunction(string, expression) &#123; // 표현식의 수만큼 exp 파라미터를 추가  console.log(string[0]); // 1 + 2 =  console.log(expression); // 3  console.log(string[1]); // &#x27;&#x27; (표현식으로 끝날때만 빈 문자열이 추가됨)  console.log(typeof string[1]); // string&#125;tagFunction `1 + 2 = $&#123;a + b&#125;`; // 문자열과 표현식 분리

Surrogate pairES 5&#x27;\uD83D\uDE91&#x27;; // 🚑

ES 6&#x27;\u&#123;1F691&#125;&#x27;; // 🚑

Static methodsString.fromCharCodehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode
String.fromCharCode(189, 43, 190, 61); // ½+¾=


UTF-16 코드 유닛의 시퀀스로부터 문자열을 생성해 반환한다.

String.fromCodePointhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint
String.fromCodePoint(9731, 9733, 9842, 0x2F804); // ☃★♲你


코드 포인트 시퀀스를 사용하여 작성된 문자열을 반환한다.

String.rawhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw
const a = 1, b = 2;String.raw `1 + 2 = $&#123;a + b&#125;`; // 1 + 2 = 3String.raw `라인1\n라인2`; // 라인1\n라인2String.raw `\u0031\u0032`; // \u0031\u0032const a = 1, b = 2;String.raw(&#123; raw: &#x27;ABC&#x27; &#125;, a, b, 3); // A1B2CString.raw(&#123; raw: &#x27;ABCD&#x27; &#125;, a, b, 3); // A1B2C3D


Template literals 의 태그 함수이다.

Instance propertieslengthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length
function getStringLength(string) &#123;  return string.split(&#x27;&#x27;).reduce((accumulator, currentValue) =&gt; &#123;    return accumulator += (escape(currentValue).length &gt; 4) ? 2 : 1;  &#125;, 0);&#125;


한글 2 byte 글자수를 체크한다.

Instance methodsathttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at
charAthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt
const string = &#x27;The quick brown fox jumps over the lazy dog.&#x27;;string.charAt(4); // q&#x27;hello&#x27;[NaN]; // undefined&#x27;hello&#x27;.charAt(NaN); // h&#x27;hello&#x27;[undefined]; // undefined&#x27;hello&#x27;.charAt(undefined); // h&#x27;hello&#x27;[true]; // undefined&#x27;hello&#x27;.charAt(true); // e&#x27;hello&#x27;[&#x27;00&#x27;]; // undefined&#x27;hello&#x27;.charAt(&#x27;00&#x27;); // h&#x27;hello&#x27;[1.5]; // undefined&#x27;hello&#x27;.charAt(1.23); // e&#x27;hello&#x27;[100]; // undefined&#x27;hello&#x27;.charAt(100); // &#x27;&#x27;


지정한 인덱스 값에 해당하는 UTF-16 코드 단위로 구성된 새 문자열을 반환한다.

charCodeAthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt
const string = &#x27;The quick brown fox jumps over the lazy dog.&#x27;;string.charAt(4); // 113


지정한 인덱스에 해당하는 문자의 ASCII 값을 반환한다.

codePointAthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt
const string = &#x27;☃★♲&#x27;;string.codePointAt(1); // 9733


유니 코드 포인트 값인 음이 아닌 정수를 반환한다.

concathttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat
const a = &#x27;Hello&#x27;;const b = &#x27;World&#x27;;b.concat(&#x27;, &#x27;, a); // World, Hello


문자열을 연결하여 새 문자열을 반환한다.

includeshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
const a = &#x27;The quick brown fox jumps over the lazy dog.&#x27;;const b = &#x27;fox&#x27;;a.includes(b); // true


지정된 문자열의 포함 여부를 반환한다.

endsWithhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
const a = &#x27;Cats are the best!&#x27;;const b = &#x27;Is this a question&#x27;;a.endsWith(&#x27;best&#x27;, 17); // trueb.endsWith(&#x27;?&#x27;); // false


지정된 문자열의 문자로 끝나는지 확인한다.

indexOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf
const string = &#x27;The quick brown fox jumps over the lazy dog. If the dog barked, was it really lazy?&#x27;;string.indexOf(&#x27;cat&#x27;); // -1string.indexOf(&#x27;dog&#x27;); // 40string.indexOf(&#x27;dog&#x27;, (string.indexOf(&#x27;dog&#x27;) + 1)); // 52~string.indexOf(&#x27;cat&#x27;); // 0 (false)~string.indexOf(&#x27;dog&#x27;); // -41 (true)


앞에서부터 검색하여 주어진 문자열의 인덱스 값을 반환한다.값이 없을 경우 -1 을 반환한다.

lastIndexOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf

뒤에서부터 검색하여 주어진 문자열의 인덱스 값을 반환한다.값이 없을 경우 -1 을 반환한다.

localeComparehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare
const a = &#x27;réservé&#x27;;const b = &#x27;RESERVE&#x27;;a.localeCompare(b); // 1a.localeCompare(b, &#x27;en&#x27;, &#123; sensitivity: &#x27;base&#x27; &#125;); // 0


참조 문자열이 앞 또는 뒤에 오는지 또는 주어진 문자열과 같은지 여부를 나타내는 숫자를 정렬 순서로 반환한다.

matchhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match
const string = &#x27;AbcDef&#x27;;string.match(/[A-Z]/g); // [&quot;A&quot;, &quot;D&quot;]


문자열을 정규식과 일치시키는 결과를 검색한다.


  javascript-global-objects regexp


matchAllhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll
const string = &#x27;AbcDef&#x27;;const array = [...string.matchAll(/[A-Z]/g)];array[0][0]; // Aarray[1][0]; // D


그룹 캡처를 포함 하여 정규식에 대해 문자열과 일치하는 모든 결과의 반복자를 반환한다.정규식 패턴을 사용할 때 전역 (g) 플래그 설정을 해야 한다.


  javascript-global-objects regexp


replacehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace
const string = &#x27;AbcDef&#x27;;string.replace(/[A-Z]/g, &#x27;@&#x27;); // @bc@ef


정규식 패턴으로 검색된 문자열을 변경하여 새 문자열로 반환한다.


  javascript-global-objects regexp


replaceAllhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll
const string = &#x27;AbcDef&#x27;;string.replaceAll(/[A-Z]/g, &#x27;@&#x27;); // @bc@ef


정규식 패턴을 사용할 때 전역 (g) 플래그 설정을 해야 한다.


  javascript-global-objects regexp


normalizehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize
const a = &#x27;\u00E9&#x27;.normalize();const b = &#x27;e\u0301&#x27;.normalize();a.length; // 1b.length; // 1a == b; // truefor (let i = 0; i &lt; a.length; i++) console.log(a[i]); // éfor (let i = 0; i &lt; b.length; i++) console.log(b[i]); // é


유니코드 정규화 형식을 변환한다.

padEndhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd
const string = &#x27;ABCDE&#x27;;string.padEnd(10, &#x27;.&#x27;); // ABCDE.....


결과 문자열이 주어진 길이에 도달하도록 현재 문자열을 주어진 문자열 (필요한 경우 반복됨) 로 채운다.

padStarthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart
const number = &#x27;1234567890&#x27;;const slice = number.slice(-3);const maskedNumber = slice.padStart(number.length, &#x27;*&#x27;);maskedNumber; // *******890


결과 문자열이 주어진 길이에 도달할 때까지 현재 문자열을 다른 문자열 (필요한 경우 여러 번) 로 채운다.

repeathttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
const string = &#x27;abc&#x27;;string.repeat(3); // abcabcabc


문자열을 반복하여 복제 후 반환한다.

searchhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search
const string = &#x27;a b ? c d !&#x27;;const regexp = /[^\w\s]/g; // 단어나 공백이 아닌 문자string.search(regexp); // 4string[string.search(regexp)]; // ?

slicehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice
const string = &#x27;abcdefg.jpg&#x27;;string.slice(0, -4); // abcdefg;


시작 인덱스에서 종료 인덱스 바로 전까지의 문자를 분리한다.종료 인덱스가 음수일경우 뒤에서부터 계산한다.

splithttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split
const string = &#x27;abcdefg.jpg&#x27;;const result = string.split(&#x27;.&#x27;);result[0]; // abcdefgresult[1]; // jpg


문자를 기준으로 지정한 개수만큼 분리하여 배열로 반환한다.

startsWithhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
const string = &#x27;abcdefg&#x27;;string.startsWith(&#x27;ab&#x27;); // truestring.startsWith(&#x27;cd&#x27;, 2); // truestring.endsWith(&#x27;fg&#x27;); // truestring.startsWith(&#x27;fg&#x27;, 5); // true


지정된 문자열의 문자로 시작하는지 확인한다.

substringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring
const string = &#x27;abcdefg&#x27;;string.substring(2, 6); // cde;string.substring(3); // defg;


시작 인덱스에서 종료 인덱스 바로 전까지의 문자를 반환한다.종료 인덱스를 생략하면 마지막까지 반환한다.

toLocaleLowerCasehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase
const string = &#x27;İstanbul&#x27;;string.toLocaleLowerCase(&#x27;en-US&#x27;); // i̇stanbulstring.toLocaleLowerCase(&#x27;tr&#x27;); // istanbul


로케일 별 대&#x2F;소문자 구분에 따라 호출 문자열 값을 소문자로 변환하여 반환한다.

toLocaleUpperCasehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase
const string = &#x27;istanbul&#x27;;string.toLocaleLowerCase(&#x27;en-US&#x27;); // ISTANBULstring.toLocaleLowerCase(&#x27;tr&#x27;); // İSTANBUL


로케일 별 대&#x2F;소문자 구분에 따라 호출 문자열 값을 대문자로 변환하여 반환한다.

toLowerCasehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase
const string = &#x27;AbcDEFg&#x27;;string.toLowerCase(); // abcdefg


소문자로 변환하여 반환한다.

toUpperCasehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase
const string = &#x27;AbcDEFg&#x27;;string.toUpperCase(); // ABCDEFG


대문자로 변환하여 반환한다.

trimhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim
const string = &#x27; abc &#x27;;`|$&#123;string&#125;|`; // | abc |`|$&#123;string.trim()&#125;|`; // |abc|


문자열의 양쪽부분 공백을 제거한다.

trimStarthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart
const string = &#x27; abc &#x27;;`|$&#123;string&#125;|`; // | abc |`|$&#123;string.trimStart()&#125;|`; // |abc |


문자열의 시작부분 공백을 제거한다.

trimEndhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd
const string = &#x27; abc &#x27;;`|$&#123;string&#125;|`; // | abc |`|$&#123;string.trimEnd()&#125;|`; // | abc|


문자열의 끝부분 공백을 제거한다.

valueOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf
const object = new String(&#x27;abc&#x27;);object; // String &#123; &quot;abc&quot; &#125;object.valueOf(); // abc


String 객체의 프리미티브 값을 반환한다.

toStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString
const object = new String(&#x27;abc&#x27;);object; // String &#123; &quot;abc&quot; &#125;object.toString(); // abc


지정된 객체를 나타내는 문자열을 반환한다.

]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>string</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - TypedArray</title>
    <url>/javascript-global-objects/typed-array/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray


Static propertiesconst typedArray1 = new Int8Array(8);typedArray1[0] = 32;const typedArray2 = new Int8Array(typedArray1);typedArray2[1] = 42;console.log(typedArray1); // expected output: Int8Array [32, 0, 0, 0, 0, 0, 0, 0]console.log(typedArray2); // expected output: Int8Array [32, 42, 0, 0, 0, 0, 0, 0]


한가지의 타입만을 가지는 배열이다.오직 숫자 값의 바이너리만을 사용한다.

BYTES_PER_ELEMENThttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT
namehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name
@@specieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@species
TypedArrayhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
Static methodsTypedArray.fromhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from
TypedArray.ofhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/of
Instance propertiesbufferhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer
byteLengthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength
byteOffsethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset
lengthhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length
Instance methodsathttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/at
copyWithinhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin
entrieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries
everyhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every
fillhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill
filterhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter
findhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find
findIndexhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex
forEachhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach
includeshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/includes
indexOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf
joinhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/join
keyshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys
lastIndexOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf
maphttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map
reducehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce
reduceRighthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight
reversehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse
sethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set
slicehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice
somehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some
sorthttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort
subarrayhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray
valueshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values
toLocaleStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toLocaleString
toStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toString
@@iteratorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>typed-array</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - Symbol</title>
    <url>/javascript-global-objects/symbol/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol


Syntaxconst symbol = Symbol(&#x27;주석&#x27;); // new 연산자 사용 안함, 리터럴 없음, 주석은 값에 영향을 주지 않음typeof symbol, symbol == Symbol(); // Symbol false (생성시 유일한 값을 반환)+symbol; // 사용 불가 (Cannot convert a Symbol value to a number)symbol | 0; // 사용 불가 (Cannot convert a Symbol value to a number)symbol + &#x27;abc&#x27;; // 사용 불가 (Cannot convert a Symbol value to a string)`$&#123;symbol&#125;`; // 사용 불가 (Cannot convert a Symbol value to a string)String(symbol) + &#x27;abc&#x27;; // Symbol(주석)abcsymbol.toString() + &#x27;abc&#x27;; // Symbol(주석)abcconst object = Object(symbol); // 심볼 오브젝트object == symbol; // trueobject === symbol; // false

Use in objectconst symbol = Symbol(&#x27;주석&#x27;);const object = &#123;  [symbol]: 12, // symbol keyed 프로퍼티  symbol: 34,  // Symbol(): 56 // 사용 불가&#125;;object[Symbol()] = 78; // 생성은 가능하지만 해당 키에 접근할 방법이 없음object; // &#123; sym: 34, Symbol(주석): 12, Symbol(): 78 &#125;object[Symbol()]; // undefinedobject[sym]; // 12object.sym; // 34

Use in class method nameconst a = Symbol(&#x27;A&#x27;);const b = Symbol(&#x27;B&#x27;);class Example &#123;  static [a]() &#123;    return &#x27;one&#x27;;  &#125;  [b]() &#123;    return &#x27;two&#x27;;  &#125;&#125;const instance = new Example();Example[a](); // oneinstance[b](); // two

Use in json stringifyconst object = &#123; a: 10 &#125;;object[Symbol(&#x27;b&#x27;)] = 20;object[Symbol.for(&#x27;c&#x27;)] = 30;JSON.stringify(object); // &#123; &quot;a&quot;: 10 &#125; 심볼은 노출 안됨function getSymbol(object) &#123; // 심볼을 오브젝트로 변환  const obj = &#123;&#125;;  for (let symbol of Object.getOwnPropertySymbols(object)) &#123; // [Symbol(b), Symbol(c)]    const key = Symbol.keyFor(symbol);        if (key) &#123;      obj[key] = object[symbol];    &#125; else &#123;      const first = /^Symbol[(]/[Symbol.replace](symbol.toString(), &#x27;&#x27;);      const second = /[)]$/[Symbol.replace](first, &#x27;&#x27;);      obj[second] = object[symbol];    &#125;  &#125;  return obj;&#125;JSON.stringify(getSymbol(object)); // &#123; &quot;b&quot;: 20, &quot;c&quot;: 30 &#125; 심볼 노출

Static propertiesSymbol.asyncIteratorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator
const asyncIterable = &#123;  async* [Symbol.asyncIterator]() &#123;    yield &#x27;hello&#x27;;    yield &#x27;async&#x27;;    yield &#x27;iteration!&#x27;;  &#125;&#125;;(async () =&gt; &#123;  for await (const x of asyncIterable) &#123;    console.log(x); // hello async iteration!  &#125;&#125;)();


객체에 대한 기본 AsyncIterator 를 지정한다.이 속성이 객체에 설정되면 비동기 반복 가능하며 for await of 루프도 사용 가능하다.

Symbol.hasInstancehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance
class ArrayClass &#123;  static [Symbol.hasInstance](instance) &#123;    return Array.isArray(instance);  &#125;&#125;[] instanceof ArrayClass; // true


생성자 객체가 인스턴스와 객체를 인식하는지 확인한다.

Symbol.isConcatSpreadablehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable

Array.prototype.concat() 를 사용할 때 객체를 배열 요소로 평탄화해야 하는지 여부를 구성할 때 사용한다.

Arrayconst a = [1, 2]const b = [3, 4];let result = a.concat(b);result; // [1, 2, 3, 4] 배열의 기본값 (true)b[Symbol.isConcatSpreadable] = false;result = a.concat(b);result; // [1, 2, [3, 4, Symbol(Symbol.isConcatSpreadable): false]]

Array-likeconst a = [1, 2]const b = &#123; 0: 3, 1: 4, length: 2 &#125;;let result = a.concat(b);result; // [1, 2, &#123;0: 3, 1: 4, length: 2&#125;] Array-like 기본값 (false)b[Symbol.isConcatSpreadable] = true;result = a.concat(b);result; // [1, 2, 3, 4]

Symbol.iteratorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator

객체의 기본 반복자를 지정한다.

Arrayconst array = [1, 2];for (let value of array) &#123;  console.log(value); // 1 2&#125;const iterator = array[Symbol.iterator]();iterator.next(); // &#123; value: 1, done: false &#125;iterator.next(); // &#123; value: 2, done: false &#125;iterator.next(); // &#123; value: undefined, done: true &#125;

Stringconst string = &#x27;ab&#x27;;for (let value of string) &#123;  console.log(value); // a b&#125;const iterator = string[Symbol.iterator]();iterator.next(); // &#123; value: &quot;a&quot;, done: false &#125;iterator.next(); // &#123; value: &quot;b&quot;, done: false &#125;iterator.next(); // &#123; value: undefined, done: true &#125;

Objectconst object = &#123;  [Symbol.iterator]() &#123;    return &#123;      maxCount: 2,      count: 0,      next() &#123;        if (this.count &lt; this.maxCount) &#123;          return &#123; value: this.count++, done: false &#125;        &#125;        return &#123; value: undefined, done: true &#125;;      &#125;    &#125;  &#125;&#125;;for (let value of object) &#123;  console.log(value); // 0 1&#125;const iterator = object[Symbol.iterator]();iterator.next(); // &#123; value: 0, done: false &#125;iterator.next(); // &#123; value: 1, done: false &#125;iterator.next(); // &#123; value: undefined, done: true &#125;

Generatorconst object = &#123;&#125;;object[Symbol.iterator] = function* () &#123;  yield 10;  yield 20;  yield 30;&#125;;[...object]; // [10, 20, 30]

Symbol.matchhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match
&#x27;Sports&#x27;.match(/s/); // [&quot;s&quot;, index: 5, input: &quot;Sports&quot;] String 인스턴스 생성class Example &#123;  constructor(base) &#123;    this.base = base;  &#125;  [Symbol.match](target) &#123;    return this.base.indexOf(target) &gt;= 0;  &#125;&#125;const instance = new Example(&#x27;sports&#x27;);&#x27;s&#x27;.match(instance); // true Symbol.match() 호출// Symbol.match()&#x27;ABC&#x27;.includes(/ABC/); // 정규 표현식 사용 불가const regexp = /ABC/;regexp[Symbol.match] = false; // 정규표현식으로 인식하지 않도록 false 할당&#x27;/ABC/&#x27;.includes(regexp); // true &quot;/ABC/&quot;.includes(&quot;/ABC/&quot;)


문자열에 대한 정규 표현식의 판별 가능 여부를 지정한다.

Symbol.matchAllhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll
const regexp = /[0-9]+/g;const string = &#x27;2016-01-02|2019-03-07&#x27;;const result = regexp[Symbol.matchAll](string);Array.from(result, x =&gt; x[0]); // Array [&quot;2016&quot;, &quot;01&quot;, &quot;02&quot;, &quot;2019&quot;, &quot;03&quot;, &quot;07&quot;]


문자열과 정규식의 일치를 산출하는 반복기를 반환한다.

Symbol.replacehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace
class Example &#123;  constructor(value) &#123;    this.value = value;  &#125;  [Symbol.replace](string) &#123;    return `s/$&#123;string&#125;/$&#123;this.value&#125;/g`;  &#125;&#125;&#x27;abc&#x27;.replace(new Example(&#x27;def&#x27;)); // &quot;s/abc/def/g&quot;


문자열의 일치 하위 문자열을 대체하는 방법을 지정한다.

Symbol.searchhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search
class Example &#123;  constructor(value) &#123;    this.value = value;  &#125;  [Symbol.search](string) &#123;    return string.indexOf(this.value);  &#125;&#125;&#x27;abcdef&#x27;.search(new Example(&#x27;def&#x27;)); // 3


정규식과 일치하는 문자열 내에서 인덱스를 반환하는 방법을 지정한다.

Symbol.splithttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split
class Example &#123;  constructor(value) &#123;    this.value = value;  &#125;  [Symbol.split](string) &#123;    const index = string.indexOf(this.value);    return `$&#123;this.value&#125;$&#123;string.substr(0, index)&#125;/$&#123;string.substr(index + this.value.length)&#125;`;  &#125;&#125;&#x27;abcdef&#x27;.split(new Example(&#x27;abc&#x27;)); // &quot;abc/def&quot;


정규식과 일치하는 인덱스에서 문자열을 분할하는 방법을 지정한다.

Symbol.specieshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species

생성자 함수가 파생 객체를 만드는 데 사용하는 함수 값 속성을 지정한다.

Basicconst array = [1, 2, 3];const slice = array.slice(1, 3);array; // [1, 2, 3]slice; // [2, 3] 새로운 오브젝트 반환class ExtendsArray extends Array &#123;  static get [Symbol.species]() &#123; // Array 오브젝트의 [Symbol.species]() 가 오버라이드 됨    return Array; // Array의 constructor 호출 (인스턴스 반환)  &#125;&#125;const a = new ExtendsArray(1, 2, 3);a instanceof ExtendsArray; // truea instanceof Array; // trueconst b = a.slice(1, 3);b instanceof ExtendsArray; // falseb instanceof Array; // trueconst c = a.pop();c instanceof ExtendsArray; // falsec instanceof Array; // false

Return classclass ExtendsOne extends Array &#123;  one() &#123;    console.log(&#x27;one&#x27;);  &#125;&#125;class ExtendsTwo extends Array &#123;  static get [Symbol.species]() &#123;    return ExtendsOne; // ExtendsOne의 constructor 호출 (인스턴스 반환)  &#125;  two() &#123;    console.log(&#x27;two&#x27;);  &#125;&#125;const a = new ExtendsTwo(10, 20, 30);const b = a.filter(value =&gt; value &gt; 10);b; // [20, 30]b instanceof ExtendsOne; // trueb instanceof ExtendsTwo; // falseb.one(); // oneb.two(); // not a function

Symbol.toPrimitivehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive
1 + &#123;&#125;; // 1[object Object]&#x27;1&#x27; + &#123;&#125;; // 1[object Object]const object = &#123;  [Symbol.toPrimitive](hint) &#123;    if (hint === &#x27;number&#x27;) &#123;      return 50;    &#125;    if (hint === &#x27;string&#x27;) &#123;      return &#x27;문자열&#x27;;    &#125;    return &#x27;디폴트&#x27;;  &#125;&#125;;1 + object; // 1디폴트object + 1; // &quot;디폴트1&quot;+object + 1; // 511 * object; // 50`$&#123;object&#125;` + 1; // &quot;문자열1&quot;


개체를 해당 원시 값으로 변환하기 위해 호출되는 함수 값 속성을 지정한다.

Symbol.toStringTaghttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag

객체의 기본 문자열 설명 작성에 사용되는 문자열 값 속성이다.

Use propertyconst Example = function() &#123;&#125;;const instance = new Example();instance.toString(); // [object Object]Example.prototype[Symbol.toStringTag] = &#x27;Custom-Class&#x27;;instance.toString(); // [object Custom-Class]

Use class methodclass Example &#123;  // toString 메서드 실행시 get [Symbol.toStringTag] 호출 됨  get [Symbol.toStringTag]() &#123;    return &#x27;Custom-Class&#x27;;  &#125;&#125;const instance = new Example();instance.toString(); // [object Custom-Class]Map.prototype[Symbol.toStringTag]; // Map

Symbol.unscopableshttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables
const object = &#123; a: 1, b: 2 &#125;;with (object) &#123;  console.log(a, b); // 1 2&#125;object[Symbol.unscopables] = &#123; b: true &#125;;with (object) &#123;  console.log(a); // 1  console.log(b); // ReferenceError&#125;


연결된 객체의 환경 바인딩과 함께 자신의 속성 이름 및 상속된 속성 이름을 제외하는 객체 값을 지정한다.

Static methodsSymbol.forhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for
Symbol(&#x27;ABC&#x27;) === Symbol(&#x27;ABC&#x27;); // falseSymbol.for(&#x27;ABC&#x27;) === Symbol.for(&#x27;ABC&#x27;); // true


지정된 키를 사용하여 런타임 범위 심볼 레지스트리의 기존 심볼을 검색하고 찾은 경우 반환한다.그렇지 않으면 이 키를 사용하여 전역 심볼 레지스트리에 새 심볼을 생성한다.

Symbol.keyForhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor
const a = Symbol(&#x27;111&#x27;);Symbol.keyFor(a); // undefinedconst b = Symbol.for(&#x27;222&#x27;);Symbol.keyFor(b); // 222


글로벌 심볼 레지스트리에서 프로퍼티 키 값을 반환한다.

Instance propertiesdescriptionhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description
Symbol(&#x27;abc&#x27;).description; // &quot;abc&quot;Symbol.iterator.description; // &quot;Symbol.iterator&quot;Symbol.for(&#x27;abc&#x27;).description; // &quot;abc&quot;`$&#123;Symbol(&#x27;abc&#x27;).description&#125;def`; // abcdef


심볼 개체의 설명을 반환하는 문자열이다.

Instance methodstoSourcehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toSource
toStringhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString
Symbol(&#x27;abc&#x27;).toString(); // Symbol(abc)Symbol.for(&#x27;def&#x27;).toString(); // Symbol(def)Symbol.iterator.toString(); // Symbol(Symbol.iterator)


심볼을 문자열로 변환한다.

valueOfhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf
Symbol(&#x27;123&#x27;).valueOf(); // Symbol(123)Symbol.for(&#x27;abc&#x27;).valueOf(); // Symbol(abc)


심볼로 생성한 값을 반환한다.

@@toPrimitivehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>symbol</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - Algorithm</title>
    <url>/javascript-libraries/algorithm/</url>
    <content><![CDATA[Fibonaccifunction fibonacci(n) &#123;  const list = [0, 1];  for (let i = 2; i &lt; n + 1; i += 1) &#123;    list.push(list[i - 2] + list[i - 1]);  &#125;  return list[n];&#125;


n-2 번째와 n-1 번째 수를 합하여 n 번째 수로 나타내는 수열을 피보나치 수열이라 한다.재귀 형태로 구현 시 불필요한 중복 호출이 발생하여 런타임이 길어진다.배열에 결과를 누적하여 처리하는 방법으로 구현하면 성능이 좋다.

Debouncefunction debounce(fn, timeout = 500)&#123;  let timer;  return (...args) =&gt; &#123;    clearTimeout(timer);    timer = setTimeout(() =&gt; &#123;      fn.apply(this, args);    &#125;, timeout);  &#125;;&#125; // const d = debounce(() =&gt; console.log(1));


특정 시간이 지난 후 하나의 이벤트만 발생시킨다.추천 검색어 API 호출에 적절하다.

Throttlefunction throttle(fn, timeout = 500) &#123;  let timer;  return () =&gt; &#123;    if (!timer) &#123;      timer = setTimeout(() =&gt; &#123;        timer = null;        fn.apply(this, arguments);      &#125;, timeout);    &#125;&#125;;&#125; // const t = throttle(() =&gt; console.log(1));


일정한 시간마다 이벤트를 발생시킨다.무한 스크롤링 UI 에 적절하다.

GCDfunction getGCD(a, b) &#123;  let result = 1;  for (let i = 2; i &lt;= Math.min(a, b); i++) &#123;    if ((a % i === 0) &amp;&amp; (b % i === 0)) &#123;      result = i;    &#125;  &#125;  return result;&#125;// 유클리드 호제법const getGCD = (a, b) =&gt; a % b === 0 ? b : getGCD(b, a % b);


최대 공약수를 구한다.2 부터 min(a, b) 까지 모든 정수로 나누어 본다.

LCMfunction getLCM(a, b) &#123;  let result = 1;  while (true) &#123;    if ((result % a == 0) &amp;&amp; (result % b == 0)) &#123;      break;    &#125;    result++;  &#125;  return result;&#125;// 유클리드 호제법const getLCM = (a, b) =&gt; a * b / getGCD(a, b);


최소 공배수를 구한다.두 수를 result 로 나누었을 때 나머지 값이 0 인지 확인한다.

Array traversal

const array = [  &#123; value: 1, children: [    &#123; value: 2, children: [      &#123; value: 3 &#125;,    ] &#125;,  ] &#125;,  &#123; value: 4, children: [    &#123; value: 5, children: [      &#123; value: 6 &#125;,    ] &#125;,    &#123; value: 7 &#125;,  ] &#125;,  &#123; value: 8, children: [    &#123; value: 9 &#125;,  ] &#125;,];

Breadth First Search (BFS)function bfs(array) &#123;  let stack = [...array];  while (stack.length &gt; 0) &#123;    let node = stack.shift();    console.log(node.value);    if (node.children &amp;&amp; node.children.length) &#123;      for (let i = 0; i &lt; node.children.length; i++) &#123;        stack.push(node.children[i]);      &#125;    &#125;  &#125;&#125;bfs(array); // 1 4 8 2 5 7 9 3 6

Depth First Search (DFS)function dfs(array) &#123;  let stack = [...array];  while (stack.length &gt; 0) &#123;    let node = stack.shift();    console.log(node.value);    if (node.children &amp;&amp; node.children.length) &#123;      stack.unshift(...node.children);    &#125;  &#125;&#125;dfs(array); // 1 2 3 4 5 6 7 8 9

Object traversal

const array = &#123;  value: 10,  left: &#123;    value: 5,    left: &#123;      value: 20,    &#125;,    right: &#123;      value: 7,    &#125;,  &#125;,  right: &#123;    value: 12,  &#125;,&#125;;

Breadth First Search (BFS)

function bfs(array) &#123;  let result = [];  let queue = [array];  let tempNode;  while (queue.length &gt; 0) &#123;    tempNode = queue.pop();    result.push(tempNode.value);    if (tempNode.left) queue.unshift(tempNode.left);    if (tempNode.right) queue.unshift(tempNode.right);  &#125;  return result;&#125;bfs(array); // [10, 5, 12, 20, 7]

Depth First Search (DFS)

function dfs(array) &#123;  let result = [];  let stack = [array];  let tempNode;  while (stack.length &gt; 0) &#123;    tempNode = stack.shift();    result.push(tempNode.value);    if (tempNode.right) stack.unshift(tempNode.right);    if (tempNode.left) stack.unshift(tempNode.left);  &#125;  return result;&#125;dfs(array); // [10, 5, 20, 7, 12]

Graph traversal

// Dataconst airports = [&#x27;PHX&#x27;, &#x27;BKK&#x27;, &#x27;OKC&#x27;, &#x27;JFK&#x27;, &#x27;LAX&#x27;, &#x27;MEX&#x27;, &#x27;EZE&#x27;, &#x27;HEL&#x27;, &#x27;LOS&#x27;, &#x27;LAP&#x27;, &#x27;LIM&#x27;];const routes = [  [&#x27;PHX&#x27;, &#x27;LAX&#x27;],  [&#x27;PHX&#x27;, &#x27;JFK&#x27;],  [&#x27;JFK&#x27;, &#x27;OKC&#x27;],  [&#x27;JFK&#x27;, &#x27;HEL&#x27;],  [&#x27;JFK&#x27;, &#x27;LOS&#x27;],  [&#x27;MEX&#x27;, &#x27;LAX&#x27;],  [&#x27;MEX&#x27;, &#x27;BKK&#x27;],  [&#x27;MEX&#x27;, &#x27;LIM&#x27;],  [&#x27;MEX&#x27;, &#x27;EZE&#x27;],  [&#x27;LIM&#x27;, &#x27;BKK&#x27;],];// Graphconst adjacencyList = new Map();// Create the Graphairports.forEach((airport) =&gt; &#123;  // Add node  adjacencyList.set(airport, []);&#125;);routes.forEach(([origin, destination]) =&gt; &#123;  // Add edge, undirected  adjacencyList.get(origin).push(destination);  adjacencyList.get(destination).push(origin);&#125;);console.log(adjacencyList);


공항 경유 포인트를 그래프로 생성한다.

Breadth First Search (BFS)function bfs(start) &#123;  const visited = new Set();  const queue = [start];  while (queue.length &gt; 0) &#123;    const airport = queue.shift();    const destinations = adjacencyList.get(airport);    for (const destination of destinations) &#123;      if (destination === &#x27;BKK&#x27;) &#123;        console.log(`BFS found Bangkok!`);      &#125;      if (!visited.has(destination)) &#123;        visited.add(destination);        queue.push(destination);      &#125;    &#125;  &#125;&#125;bfs(&#x27;PHX&#x27;);


너비 우선 탐색을 한다.최단 경로를 찾기 위해 큐 데이터 구조를 사용한다.FIFO (First In First Out) 선입 선출 개념에 따라 작동한다.메모리가 많이 필요하고 느리다.

Depth First Search (DFS)function dfs(start, visited = new Set()) &#123;  visited.add(start);  const destinations = adjacencyList.get(start);  for (const destination of destinations) &#123;    if (destination === &#x27;BKK&#x27;) &#123;      console.log(`DFS found Bangkok`);      return;    &#125;    if (!visited.has(destination)) &#123;      dfs(destination, visited);    &#125;  &#125;&#125;dfs(&#x27;PHX&#x27;);


깊이 우선 탐색을 한다.스택 구조를 사용한다.LIFO (Last In First Out) 후입 선출 개념에 따라 작동한다.메모리가 적게 필요하고 빠르다.

]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - WeakMap</title>
    <url>/javascript-global-objects/weak-map/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap


Instance methodsconst weakmap = new WeakMap([  [&#123;&#125;, &#x27;Object&#x27;]]);


Map 과 다르게 key 에 오브젝트만 지정 가능하다.가비지 컬렉터 (Garbage Collector) 를 자동으로 처리한다.CRUD (Create &#x2F; Read &#x2F; Update &#x2F; Delete) 하기 위한 기본 메서드만 제공한다.열거할 수 없다. (forEach, entries 등 메서드가 존재하지 않음)size 프로퍼티가 없다.

deletehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete
const weakmap = new WeakMap();const object = &#123;&#125;;weakmap.set(object, &#x27;Object&#x27;);weakmap.delete(object); // true

gethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get
const weakmap = new WeakMap();const object = &#123;&#125;;weakmap.set(object, &#x27;Object&#x27;);weakmap.get(object); // &quot;Object&quot;

hashttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has
const weakmap = new WeakMap();const object = &#123;&#125;;weakmap.set(object, &#x27;Object&#x27;);weakmap.has(object); // true

sethttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set
const map = new Map();(function() &#123;  map.set(&#123; item: &#x27;map&#x27; &#125;, &#x27;Keep&#x27;);&#125;()); // GC 대상 아님const weakmap = new WeakMap();(function() &#123;  weakmap.set(&#123; item: &#x27;weakmap&#x27; &#125;, &#x27;GC&#x27;);&#125;()); // GC 대상setTimeout(function() &#123;  console.log(map); // Entries 내용 있음  console.log(weakmap); // Entries 내용 없음&#125;, 1000);

ExamplesClearable WeakMapclass ClearableWeakMap &#123;  constructor(init) &#123;    this._wm = new WeakMap(init);  &#125;  clear() &#123;      this._wm = new WeakMap();  &#125;  delete(k) &#123;      return this._wm.delete(k);  &#125;  get(k) &#123;      return this._wm.get(k);  &#125;  has(k) &#123;      return this._wm.has(k);  &#125;  set(k, v) &#123;      this._wm.set(k, v);      return this;  &#125;&#125;const weakmap = new ClearableWeakMap();


clear 메서드가 없으므로 비슷하게 동작할 수 있는 클래스를 구현해서 사용한다.

]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>weak-map</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>keyed collections</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - ESLint v8.10.0</title>
    <url>/javascript-libraries/eslint/</url>
    <content><![CDATA[Setuphttps://eslint.org/docs/user-guide/getting-started
npm install --save-dev eslint

npm init @eslint/config

Ruleshttps://eslint.org/docs/rules
Airbnb javaScript style guidehttps://github.com/airbnb/javascript
]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>eslint</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - WeakSet</title>
    <url>/javascript-global-objects/weak-set/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet


Instance methodsconst string = new String(&#x27;a&#x27;);const number = new Number(1);const weakset = new WeakSet([string, number]);try &#123;  new WeakSet([&#x27;b&#x27;, 2]);&#125; catch (error) &#123;  console.log(&#x27;object 이외 지정 불가&#x27;);&#125;


약하게 유지되는 객체를 컬렉션에 저장할 수 있다.WeakMap 특징과 동일하다.

addhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add
const weakset = new WeakSet();weakset.add(&#123; &#x27;a&#x27;: 1 &#125;);weakset.add(new String(&#x27;b&#x27;));weakset.add(&#x27;c&#x27;); // TypeError

deletehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete
const weakset = new WeakSet();const string = new String(&#x27;a&#x27;);weakset.delete(string); // true

hashttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has
const weakset = new WeakSet();const string = new String(&#x27;a&#x27;);weakset.has(string); // true
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>weak-set</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>keyed collections</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - FullPage.js v3.1.2</title>
    <url>/javascript-libraries/fullpage/</url>
    <content><![CDATA[
  
  
    
      
      
        Enter password.
      
    
  

]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>fullpage</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Global Object - WebAssembly</title>
    <url>/javascript-global-objects/web-assembly/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly


Static methodsWebAssembly.instantiatehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate
WebAssembly.instantiateStreaminghttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming
WebAssembly.compilehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile
WebAssembly.compileStreaminghttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming
WebAssembly.validatehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate
Modulehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module
Instancehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance
Memoryhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory
Tablehttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table
CompileErrorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/CompileError
LinkErrorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError
RuntimeErrorhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/RuntimeError
ExamplesFFMPEG.WASMhttps://github.com/ffmpegwasm/ffmpeg.wasmhttps://ffmpeg.org/ffmpeg.html
ArgumentscreateFFmpeg(&#123;  corePath: &#x27;./node_modules/@ffmpeg/core/dist/ffmpeg-core.js&#x27;,  log: false,  logger: (&#123; message &#125;) =&gt; console.log(message),  progress: (p) =&gt; console.log(p),&#125;);

Methods(async () =&gt; &#123;  // ffmpeg.wasm-core 스크립트 로드  await ffmpeg.load();  // &#x27;ffmpeg -i flame.avi -s 1920x1080 output.mp4&#x27; 실행  await ffmpeg.run(&#x27;-i&#x27;, &#x27;flame.avi&#x27;, &#x27;-s&#x27;, &#x27;1920x1080&#x27;, &#x27;output.mp4&#x27;);  // MEMFS 에 데이터 쓰기, 바이너리 데이터에 Uint8Array 를 사용해야 함  ffmpeg.FS(&#x27;writeFile&#x27;, &#x27;video.avi&#x27;, new Uint8Array(...));  // MEMFS 에서 데이터 읽기  ffmpeg.FS(&#x27;readFile&#x27;, &#x27;video.mp4&#x27;);  // MEMFS 에서 파일 삭제  ffmpeg.FS(&#x27;unlink&#x27;, &#x27;video.mp4&#x27;);  // 프로그램 실행을 종료하고 메모리를 확보하기 위해 MEMFS 제거  ffmpeg.exit();  // 로그 상태  ffmpeg.setLogging(true);    // 로거 함수  ffmpeg.setLogger((&#123; type, message &#125;) =&gt; &#123;    console.log(type, message);  &#125;);    // 진행률 처리기  ffmpeg.setProgress((&#123; ratio &#125;) =&gt; &#123;    console.log(ratio);  &#125;);  // 비디오 파일을 가져옴  const data = await fetchFile(&#x27;https://github.com/ffmpegwasm/testdata/raw/master/video-3s.avi&#x27;);&#125;)();

Core SharedArrayBuffer/vite.config.jsimport &#123; defineConfig &#125; from &#x27;vite&#x27;;export default defineConfig(&#123;  server: &#123;    headers: &#123;      &#x27;Cross-Origin-Opener-Policy&#x27;: &#x27;same-origin&#x27;,      &#x27;Cross-Origin-Embedder-Policy&#x27;: &#x27;require-corp&#x27;,    &#125;,  &#125;,&#125;);


corePath 의 SharedArrayBuffer 가 작동하려면 해당 기능을 사용하는 스크립트도 헤더를 통해 옵트인해야 하기 때문에 devServer.headers 에 내용을 추가해야 한다.

Encoding MP4import &#123; createFFmpeg, fetchFile &#125; from &#x27;@ffmpeg/ffmpeg&#x27;;const ffmpeg = createFFmpeg(&#123; log: true &#125;);const $video = document.querySelector(&#x27;#player&#x27;);const handleChange = async (&#123; target: &#123; files &#125; &#125;) =&gt; &#123;  // 이름이 한글일 경우 동작하지 않기 때문에 파일을 새로 생성 후 처리  const file = new File(files, `video.$&#123;files[0].type.split(&#x27;/&#x27;)[1]&#125;`, &#123; type: files[0].type &#125;);  const &#123; name &#125; = file;  ffmpeg.isLoaded() || await ffmpeg.load();  ffmpeg.FS(&#x27;writeFile&#x27;, name, await fetchFile(file));  await ffmpeg.run(&#x27;-i&#x27;, name, &#x27;output.mp4&#x27;);  const data = ffmpeg.FS(&#x27;readFile&#x27;, &#x27;output.mp4&#x27;);  $video.src = URL.createObjectURL(new Blob([data.buffer], &#123; type: &#x27;video/mp4&#x27; &#125;));  ffmpeg.exit();&#125;document.getElementById(&#x27;uploader&#x27;).addEventListener(&#x27;change&#x27;, handleChange);

Get FPSimport &#123; createFFmpeg, fetchFile &#125; from &#x27;@ffmpeg/ffmpeg&#x27;;const ffmpeg = createFFmpeg(&#123;  logger: (&#123; message &#125;) =&gt; &#123;    if (~message.indexOf(&#x27;Invalid data found when processing input&#x27;)) &#123;      Object.assign(ffmpeg, &#123; invalid: true, fps: null &#125;);    &#125;    if (~message.indexOf(&#x27;fps&#x27;)) &#123;      const fps = Number(message.split(&#x27;kb/s, &#x27;)[1].split(&#x27; fps&#x27;)[0]);      fps &amp;&amp; Object.assign(ffmpeg, &#123; invalid: false, fps &#125;);    &#125;  &#125;&#125;);const handleChange = async (&#123; target: &#123; files &#125; &#125;) =&gt; &#123;  // 이름이 한글일 경우 동작하지 않기 때문에 파일을 새로 생성 후 처리  const file = new File(files, `video.$&#123;files[0].type.split(&#x27;/&#x27;)[1]&#125;`, &#123; type: files[0].type &#125;);  const &#123; name &#125; = file;  ffmpeg.isLoaded() || await ffmpeg.load();  ffmpeg.FS(&#x27;writeFile&#x27;, name, await fetchFile(file));  await ffmpeg.run(&#x27;-i&#x27;, name);  console.log(ffmpeg.invalid, ffmpeg.fps);  // false 29.97  // true null =&gt; 비디오 아님  ffmpeg.exit();&#125;document.getElementById(&#x27;uploader&#x27;).addEventListener(&#x27;change&#x27;, handleChange);

Get Imageimport &#123; createFFmpeg, fetchFile &#125; from &#x27;@ffmpeg/ffmpeg&#x27;;const ffmpeg = createFFmpeg(&#123; log: true &#125;);const createImages = (options) =&gt; &#123;  return new Promise(async (resolve) =&gt; &#123;    const &#123; videoFile, videoSeeks, imageWidth &#125; = Object.assign(&#123;      videoFile: null,      videoSeeks: [&#x27;00:00:00&#x27;],      imageWidth: 100,    &#125;, options);    if (!videoFile) throw Error(&#x27;Required file&#x27;);    const &#123; name &#125; = videoFile;    ffmpeg.isLoaded() || await ffmpeg.load();    ffmpeg.FS(&#x27;writeFile&#x27;, name, await fetchFile(videoFile));    for (let i = 0; i &lt; videoSeeks.length; i++) &#123;      const time = videoSeeks[i];      const image = `image-$&#123;i&#125;.jpg`;      const $image = document.createElement(&#x27;img&#x27;);      // -ss 00:00:05 시간을 먼저 적용하면 빠름      // -vf select=eq(n\,34) 35번 프레임 // https://superuser.com/questions/1009969/how-to-extract-a-frame-out-of-a-video-using-ffmpeg      // -q:v 5 이미지 퀄리티 (1 좋음 ~ 35 나쁨)      // -frames:v 1 한 개의 비디오 프레임만 처리      // -s 200x100 이미지 사이즈 (비율 유지되지 않음)      // -vf scale=200:-1 이미지 사이즈 (비율 유지 함)      await ffmpeg.run(&#x27;-ss&#x27;, time, &#x27;-i&#x27;, name, &#x27;-frames:v&#x27;, &#x27;1&#x27;, &#x27;-vf&#x27;, `scale=$&#123;imageWidth&#125;:-1`, &#x27;-q:v&#x27;, &#x27;5&#x27;, image);      $image.src = URL.createObjectURL(new Blob([ffmpeg.FS(&#x27;readFile&#x27;, image).buffer], &#123; type: &#x27;image/jpeg&#x27; &#125;));      document.body.appendChild($image);    &#125;    ffmpeg.exit();    resolve();  &#125;);&#125;const handleChange = async (&#123; target: &#123; files &#125; &#125;) =&gt; &#123;  // 이름이 한글일 경우 동작하지 않기 때문에 파일을 새로 생성 후 처리  const videoFile = new File(files, `video.$&#123;files[0].type.split(&#x27;/&#x27;)[1]&#125;`, &#123; type: files[0].type &#125;);  await createImages(&#123;    videoFile,    videoSeeks: [      &#x27;00:00:30&#x27;,      &#x27;00:02:00&#x27;,    ],    imageWidth: 300,  &#125;);  console.log(&#x27;DONE!&#x27;);&#125;;document.getElementById(&#x27;uploader&#x27;).addEventListener(&#x27;change&#x27;, handleChange);

MediaInfo.jshttps://mediainfo.js.org
Webpackconst &#123; resolve &#125; = require(&#x27;path&#x27;);const CopyPlugin = require(&#x27;copy-webpack-plugin&#x27;);module.exports = &#123;  configureWebpack: &#123;    plugins: [      new CopyPlugin(&#123;        patterns: [          &#123;            from: resolve(__dirname, &#x27;node_modules&#x27;, &#x27;mediainfo.js&#x27;, &#x27;dist&#x27;, &#x27;MediaInfoModule.wasm&#x27;),            to: &#x27;./js/&#x27;,          &#125;,        ],      &#125;),    ],  &#125;,&#125;;

import MediaInfo from &#x27;mediainfo.js&#x27;;const readChunk = (file) =&gt; (chunkSize, offset) =&gt;  new Promise((resolve, reject) =&gt; &#123;    const reader = new FileReader();    reader.onload = (&#123; target &#125;) =&gt; &#123;      const &#123; error, result &#125; = target;      if (error) reject(error);      resolve(new Uint8Array(result));    &#125;;    reader.readAsArrayBuffer(file.slice(offset, offset + chunkSize));&#125;);MediaInfo().then((mediainfo) =&gt; &#123;  mediainfo.analyzeData(() =&gt; filtered[0].size, readChunk(filtered[0])).then((result) =&gt; &#123;    console.log(result);  &#125;).catch((error) =&gt; &#123;    console.log(error);  &#125;).finally(() =&gt; &#123;    // remove loading  &#125;);&#125;);
]]></content>
      <categories>
        <category>javascript-global-objects</category>
        <category>web-assembly</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - GSAP v3.9.1</title>
    <url>/javascript-libraries/gsap/</url>
    <content><![CDATA[
  https://greensock.com/docs/v3


const options = &#123;  callbackScope,  data,  delay,  duration,  ease,  id,  immediateRender,  inherit,  lazy,  onComplete,  onCompleteParams,  onInterrupt,  onInterruptParams,  onRepeat,  onRepeatParams,  onReverseComplete,  onReverseCompleteParams,  onStart,  onStartParams,  onUpdate,  onUpdateParams,  overwrite,  paused,  repeat,  repeatDelay,  repeatRefresh,  reversed,  runBackwards,  stagger: &#123; // https://greensock.com/docs/v3/Staggers    amount: 2, // 분할되는 총 시간 (초)    each: 0.1, // 분할되는 간격 시간 (초)    from: &#x27;center&#x27;, // 시작 위치 (start, center, edges, end, random)    grid: &#x27;auto&#x27;, // 행, 열    axis: &#x27;x&#x27;, // 하나의 축에만 초점을 맞춤 (x, y)    ease: &#x27;none&#x27;,    repeat: -1,    yoyo: true,    onComplete () &#123;&#125;,  &#125;,  startAt,  yoyo,  yoyoEase,  keyframes: [ // 간단한 타임라인 애니메이션 구현 가능    &#123; x: 100, duration: 1 &#125;,    &#123; y: 200, duration: 1, delay: 0.5 &#125;,    &#123; rotation: 360, duration: 2, delay: -0.25 &#125;, // overlap by 0.25 seconds  ],&#125;;gsap.set(&#x27;selector&#x27;, options);gsap.to(&#x27;selector&#x27;, options);gsap.from(&#x27;selector&#x27;, options);gsap.fromTo(&#x27;selector&#x27;, &#123; scale: 0 &#125;, &#123; duration: 0.3, scale: 1 &#125;);

SetupUse NPMnpm install --save gsap

Use CDNhttps://greensock.com/docs/v3/Installation#CDN
GSAPPropertieseffectshttps://greensock.com/docs/v3/GSAP/gsap.effects
globalTimelinehttps://greensock.com/docs/v3/GSAP/gsap.globalTimeline
tickerhttps://greensock.com/docs/v3/GSAP/gsap.ticker
utilshttps://greensock.com/docs/v3/GSAP/gsap.utils
Methodsconfighttps://greensock.com/docs/v3/GSAP/gsap.config()
defaultshttps://greensock.com/docs/v3/GSAP/gsap.defaults()
delayedCallhttps://greensock.com/docs/v3/GSAP/gsap.delayedCall()
exportRoothttps://greensock.com/docs/v3/GSAP/gsap.exportRoot()
fromhttps://greensock.com/docs/v3/GSAP/gsap.from()
fromTohttps://greensock.com/docs/v3/GSAP/gsap.fromTo()
getByIdhttps://greensock.com/docs/v3/GSAP/gsap.getById()
getPropertyhttps://greensock.com/docs/v3/GSAP/gsap.getProperty()
getTweensOfhttps://greensock.com/docs/v3/GSAP/gsap.getTweensOf()
isTweeninghttps://greensock.com/docs/v3/GSAP/gsap.isTweening()
killTweensOfhttps://greensock.com/docs/v3/GSAP/gsap.killTweensOf()
parseEasehttps://greensock.com/docs/v3/GSAP/gsap.parseEase()
quickSetterhttps://greensock.com/docs/v3/GSAP/gsap.quickSetter()
registerEasehttps://greensock.com/docs/v3/GSAP/gsap.registerEase()
registerEffecthttps://greensock.com/docs/v3/GSAP/gsap.registerEffect()
gsap.registerEffect(&#123;  name: &#x27;fade&#x27;,  defaults: &#123; duration: 2 &#125;,  effect(targets, config) =&gt; &#123;    return gsap.to(targets, &#123; duration: config.duration, opacity: 0 &#125;);  &#125;,&#125;);gsap.effects.fade(&#x27;.box&#x27;, &#123; rotation: 180 &#125;);

registerPluginhttps://greensock.com/docs/v3/GSAP/gsap.registerPlugin()
sethttps://greensock.com/docs/v3/GSAP/gsap.set()
timelinehttps://greensock.com/docs/v3/GSAP/gsap.timeline()
tohttps://greensock.com/docs/v3/GSAP/gsap.to()
updateRoothttps://greensock.com/docs/v3/GSAP/gsap.updateRoot()
TweenPropertiesdatahttps://greensock.com/docs/v3/GSAP/Tween/data
ratiohttps://greensock.com/docs/v3/GSAP/Tween/ratio
varshttps://greensock.com/docs/v3/GSAP/Tween/vars
Methodsdelayhttps://greensock.com/docs/v3/GSAP/Tween/delay()
durationhttps://greensock.com/docs/v3/GSAP/Tween/duration()
endTimehttps://greensock.com/docs/v3/GSAP/Tween/endTime()
eventCallbackhttps://greensock.com/docs/v3/GSAP/Tween/eventCallback()
invalidatehttps://greensock.com/docs/v3/GSAP/Tween/invalidate()
isActivehttps://greensock.com/docs/v3/GSAP/Tween/isActive()
iterationhttps://greensock.com/docs/v3/GSAP/Tween/iteration()
killhttps://greensock.com/docs/v3/GSAP/Tween/kill()
pausehttps://greensock.com/docs/v3/GSAP/Tween/pause()
pausedhttps://greensock.com/docs/v3/GSAP/Tween/paused()
playhttps://greensock.com/docs/v3/GSAP/Tween/play()
progresshttps://greensock.com/docs/v3/GSAP/Tween/progress()
repeathttps://greensock.com/docs/v3/GSAP/Tween/repeat()
repeatDelayhttps://greensock.com/docs/v3/GSAP/Tween/repeatDelay()
restarthttps://greensock.com/docs/v3/GSAP/Tween/restart()
resumehttps://greensock.com/docs/v3/GSAP/Tween/resume()
reversehttps://greensock.com/docs/v3/GSAP/Tween/reverse()
reversedhttps://greensock.com/docs/v3/GSAP/Tween/reversed()
seekhttps://greensock.com/docs/v3/GSAP/Tween/seek()
startTimehttps://greensock.com/docs/v3/GSAP/Tween/startTime()
targetshttps://greensock.com/docs/v3/GSAP/Tween/targets()
thenhttps://greensock.com/docs/v3/GSAP/Tween/then()
timehttps://greensock.com/docs/v3/GSAP/Tween/time()
timeScalehttps://greensock.com/docs/v3/GSAP/Tween/timeScale()
totalDurationhttps://greensock.com/docs/v3/GSAP/Tween/totalDuration()
totalProgresshttps://greensock.com/docs/v3/GSAP/Tween/totalProgress()
totalTimehttps://greensock.com/docs/v3/GSAP/Tween/totalTime()
yoyohttps://greensock.com/docs/v3/GSAP/Tween/yoyo()
Timelineconst options = &#123; x: 100, duration: 1 &#125;;const timeline = gsap.timeline(&#123;  autoRemoveChildren,  callbackScope,  delay,  onComplete,  onCompleteParams,  onRepeat,  onRepeatParams,  onReverseComplete,  onReverseCompleteParams,  onStart,  onStartParams,  onUpdate,  onUpdateParams,  paused,  repeat,  repeatDelay,  repeatRefresh,  smoothChildTiming,  yoyo,&#125;);timeline.to(&#x27;selector&#x27;, options, 0.5); // 0.5 초 위치timeline.to(&#x27;selector&#x27;, options, &#x27;-=0.5&#x27;); // 현재 위치에서 0.5 초 이전 위치timeline.to(&#x27;selector&#x27;, options, &#x27;label&#x27;); // label 위치timeline.to(&#x27;selector&#x27;, options, &#x27;label+=0.5&#x27;); // label 위치에서 0.5 초 이후 위치timeline.to(&#x27;selector&#x27;, options, &#x27;&lt;&#x27;); // 가장 최근에 추가된 타임라인 위치timeline.to(&#x27;selector&#x27;, options, &#x27;&lt;0.5&#x27;); // 가장 최근에 추가된 타임라인 위치에서 0.5 초 이후 위치

PropertiesautoRemoveChildrenhttps://greensock.com/docs/v3/GSAP/Timeline/autoRemoveChildren
datahttps://greensock.com/docs/v3/GSAP/Timeline/data
labelshttps://greensock.com/docs/v3/GSAP/Timeline/labels
parenthttps://greensock.com/docs/v3/GSAP/Timeline/parent
smoothChildTiminghttps://greensock.com/docs/v3/GSAP/Timeline/smoothChildTiming
varshttps://greensock.com/docs/v3/GSAP/Timeline/vars
Methodsaddhttps://greensock.com/docs/v3/GSAP/Timeline/add()
addLabelhttps://greensock.com/docs/v3/GSAP/Timeline/addLabel()
addPausehttps://greensock.com/docs/v3/GSAP/Timeline/addPause()
callhttps://greensock.com/docs/v3/GSAP/Timeline/call()
clearhttps://greensock.com/docs/v3/GSAP/Timeline/clear()
currentLabelhttps://greensock.com/docs/v3/GSAP/Timeline/currentLabel()
delayhttps://greensock.com/docs/v3/GSAP/Timeline/delay()
durationhttps://greensock.com/docs/v3/GSAP/Timeline/duration()
endTimehttps://greensock.com/docs/v3/GSAP/Timeline/endTime()
eventCallbackhttps://greensock.com/docs/v3/GSAP/Timeline/eventCallback()
fromhttps://greensock.com/docs/v3/GSAP/Timeline/from()
fromTohttps://greensock.com/docs/v3/GSAP/Timeline/fromTo()
getByIdhttps://greensock.com/docs/v3/GSAP/Timeline/getById()
getChildrenhttps://greensock.com/docs/v3/GSAP/Timeline/getChildren()
getTweensOfhttps://greensock.com/docs/v3/GSAP/Timeline/getTweensOf()
invalidatehttps://greensock.com/docs/v3/GSAP/Timeline/invalidate()
isActivehttps://greensock.com/docs/v3/GSAP/Timeline/isActive()
iterationhttps://greensock.com/docs/v3/GSAP/Timeline/iteration()
killhttps://greensock.com/docs/v3/GSAP/Timeline/kill()
killTweensOfhttps://greensock.com/docs/v3/GSAP/Timeline/killTweensOf()
nextLabelhttps://greensock.com/docs/v3/GSAP/Timeline/nextLabel()
pausehttps://greensock.com/docs/v3/GSAP/Timeline/pause()
pausedhttps://greensock.com/docs/v3/GSAP/Timeline/paused()
playhttps://greensock.com/docs/v3/GSAP/Timeline/play()
previousLabelhttps://greensock.com/docs/v3/GSAP/Timeline/previousLabel()
progresshttps://greensock.com/docs/v3/GSAP/Timeline/progress()
recenthttps://greensock.com/docs/v3/GSAP/Timeline/recent()
removehttps://greensock.com/docs/v3/GSAP/Timeline/remove()
removeLabelhttps://greensock.com/docs/v3/GSAP/Timeline/removeLabel()
removePausehttps://greensock.com/docs/v3/GSAP/Timeline/removePause()
repeathttps://greensock.com/docs/v3/GSAP/Timeline/repeat()
repeatDelayhttps://greensock.com/docs/v3/GSAP/Timeline/repeatDelay()
restarthttps://greensock.com/docs/v3/GSAP/Timeline/restart()
resumehttps://greensock.com/docs/v3/GSAP/Timeline/resume()
reversehttps://greensock.com/docs/v3/GSAP/Timeline/reverse()
reversedhttps://greensock.com/docs/v3/GSAP/Timeline/reversed()
seekhttps://greensock.com/docs/v3/GSAP/Timeline/seek()
sethttps://greensock.com/docs/v3/GSAP/Timeline/set()
shiftChildrenhttps://greensock.com/docs/v3/GSAP/Timeline/shiftChildren()
startTimehttps://greensock.com/docs/v3/GSAP/Timeline/startTime()
thenhttps://greensock.com/docs/v3/GSAP/Timeline/then()
timehttps://greensock.com/docs/v3/GSAP/Timeline/time()
timeScalehttps://greensock.com/docs/v3/GSAP/Timeline/timeScale()
tohttps://greensock.com/docs/v3/GSAP/Timeline/to()
totalDurationhttps://greensock.com/docs/v3/GSAP/Timeline/totalDuration()
totalProgresshttps://greensock.com/docs/v3/GSAP/Timeline/totalProgress()
totalTimehttps://greensock.com/docs/v3/GSAP/Timeline/totalTime()
tweenFromTohttps://greensock.com/docs/v3/GSAP/Timeline/tweenFromTo()
tweenTohttps://greensock.com/docs/v3/GSAP/Timeline/tweenTo()
yoyohttps://greensock.com/docs/v3/GSAP/Timeline/yoyo()
Easehttps://greensock.com/docs/v3/Eases
CustomBouncehttps://greensock.com/docs/v3/Eases/CustomBounce
CustomEasehttps://greensock.com/docs/v3/Eases/CustomEase
CustomWigglehttps://greensock.com/docs/v3/Eases/CustomWiggle
ExpoScaleEasehttps://greensock.com/docs/v3/Eases/ExpoScaleEase
RoughEasehttps://greensock.com/docs/v3/Eases/RoughEase
SlowMohttps://greensock.com/docs/v3/Eases/SlowMo
SteppedEasehttps://greensock.com/docs/v3/Eases/SteppedEase
Utility methodscheckPrefixhttps://greensock.com/docs/v3/GSAP/UtilityMethods/checkPrefix()
clamphttps://greensock.com/docs/v3/GSAP/UtilityMethods/clamp()
distributehttps://greensock.com/docs/v3/GSAP/UtilityMethods/distribute()
getUnithttps://greensock.com/docs/v3/GSAP/UtilityMethods/getUnit()
interpolatehttps://greensock.com/docs/v3/GSAP/UtilityMethods/interpolate()
mapRangehttps://greensock.com/docs/v3/GSAP/UtilityMethods/mapRange()
normalizehttps://greensock.com/docs/v3/GSAP/UtilityMethods/normalize()
pipehttps://greensock.com/docs/v3/GSAP/UtilityMethods/pipe()
randomhttps://greensock.com/docs/v3/GSAP/UtilityMethods/random()
selectorhttps://greensock.com/docs/v3/GSAP/UtilityMethods/selector()
shufflehttps://greensock.com/docs/v3/GSAP/UtilityMethods/shuffle()
snaphttps://greensock.com/docs/v3/GSAP/UtilityMethods/snap()
splitColorhttps://greensock.com/docs/v3/GSAP/UtilityMethods/splitColor()
toArrayhttps://greensock.com/docs/v3/GSAP/UtilityMethods/toArray()
unitizehttps://greensock.com/docs/v3/GSAP/UtilityMethods/unitize()
wraphttps://greensock.com/docs/v3/GSAP/UtilityMethods/wrap()
wrapYoyohttps://greensock.com/docs/v3/GSAP/UtilityMethods/wrapYoyo()
PluginsAttrPluginhttps://greensock.com/docs/v3/GSAP/CorePlugins/AttrPlugin
CSSPluginhttps://greensock.com/docs/v3/GSAP/CorePlugins/CSSPlugin
CSSRulePluginhttps://greensock.com/docs/v3/Plugins/CSSRulePlugin
Draggablehttps://greensock.com/docs/v3/Plugins/Draggable
import &#123; gsap &#125; from &#x27;gsap&#x27;;import &#123; Draggable &#125; from &#x27;gsap/Draggable&#x27;;gsap.registerPlugin(Draggable);const draggable = Draggable.create(&#x27;selector&#x27;, &#123;  activeCursor,  allowContextMenu,  allowEventDefault,  allowNativeTouchScrolling,  autoScroll,  bounds,  callbackScope,  clickableTest,  cursor,  dragClickables,  dragResistance,  edgeResistance,  force3D,  liveSnap,  lockAxis,  minimumMovement,  onClick,  onClickParams,  onDrag,  onDragParams,  onDragEnd,  onDragEndParams,  onDragStart,  onDragStartParams,  onLockAxis,  onMove,  onPress,  onPressInit,  onPressParams,  onRelease,  onReleaseParams,  onThrowComplete,  onThrowUpdate,  inertia,  trigger,  type,  zIndexBoost,&#125;);

DrawSVGPluginhttps://greensock.com/docs/v3/Plugins/DrawSVGPlugin
EaselPluginhttps://greensock.com/docs/v3/Plugins/EaselPlugin
Fliphttps://greensock.com/docs/v3/Plugins/Flip
GSDevToolshttps://greensock.com/docs/v3/Plugins/GSDevTools
InertiaPluginhttps://greensock.com/docs/v3/Plugins/InertiaPlugin
ModifiersPluginhttps://greensock.com/docs/v3/GSAP/CorePlugins/ModifiersPlugin
MorphSVGPluginhttps://greensock.com/docs/v3/Plugins/MorphSVGPlugin
MotionPathPluginhttps://greensock.com/docs/v3/Plugins/MotionPathPlugin
MotionPathHelperhttps://greensock.com/docs/v3/Plugins/MotionPathHelper
Physics2DPluginhttps://greensock.com/docs/v3/Plugins/Physics2DPlugin
PhysicsPropsPluginhttps://greensock.com/docs/v3/Plugins/PhysicsPropsPlugin
PixiPluginhttps://greensock.com/docs/v3/Plugins/PixiPlugin
ScrambleTextPluginhttps://greensock.com/docs/v3/Plugins/ScrambleTextPlugin
ScrollToPluginhttps://greensock.com/docs/v3/Plugins/ScrollToPlugin
import &#123; gsap &#125; from &#x27;gsap&#x27;;import &#123; ScrollToPlugin &#125; from &#x27;gsap/ScrollToPlugin&#x27;;gsap.registerPlugin(ScrollToPlugin);$(&#x27;.menu-item&#x27;).each(function(index) &#123;  $(this).on(&#x27;click&#x27;, function() &#123;    gsap.to(window, &#123; duration: 1, scrollTo: &#123; y: `#section-$&#123;index + 1&#125;`, offsetY: 100 &#125; &#125;);  &#125;);&#125;);

ScrollTriggerhttps://greensock.com/docs/v3/Plugins/ScrollTrigger
import &#123; gsap &#125; from &#x27;gsap&#x27;;import &#123; ScrollTrigger &#125; from &#x27;gsap/ScrollTrigger&#x27;;gsap.registerPlugin(ScrollTrigger);ScrollTrigger.create(&#123;  animation,  anticipatePin: 1,  containerAnimation,  end: &#x27;20px 80%&#x27;,  endTrigger: &#x27;selector&#x27;,  fastScrollEnd,  horizontal: true,  id: &#x27;id&#x27;,  invalidateOnRefresh,  markers: true,  once: true,  onEnter,  onEnterBack,  onLeave,  onLeaveBack,  onRefresh,  onUpdate,  onScrubComplete,  onSnapComplete,  onToggle,  pin: true,  pinnedContainer,  pinReparent: true,  pinSpacer,  pinSpacing,  pinType,  preventOverlaps,  refreshPriority,  scroller,  scrub: true,  snap: 1 / 10,  start: &#x27;top center&#x27;,  toggleActions: &#x27;play pause resume reset&#x27;,  toggleClass: &#x27;active&#x27;,  trigger: &#x27;selector&#x27;,&#125;);

SnapPluginhttps://greensock.com/docs/v3/GSAP/CorePlugins/SnapPlugin
SplitTexthttps://greensock.com/docs/v3/Plugins/SplitText
TextPluginhttps://greensock.com/docs/v3/Plugins/TextPlugin
EndArrayPluginhttps://greensock.com/docs/v3/GSAP/CorePlugins/EndArrayPlugin
ExamplesCounter animationconst counter = &#123; number1: 0, number2: 0 &#125;;gsap.to(counter, &#123;  duration: 1,  number1: 150,  number2: 230,  onUpdate() &#123;    $target1.text(`$&#123;counter.number1&#125;%`);    $target2.text(`$&#123;counter.number2&#125;%`);  &#125;,&#125;);

Blur animation
  


Motion path SVG animation
  

]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>gsap</category>
      </categories>
      <tags>
        <tag>ease</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - Immutable v4.0.0</title>
    <url>/javascript-libraries/immutable/</url>
    <content><![CDATA[
  https://immutable-js.com/docs/v4.0.0


Setupnpm install --save immutable

Converthttps://immutable-js.com/docs/v4.0.0/fromJS()
import &#123; fromJS &#125; from &#x27;immutable&#x27;;const data = &#123;  a: 1,  b: &#123;    c: 2,    d: 3,  &#125;,&#125;;const serialized = fromJS(data); // Map(&#123; a: 1, b: Map(&#123; c: 2, d: 3 &#125;) &#125;)const deserialized = data.toJS(); // &#123; a: 1, b: &#123; c: 2 &#125; &#125;

Maphttps://immutable-js.com/docs/v4.0.0/Map
import &#123; Map &#125; from &#x27;immutable&#x27;;const data = Map(&#123;  a: 1,  b: Map(&#123;    c: 2,    d: 3,  &#125;),&#125;);// 길이console.log(data.size); // 2// 특정 키의 값 불러오기data.get(&#x27;a&#x27;); // 1// 깊숙이 위치하는 값 불러오기data.getIn([&#x27;b&#x27;, &#x27;c&#x27;]); // 2// 값 설정const newData = data.set(&#x27;a&#x27;, 10);console.log(data === newData); // false// 깊숙이 위치하는 값 설정const newData = data.setIn([&#x27;b&#x27;, &#x27;c&#x27;], 10);// 여러 값 동시에 설정const newData = data.mergeIn([&#x27;b&#x27;], &#123; c: 10, d: 20 &#125;);const newData = data.setIn([&#x27;b&#x27;, &#x27;c&#x27;], 10).data.setIn([&#x27;b&#x27;, &#x27;d&#x27;], 20); // 성능이 약간 빠르다// 키 삭제data.delete(&#x27;a&#x27;); // 단일 키 삭제data.deleteAll([ &#x27;a&#x27;, &#x27;b&#x27; ]); // 여러 키 삭제data.clear(); // 모든 키 삭제

Listhttps://immutable-js.com/docs/v4.0.0/List
import &#123; List, Map &#125; from &#x27;immutable&#x27;;const data = List([  Map(&#123; value: 1 &#125;),  Map(&#123; value: 2 &#125;),]);// 길이console.log(data.size); // 2// 값 불러오기data.get(0); // &#123; value: 1 &#125;// 깊숙이 위치하는 값 불러오기data.getIn([0, &#x27;value&#x27;]); // 1// 값 설정const newData = data.set(0, Map(&#123; value: 10 &#125;));// 깊숙이 위치하는 값 설정const newData = data.setIn([0, &#x27;value&#x27;], 10);// update 메서드 사용const newData = data.update(0, (item) =&gt; item.set(&#x27;value&#x27;, item.get(&#x27;value&#x27;) * 5));// 값 추가const newData = data.push(Map(&#123; value: 3 &#125;)); // 뒤로 추가const newData = data.unshift(Map(&#123; value: 3 &#125;)); // 앞으로 추가// 값 제거const newData = data.delete(1); // 1번 인덱스 제거const newData = data.pop(); // 마지막 인덱스 제거// 값 찾기const index = data.findIndex(obj =&gt; obj.get(&#x27;value&#x27;) === 2); // 1
]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>immutable</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - JS Zip v3.7.1</title>
    <url>/javascript-libraries/js-zip/</url>
    <content><![CDATA[
  https://stuk.github.io/jszip/documentation/api_jszip.html


Setupnpm install --save jszip

Readconst zip = new JSZip();try &#123;  const files = await zip.loadAsync(zipFile);  const aJSON = await files[&#x27;a.json&#x27;].async(&#x27;string&#x27;);  console.log(aJSON);&#125; catch (error) &#123;  console.log(error);&#125;

Writeconst zip = new JSZip();try &#123;  zip.file(&#x27;hello.txt&#x27;, &#x27;Hello World\n&#x27;);    zip.folder(&#x27;nested&#x27;).file(&#x27;smile.gif&#x27;, imgData, &#123; base64: true &#125;);    const zipFile = zip.generateAsync(&#123;type: &#x27;blob&#x27;&#125;);  console.log(zipFile); // Save file&#125; catch (error) &#123;  console.log(error);&#125;
]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>js-zip</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - Scroll Magic v2.0.7</title>
    <url>/javascript-libraries/scroll-magic/</url>
    <content><![CDATA[
  https://scrollmagic.io/docs/index.html


SetupUse NPMnpm install --save scrollmagic

Use CDN&lt;script src=&quot;http://cdnjs.cloudflare.com/ajax/libs/ScrollMagic/2.0.7/ScrollMagic.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;http://cdnjs.cloudflare.com/ajax/libs/ScrollMagic/2.0.7/plugins/debug.addIndicators.min.js&quot;&gt;&lt;/script&gt;

Init scrollmagicimport ScrollMagic from &#x27;scrollmagic&#x27;;const controller = new ScrollMagic.Controller();const scene = new ScrollMagic.Scene(&#123;&#125;);

Controllerhttps://scrollmagic.io/docs/ScrollMagic.Controller.html
addScenedestroyremoveScenescrollToupdateupdateSceneenabledloglevelscrollPosinfoScenehttps://scrollmagic.io/docs/ScrollMagic.Scene.html
addTocontrollerdestroyprogressrefreshremoveremoveClassToggleremovePinsetClassTogglesetPinupdatedurationenabledlogleveloffsetreversetriggerElementtriggerHookscrollOffsetstatetriggerPositionEventshttps://scrollmagic.io/docs/ScrollMagic.Scene.html#event:add
offontriggeraddchangedestroyendenterleaveprogressremoveshiftstartupdate]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>scroll-magic</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - JSON Server v0.17.0</title>
    <url>/javascript-libraries/json-server/</url>
    <content><![CDATA[
  https://github.com/typicode/json-server


SetupGlobal installnpm install -g json-server

Create DB file/src/db.json&#123;  &quot;posts&quot;: [    &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;abc&quot;, &quot;content&quot;: &quot;aabbcc&quot; &#125;  ]&#125;

Start serverjson-server --watch db.json --port 5000


GET http://localhost:5000/posts/1 요청하면 &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;abc&quot;, &quot;content&quot;: &quot;aabbcc&quot; &#125; 값으로 응답한다.

RoutesPlural routesGET    /postsGET    /posts/1POST   /postsPUT    /posts/1PATCH  /posts/1DELETE /posts/1

Singular routesGET    /profilePOST   /profilePUT    /profilePATCH  /profile

FilterGET /posts?title=json-server&amp;author=typicodeGET /posts?id=1&amp;id=2GET /comments?author.name=typicode

PaginateGET /posts?_page=7GET /posts?_page=7&amp;_limit=20

SortGET /posts?_sort=views&amp;_order=ascGET /posts/1/comments?_sort=votes&amp;_order=ascGET /posts?_sort=user,views&amp;_order=desc,asc

SliceGET /posts?_start=20&amp;_end=30GET /posts/1/comments?_start=20&amp;_end=30GET /posts/1/comments?_start=20&amp;_limit=10

OperatorsGET /posts?views_gte=10&amp;views_lte=20GET /posts?id_ne=1GET /posts?title_like=server

Full-text searchGET /posts?q=internet

RelationshipsGET /posts?_embed=commentsGET /posts/1?_embed=commentsGET /comments?_expand=postGET /comments/1?_expand=postGET  /posts/1/commentsPOST /posts/1/comments

DatabaseGET /db

HomepageGET /

Authhttps://github.com/jeremyben/json-server-auth
Setupnpm install --save-dev json-server-auth

Runjson-server db.json -m ./node_modules/json-server-auth --port 5000

RegisterPOST /register&#123;  &quot;email&quot;: &quot;olivier@mail.com&quot;,  &quot;password&quot;: &quot;bestPassw0rd&quot;,  &quot;firstname&quot;: &quot;Olivier&quot;,  &quot;lastname&quot;: &quot;Monge&quot;,  &quot;age&quot;: 32,  ...&#125;

201 Created&#123;  &quot;accessToken&quot;: &quot;xxx.xxx.xxx&quot;,  &quot;user&quot;: &#123;    &quot;id&quot;: 1,    &quot;email&quot;: &quot;olivier@mail.com&quot;  &#125;&#125;

LoginPOST /login&#123;  &quot;email&quot;: &quot;olivier@mail.com&quot;,  &quot;password&quot;: &quot;bestPassw0rd&quot;&#125;

200 OK&#123;  &quot;accessToken&quot;: &quot;xxx.xxx.xxx&quot;,  &quot;user&quot;: &#123;    &quot;id&quot;: 1,    &quot;email&quot;: &quot;olivier@mail.com&quot;,    &quot;firstname&quot;: &quot;Olivier&quot;,    &quot;lastname&quot;: &quot;Monge&quot;  &#125;&#125;

File Uploadhttps://www.npmjs.com/package/json-server-uploader
npm install --save-dev json-server-uploader

/.envUPLOAD_PATH=your/custom/path

Runjson-server db.json --middlewares ./node_modules/json-server-auth --middlewares ./node_modules/json-server-uploader --port 5000
]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>json-server</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - Skrollr v0.6.30</title>
    <url>/javascript-libraries/skrollr/</url>
    <content><![CDATA[
  https://github.com/Prinzhorn/skrollr
  http://prinzhorn.github.io/skrollr



애니메이션 이전 (skrollable-before), 진행중 (skrollable-between), 이후 (skrollable-after) 클래스로 상태 확인이 가능하다.display: none; 속성이 있는 요소는 동작하지 않는다.


  


Absolute modedata-[offset]-[anchor]
Top based&lt;!-- 스크롤 위 끝 --&gt;&lt;div data-0=&quot;opacity:0;&quot; /&gt;&lt;div data-start=&quot;opacity:0;&quot; /&gt;&lt;div data-0-start=&quot;opacity:0;&quot; /&gt;&lt;!-- 스크롤 위 끝에서부터 100px --&gt;&lt;div data-100=&quot;opacity:0;&quot; /&gt;&lt;div data-100-start=&quot;opacity:0;&quot; /&gt;&lt;!-- 스크롤 위 끝에서부터 30% --&gt;&lt;div data-30p=&quot;opacity:0;&quot; /&gt;&lt;div data-30p-start=&quot;opacity:0;&quot; /&gt;

Bottom based&lt;!-- 스크롤 아래 끝 --&gt;&lt;div data-end=&quot;opacity:0;&quot; /&gt;&lt;div data-0-end=&quot;opacity:0;&quot; /&gt;&lt;!-- 스크롤 아래 끝에서부터 100px --&gt;&lt;div data-100-end=&quot;opacity:0;&quot; /&gt;&lt;!-- 스크롤 아래 끝에서부터 30% --&gt;&lt;div data-30p-end=&quot;opacity:0;&quot; /&gt;

Relative modedata-[offset]-(viewport-anchor)-[element-anchor]
Top based&lt;!-- 요소 상단이 화면 상단에 위치 --&gt;&lt;div data-top=&quot;opacity:0;&quot; /&gt;&lt;div data-0-top=&quot;opacity:0;&quot; /&gt;&lt;div data-top-top=&quot;opacity:0;&quot; /&gt;&lt;div data-0-top-top=&quot;opacity:0;&quot; /&gt;&lt;!-- 요소 상단이 화면 상단 위치보다 100px 위에 위치 --&gt;&lt;div data--100-top=&quot;opacity:0;&quot; /&gt;&lt;div data--100-top-top=&quot;opacity:0;&quot; /&gt;&lt;!-- 요소 상단이 화면 상단 위치보다 100px 아래에 위치 --&gt;&lt;div data-100-top=&quot;opacity:0;&quot; /&gt;&lt;div data-100-top-top=&quot;opacity:0;&quot; /&gt;

Bottom based&lt;!-- 요소 하단이 화면 하단에 위치 --&gt;&lt;div data-bottom=&quot;opacity:0;&quot; /&gt;&lt;!-- 요소 하단이 화면 하단 위치보다 100px 아래에 위치 --&gt;&lt;div data-100-bottom=&quot;opacity:0;&quot; /&gt;&lt;!-- 요소 하단이 화면 하단 위치보다 100px 위에 위치 --&gt;&lt;div data--100-bottom=&quot;opacity:0;&quot; /&gt;

In screen
화면에서 보이지 않는 상태에서 스크롤에 화면 안으로 들어오면서 보이기 시작하는 시점이다.

Top&lt;div data-top-bottom=&quot;opacity:0;&quot; /&gt;&lt;div data-0-top-bottom=&quot;opacity:0;&quot; /&gt;

Center&lt;div data-center=&quot;opacity:0;&quot; /&gt;&lt;div data-0-center=&quot;opacity:0;&quot; /&gt;&lt;div data-center-center=&quot;opacity:0;&quot; /&gt;&lt;div data-0-center-center=&quot;opacity:0;&quot; /&gt;&lt;div data-center-top=&quot;opacity:0;&quot; /&gt;&lt;div data-center-bottom=&quot;opacity:0;&quot; /&gt;

Bottom&lt;div data-bottom-top=&quot;opacity:0;&quot; /&gt;&lt;div data-0-bottom-top=&quot;opacity:0;&quot; /&gt;

SVG animation&lt;path  style=&quot;fill:none;stroke:#333333;stroke-width:7;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:6000;stroke-dashoffset:0&quot;  d=&quot;...&quot;  data-0=&quot;stroke-dashoffset:6000;&quot;  data-end=&quot;stroke-dashoffset:0;&quot;/&gt;

OptionssmoothScrollinghttps://github.com/Prinzhorn/skrollr#smoothscrollingtrue
&lt;div data-smooth-scrolling=&quot;on&quot; /&gt;

skrollr.init(&#123;  smoothScrolling: true,&#125;);


부드러운 애니메이션 사용 여부를 결정한다.

smoothScrollingDurationhttps://github.com/Prinzhorn/skrollr#smoothscrollingduration200
skrollr.init(&#123;  smoothScrollingDuration: 200,&#125;);


부드러운 애니메이션 사용 시 시간을 설정한다.

constantshttps://github.com/Prinzhorn/skrollr#constants
&lt;div data-_a-start=&quot;opacity:0;&quot; /&gt;&lt;div data-_a-200=&quot;opacity:0;&quot; /&gt;&lt;!-- 결과: &lt;div data-300=&quot;opacity:0;&quot; /&gt; --&gt;

skrollr.init(&#123;  constants: &#123;    a: 100,    b() &#123;      return Math.random() * 100;    &#125;,  &#125;,&#125;);


상수를 설정한다. (사용 가능한 문자 a-z0-9_)

scalehttps://github.com/Prinzhorn/skrollr#scale1
skrollr.init(&#123;  scale: 1,&#125;);


전체 애니메이션 키프레임 스케일을 설정한다.

forceHeightskrollr.init(&#123;  forceHeight: true,&#125;);


모든 키프레임이 스크롤안에 들어갈 수 있도록 문서의 높이를 강제로 조정한다.

mobileCheckskrollr.init(&#123;  mobileCheck() &#123;    return (/Android|iPhone|iPad|iPod/i).test(navigator.userAgent || navigator.vendor || window.opera);  &#125;,&#125;);


모바일 검사 로직을 변경 가능하다.

mobileDecelerationhttps://github.com/Prinzhorn/skrollr#mobiledeceleration0004
skrollr.init(&#123;  mobileDeceleration: 0.004,&#125;);


모바일 스크롤링 감속량을 결정한다.

skrollrBodyhttps://github.com/Prinzhorn/skrollr#skrollrbodyskrollr-body
edgeStrategyhttps://github.com/Prinzhorn/skrollr#edgestrategyset
beforerenderhttps://github.com/Prinzhorn/skrollr#beforerender
skrollr.init(&#123;  beforerender(&#123; curTop, lastTop, maxTop, direction &#125;) &#123;    console.log(curTop, lastTop, maxTop, direction);  &#125;,&#125;);


렌더링 하기 전 호출된다.

renderhttps://github.com/Prinzhorn/skrollr#render
skrollr.init(&#123;  render(&#123; curTop, lastTop, maxTop, direction &#125;) &#123;    console.log(curTop, lastTop, maxTop, direction);    if (curTop === maxTop) &#123; // Loop      this.setScrollTop(0, true);    &#125;  &#125;,&#125;);


모든 요소를 렌더링한 후 호출된다.

keyframehttps://github.com/Prinzhorn/skrollr#keyframe
easinghttps://github.com/Prinzhorn/skrollr#easing

  linear
  quadratic
  cubic
  begin
  end
  swing
  sqrt
  outCubic
  bounce


&lt;div data-top=&quot;opacity[a]:0;&quot; data-end=&quot;opacity:1;&quot;&gt;&lt;/div&gt;

skrollr.init(&#123;  easing: &#123;    a: Math.random,    b(p) &#123;      return 1 - p;    &#125;  &#125;,&#125;);

Methodsrefreshhttps://github.com/Prinzhorn/skrollr#refreshelements
relativeToAbsolutehttps://github.com/Prinzhorn/skrollr#relativetoabsoluteelement-viewportanchor-elementanchor
getScrollTophttps://github.com/Prinzhorn/skrollr#getscrolltop
getMaxScrollTophttps://github.com/Prinzhorn/skrollr#getmaxscrolltop
setScrollTophttps://github.com/Prinzhorn/skrollr#setscrolltoptop-force--false
isMobilehttps://github.com/Prinzhorn/skrollr#ismobile
animateTohttps://github.com/Prinzhorn/skrollr#animatetotop-options
stopAnimateTohttps://github.com/Prinzhorn/skrollr#stopanimateto
isAnimatingTohttps://github.com/Prinzhorn/skrollr#isanimatingto
onhttps://github.com/Prinzhorn/skrollr#onname-fn
offhttps://github.com/Prinzhorn/skrollr#offname
destroyhttps://github.com/Prinzhorn/skrollr#destroy
]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>skrollr</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - Smooth Scrollbar v8.7.4</title>
    <url>/javascript-libraries/smooth-scrollbar/</url>
    <content><![CDATA[
  https://github.com/idiotWu/smooth-scrollbar
  https://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md
  https://idiotwu.github.io/smooth-scrollbar


Setupnpm install --save smooth-scrollbar

Static methodsScrollbar.inithttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarinit
Scrollbar.init(document.querySelector(&#x27;.scrollbar&#x27;), &#123;  damping: 0.1, // 값이 낮을 수록 스크롤이 더 부드러움  thumbMinSize: 20, // 스크롤 막대 최소 크기  renderByPixels: true, // 픽셀을 정수로 렌더링  alwaysShowTracks: false, // 스크롤바 트랙을 항상 노출  continuousScrolling: true, // 스크롤 끝에 도달하면 외부 스크롤 허용  delegateTo: null, // 주어진 요소에 휠 및 터치 이벤트를 위임  plugins: &#123;&#125;, // 플러그인 추가&#125;);


스크롤바를 한 개 생성한다.

Scrollbar.initAllhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarinitall

스크롤바를 여러 개 생성한다.

Scrollbar.hashttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarhas
Scrollbar.gethttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarget
Scrollbar.getAllhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbargetall
Scrollbar.destroyhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbardestroy
Scrollbar.destroyAllhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbardestroyall
Scrollbar.usehttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbaruse
import Scrollbar, &#123; ScrollbarPlugin &#125; from &#x27;smooth-scrollbar&#x27;;import OverscrollPlugin from &#x27;smooth-scrollbar/plugin/overscroll&#x27;;class MyPlugin extends ScrollbarPlugin &#123;&#125;Scrollbar.use(MyPlugin, OverscrollPlugin);


플러그인을 사용한다.

Scrollbar.attachStylehttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarattachstyle
Scrollbar.detachStylehttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbardetachstyle
Instance properties and methodscontainerElhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarcontainerel
contentElhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarcontentel
optionshttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbaroptions
sizehttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarsize
offsethttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbaroffset
limithttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarlimit
scrollLefthttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarscrollleft
scrollTophttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarscrolltop
trackhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbartrack
getSizehttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbargetsize
updatehttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarupdate
setPositionhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarsetposition
scrollTohttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarscrollto
scrollIntoViewhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarscrollintoview
isVisiblehttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarisvisible
addMomentumhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbaraddmomentum
setMomentumhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarsetmomentum
updatePluginOptionshttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarupdatepluginoptions
addListenerhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbaraddlistener
scrollbar.addListener((status) =&gt; &#123;  console.log(status);&#125;);


네이티브 스크롤 이벤트를 발생시키지 않기 때문에 리스너를 등록해야 한다.

removeListenerhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbarremovelistener
destroyhttps://github.com/idiotWu/smooth-scrollbar/blob/develop/docs/api.md#scrollbardestroy-1
]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>smooth-scrollbar</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - Three.js r138</title>
    <url>/javascript-libraries/three/</url>
    <content><![CDATA[
  https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene


SetupUse NPMnpm install --save three

ExamplesLoad gltf filehttps://threejsfundamentals.org/threejs/lessons/threejs-load-gltf.html
import * as THREE from &#x27;three&#x27;;import &#123; OrbitControls &#125; from &#x27;three/examples/jsm/controls/OrbitControls&#x27;;import &#123; GLTFLoader &#125; from &#x27;three/examples/jsm/loaders/GLTFLoader&#x27;;import &#123; Interaction &#125; from &#x27;three.interaction&#x27;;import $ from &#x27;jquery&#x27;;(($) =&gt; &#123;  const _private = &#123;&#125;;    $(() =&gt; init());    async function init() &#123;    const canvas = document.querySelector(&#x27;#canvas&#x27;);    const renderer = new THREE.WebGLRenderer(&#123; canvas &#125;);    const scene = new THREE.Scene();    const camera = new THREE.PerspectiveCamera(45, canvas.clientWidth / canvas.clientHeight, 0.1, 100);    const controls = new OrbitControls(camera, canvas);    const interaction = new Interaction(renderer, scene, camera);    const clock = new THREE.Clock();    Object.assign(_private, &#123; canvas, renderer, scene, camera, controls, interaction, clock &#125;);    addLight();    addHouse();    requestAnimationFrame(render);  &#125;    function addLight() &#123;    const &#123; scene &#125; = _private;      const hLight = new THREE.HemisphereLight(0xB1E1FF, 0xB97A20, 1);    scene.add(hLight);      const dLight = new THREE.DirectionalLight(0xFFFFFF, 1);    dLight.position.set(5, 10, 2);      scene.add(dLight);    scene.add(dLight.target);  &#125;    function gltfLoader(url) &#123;    const gltfLoader = new GLTFLoader();      return new Promise((resolve, reject) =&gt; &#123;      gltfLoader.load(url, (gltf) =&gt; &#123;        resolve(gltf);      &#125;, (xhr) =&gt; &#123;        console.log((xhr.loaded / xhr.total * 100) + &#x27;% loaded&#x27;);      &#125;, reject);    &#125;);  &#125;    async function addHouse() &#123;    const &#123; scene, camera, controls &#125; = _private;      const gltf = await gltfLoader(&#x27;gltf/Town_HE/T_C.gltf&#x27;);    const gltfScene = gltf.scene;    gltfScene.rotation.y = -0.597;      scene.add(gltfScene);      const gltfAnimations = gltf.animations;    const mixer = new THREE.AnimationMixer(gltfScene);    gltfAnimations.forEach((clip) =&gt; &#123;      mixer.clipAction(clip).play();    &#125;);      Object.assign(_private, &#123; mixer &#125;);      const box = new THREE.Box3().setFromObject(gltfScene);    const boxSize = box.getSize(new THREE.Vector3()).length();    const boxCenter = box.getCenter(new THREE.Vector3());    const distance = boxSize * 0.15 / Math.tan(THREE.Math.degToRad(camera.fov * 0.5));    const direction = (new THREE.Vector3())      .subVectors(camera.position, boxCenter)      .multiply(new THREE.Vector3(1, 0, 1))      .normalize();      camera.position.copy(direction.multiplyScalar(distance).add(boxCenter));    camera.near = boxSize / 500;    camera.far = boxSize * 100;    camera.updateProjectionMatrix();      controls.maxDistance = boxSize;    controls.update();  &#125;    function resizeRendererToDisplaySize(renderer) &#123;    const canvas = renderer.domElement;    const width = canvas.clientWidth;    const height = canvas.clientHeight;    const needResize = canvas.width !== width || canvas.height !== height;      if (needResize) &#123;      renderer.setSize(width, height, false);    &#125;      return needResize;  &#125;    function render() &#123;    const &#123; renderer, scene, camera, clock, mixer &#125; = _private;      if (resizeRendererToDisplaySize(renderer)) &#123;      const canvas = renderer.domElement;        camera.aspect = canvas.clientWidth / canvas.clientHeight;      camera.updateProjectionMatrix();    &#125;      if (mixer) &#123;      mixer.update(clock.getDelta());    &#125;      renderer.render(scene, camera);      requestAnimationFrame(render);  &#125;&#125;)(window.jQuery);

Load 360 movie/*three.jsOrbitControls.jsjquery-1.12.1.min.jsjquery.bpopup.min.js*/const scene = new THREE.Scene();const raycaster = new THREE.Raycaster();const mouse = new THREE.Vector2();let INTERSECTED;const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 1100);camera.target = new THREE.Vector3(0, 0, 0);camera.position.z = 10;const renderer = new THREE.WebGLRenderer();renderer.setPixelRatio(window.devicePixelRatio);renderer.setSize(window.innerWidth, window.innerHeight);document.getElementById(&#x27;container&#x27;).appendChild(renderer.domElement);const controls = new THREE.OrbitControls(camera, renderer.domElement);controls.addEventListener(&#x27;change&#x27;, render);controls.enableDamping = true;controls.dampingFactor = 0.25;controls.enableZoom = true;controls.maxDistance = 600;const geometry = new THREE.SphereBufferGeometry(500, 60, 40);geometry.scale(-1, 1, 1);const video = document.createElement(&#x27;video&#x27;);video.width = 640;video.height = 360;video.loop = true;video.muted = true;video.src = &#x27;source.webm&#x27;;video.setAttribute(&#x27;webkit-playsinline&#x27;, &#x27;webkit-playsinline&#x27;);video.play();const texture = new THREE.VideoTexture(video);texture.minFilter = THREE.LinearFilter;texture.format = THREE.RGBFormat;const material = new THREE.MeshBasicMaterial(&#123; map : texture &#125;);const mesh = new THREE.Mesh(geometry, material);scene.add(mesh);const geometryCube = new THREE.BoxGeometry(50, 50, 50);const materialCube = new THREE.MeshLambertMaterial(&#123; color: 0xff00ff, wireframe: false &#125;);const cube = new THREE.Mesh(geometryCube, materialCube);cube.position.set(-350, -340, 0);cube.rotation.x = Math.random() * 2 * Math.PI;cube.rotation.y = Math.random() * 2 * Math.PI;cube.rotation.z = Math.random() * 2 * Math.PI;cube.name = &#x27;mynameisCube1&#x27;;scene.add(cube);const geometrySphere = new THREE.SphereGeometry(75, 20, 10);const sphere = new THREE.Mesh(geometrySphere, materialCube);sphere.position.set(370, -350, 0);sphere.name = &#x27;mynameisCube2&#x27;;scene.add(sphere);scene.add(new THREE.AmbientLight(0x555555));const light = new THREE.SpotLight(0xffffff, 1.5);light.position.set(0, 500, 2000);scene.add(light);window.addEventListener(&#x27;resize&#x27;, onWindowResize, false);document.addEventListener(&#x27;mousedown&#x27;, onDocumentMouseDown, false);function onWindowResize() &#123;  camera.aspect = window.innerWidth / window.innerHeight;  camera.updateProjectionMatrix();  renderer.setSize(window.innerWidth, window.innerHeight);&#125;function onDocumentMouseDown(event) &#123;  event.preventDefault();  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;  raycaster.setFromCamera(mouse, camera);  const intersects = raycaster.intersectObjects(scene.children);  if (intersects.length &gt; 0) &#123;    INTERSECTED = intersects[0].object;    if (INTERSECTED.name === &#x27;mynameisCube1&#x27;) &#123;      $(&#x27;#popup .contents&#x27;).html(&#x27;click pig head !!&#x27;);      $(&#x27;#popup&#x27;).bPopup();    &#125;    if (INTERSECTED.name === &#x27;mynameisCube2&#x27;) &#123;      $(&#x27;#popup .contents&#x27;).html(&#x27;click pig tail !!&#x27;);      $(&#x27;#popup&#x27;).bPopup();    &#125;  &#125; else &#123;    INTERSECTED = null;  &#125;&#125;function animate() &#123;  requestAnimationFrame(animate);  controls.update();  render();&#125;function render() &#123;  renderer.render(scene, camera);&#125;animate();
]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>three.js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - Unit Test</title>
    <url>/javascript-libraries/unit-test/</url>
    <content><![CDATA[Jesthttps://jestjs.io
Mochahttps://mochajs.org
Jasminehttps://jasmine.github.io
&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;title&gt;Jasmine&lt;/title&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;http://cdn.jsdelivr.net/jasmine/2.0.0/jasmine.css&quot;&gt;&lt;/head&gt;&lt;body&gt;  &lt;script src=&quot;http://cdn.jsdelivr.net/jasmine/2.0.0/jasmine.js&quot;&gt;&lt;/script&gt;  &lt;script src=&quot;http://cdn.jsdelivr.net/jasmine/2.0.0/jasmine-html.js&quot;&gt;&lt;/script&gt;  &lt;script src=&quot;http://cdn.jsdelivr.net/jasmine/2.0.0/boot.js&quot;&gt;&lt;/script&gt;  &lt;!-- 개발 코드 --&gt;  &lt;script&gt;    function helloWorld() &#123;      return &#x27;Hello world!&#x27;;    &#125;  &lt;/script&gt;  &lt;!-- 단위 테스트 --&gt;  &lt;script src=&quot;spec/hello.spec.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;

describe(&#x27;헬로 월드&#x27;, function() &#123; // Suite  it(&#x27;동일한 값&#x27;, function() &#123; // Spec    // expect() 기대식, toEqual 과 같은 matcher 함수    expect(helloWorld()).toEqual(&#x27;Hello world!&#x27;);    // helloWorld() 를 실행하여 리턴된 값이 &quot;Hello world!&quot; 와 동일 하면 성공  &#125;);  it(&#x27;포함 됨&#x27;, function() &#123;    expect(helloWorld()).toContain(&#x27;world&#x27;);    // helloWorld() 를 실행하여 리턴된 값에 &quot;world&quot; 가 포함되어 있으면 성공  &#125;);&#125;);

describe &#x2F; itdescribe(&#x27;fn(a, b)&#x27;, function() &#123; // 꾸러미  var testValue = null;  beforeEach(function() &#123; // 각각의 테스트 실행 전    testValue = 1;  &#125;);  afterEach(function() &#123; // 각각의 테스트 종료 후    console.log(&#x27;done&#x27;);  &#125;);  beforeAll(function() &#123;    // 모든 테스트 실행 전 한번  &#125;);  afterAll(function() &#123;    // 모든 테스트 실행 후 한번  &#125;);  // 테스트  it(&#x27;테스트 명&#x27;, function() &#123; // 스펙    expect(); // 기대식  &#125;);&#125;);

Matchers







not
반전


toBe(value)
값이 같음


toEqual(object)
객체가 같음


toContain(value)
값이 포함되어 있음


toBeTruthy()
값이 true


Data providerhttps://github.com/jphpsf/jasmine-data-provider
function using(name, values, func) &#123;  for (var i = 0, count = values.length; i &lt; count; i++) &#123;    if (Object.prototype.toString.call(values[i]) !== &#x27;[object Array]&#x27;) &#123;      values[i] = [values[i]];    &#125;    func.apply(this, values[i]);    jasmine.currentEnv_.currentSpec.description += &#x27; (with &quot;&#x27; + name + &#x27;&quot; using &#x27; + values[i].join(&#x27;, &#x27;) + &#x27;)&#x27;;  &#125;&#125;

describe(&#x27;data driven tests&#x27;, () =&gt; &#123;  using(&#x27;valid values&#x27;, [&#x27;first string&#x27;, &#x27;second string&#x27;], (value) =&gt; &#123;    it(`$&#123;value&#125; should contain &#x27;string&#x27;`, () =&gt; &#123;      expect(value).toContain(&#x27;string&#x27;);    &#125;);  &#125;);&#125;);

SpyBasicclass Cls &#123;  method(arg: string) &#123;    console.log(arg);  &#125;&#125;

describe(&#x27;Simple Spy&#x27;, () =&gt; &#123;  it(&#x27;should spyOn a function call&#x27;, () =&gt; &#123;    let cls = new Cls();    let spy = spyOn(cls, &#x27;method&#x27;);    cls.method(&#x27;test&#x27;);    expect(spy).toHaveBeenCalled();  &#125;);&#125;);

Callbackclass Cls1 &#123;  method1(num: number, callback: (result: string) =&gt; void) &#123;    let value = num.toString();    callback(value);  &#125;&#125;class Cls2 &#123;  method2(value: string) &#123;    console.log(value);  &#125;&#125;

describe(&#x27;Using callback spies&#x27;, () =&gt; &#123;  it(&#x27;should execute callback with the correct string value&#x27;, () =&gt; &#123;    let cls1 = new Cls1();    let cls2 = new Cls2();    let spy = spyOn(cls2, &#x27;method2&#x27;);    cls1.method1(1, cls2.method2);    expect(spy).toHaveBeenCalled();    expect(spy).toHaveBeenCalledWith(&#x27;1&#x27;);  &#125;);&#125;);

Fakesclass Cls &#123;  method(): number &#123;    return 1;  &#125;&#125;

describe(&#x27;using fakes&#x27;, () =&gt; &#123;  it(&#x27;calls fake instead of real function&#x27;, () =&gt; &#123;    let cls = new Cls();    spyOn(cls, &#x27;method&#x27;).and.callFake(() =&gt; &#123;      return 5;    &#125;);    expect(cls.method()).toBe(5);  &#125;);&#125;);

Asyncclass Cls &#123;  method(success: (value: string) =&gt; void) &#123;    setTimeout(() =&gt; &#123;      success(&#x27;success&#x27;);    &#125;, 1000);  &#125;&#125;

describe(&#x27;asynchronous test with done&#x27;, () =&gt; &#123;  let returnValue;  beforeEach((done) =&gt; &#123;    returnValue = &#x27;none&#x27;;    let cls = new Cls();    cls.method((value: string) =&gt; &#123;      returnValue = value;      done(); // done 함수가 호출될때까지 기본 (5) 초 대기, 대기시간 변경 (jasmine.DEFAULT_TIMEOUT_INTERVAL) 가능    &#125;);  &#125;);  it(&#x27;should return success after 1 second&#x27;, (done) =&gt; &#123;    expect(returnValue).toEqual(&#x27;success&#x27;);    done();  &#125;);&#125;);

Fixturenpm install --save jquerynpm install --save jasmine-jquery

class Cls &#123;  method() &#123;    let el = $(&#x27;#abc&#x27;);    el.html(&#x27;&lt;p&gt;hello&lt;/p&gt;&#x27;);  &#125;&#125;

describe(&#x27;fixture tests&#x27;, () =&gt; &#123;  it(&#x27;should modify a dom element&#x27;, () =&gt; &#123;    setFixtures(`&lt;div id=&#x27;abc&#x27;&gt;&lt;/div&gt;`);    let cls = new Cls();    cls.method();    const $dom = $(&#x27;#abc&#x27;);    expect($dom.length).toBeGreaterThan(0); // 요소를 찾았는지 확인    expect($dom.html()).toContain(&#x27;hello&#x27;);  &#125;);&#125;);

DOM eventdescribe(&#x27;click event tests&#x27;, () =&gt; &#123;  it(&#x27;should trigger an onclick DOM event&#x27;, () =&gt; &#123;    setFixtures(`      &lt;script&gt;        function fn () &#123;          // 여기서는 아무것도 안 함        &#125;      &lt;/script&gt;      &lt;div id=&#x27;abc&#x27; onClick=&#x27;fn()&#x27;&gt;Click&lt;/div&gt;    `);    const spy = spyOnEvent(&#x27;#abc&#x27;, &#x27;click&#x27;);    $(&#x27;#abc&#x27;).click();    expect(spy).toHaveBeenTriggered();  &#125;);&#125;);

QUinthttps://qunitjs.com
QUnit.module(&#x27;모듈&#x27;);QUnit.test(&#x27;모듈의 테스트&#x27;, function(assert) &#123;  // 테스트 로직&#125;);

DOHhttps://dojotoolkit.org/reference-guide/1.10/util/doh.html
doh.register(&#x27;테스트 모듈&#x27;, [  function simpleTest() &#123;    doh.assertTrue(true);  &#125;,  &#123;    name: &#x27;테스트&#x27;,    setup() &#123;      // 실행 전 테스트를 설정    &#125;,    runTest() &#123;      doh.assertFalse(false);    &#125;,    tearDown() &#123;      // 종료 후 정리    &#125;,  &#125;,]);
]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>unit-test</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Blob File</title>
    <url>/javascript-web-api/blob-file/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/Blob


Blobconst blob = new Blob([JSON.stringify(&#123; a: 10 &#125;, null, 2)], &#123; type : &#x27;application/json&#x27; &#125;);

Propertiessizehttps://developer.mozilla.org/en-US/docs/Web/API/Blob/size
typehttps://developer.mozilla.org/en-US/docs/Web/API/Blob/type
MethodsarrayBufferhttps://developer.mozilla.org/en-US/docs/Web/API/Blob/arrayBuffer
slicehttps://developer.mozilla.org/en-US/docs/Web/API/Blob/slice
streamhttps://developer.mozilla.org/en-US/docs/Web/API/Blob/stream
texthttps://developer.mozilla.org/en-US/docs/Web/API/Blob/text
Filehttps://developer.mozilla.org/en-US/docs/Web/API/File
const file = new File([&#x27;foo&#x27;], &#x27;foo.txt&#x27;, &#123;  type: &#x27;text/plain&#x27;,  lastModified: Date.now(),&#125;);

PropertieslastModifiedhttps://developer.mozilla.org/en-US/docs/Web/API/File/lastModified
namehttps://developer.mozilla.org/en-US/docs/Web/API/File/name
sizehttps://developer.mozilla.org/en-US/docs/Web/API/Blob/size
typehttps://developer.mozilla.org/en-US/docs/Web/API/File/type
Methodsslicehttps://developer.mozilla.org/en-US/docs/Web/API/Blob/slice
streamhttps://developer.mozilla.org/en-US/docs/Web/API/Blob/stream
texthttps://developer.mozilla.org/en-US/docs/Web/API/Blob/text
arrayBufferhttps://developer.mozilla.org/en-US/docs/Web/API/Blob/arrayBuffer
FileListhttps://developer.mozilla.org/en-US/docs/Web/API/FileList
const fileList = document.getElementById(&#x27;input-file-multiple&#x27;).files;for (let i = 0; i &lt; fileList.length; i++) &#123;  const file = files.item(i);  console.log(file.name);&#125;Array.prototype.forEach.call(fileList, (file) =&gt; &#123;  console.log(file.name);&#125;);

File upload
  



파일 드래그, 파일 드롭, 멀티 파일 선택 가능하다.

FileReaderhttps://developer.mozilla.org/en-US/docs/Web/API/FileReader
function readFile(file) &#123;  return new Promise((resolve, reject) =&gt; &#123;    let reader = new FileReader();    reader.onload = () =&gt; &#123;      resolve(reader.result);    &#125;;    reader.onerror = reject;    reader.readAsText(file);    reader.readAsDataURL(file); // Base64  &#125;);&#125;

Image url to base64const getBase64Image = (url) =&gt; &#123;  const img = new Image();  img.setAttribute(&#x27;crossOrigin&#x27;, &#x27;anonymous&#x27;);  img.onload = () =&gt; &#123;    const canvas = document.createElement(&#x27;canvas&#x27;);    canvas.width = img.width;    canvas.height = img.height;    const context = canvas.getContext(&#x27;2d&#x27;);    context.drawImage(img, 0, 0);    const dataURL = canvas.toDataURL(&#x27;image/png&#x27;);    console.log(dataURL);  &#125;  img.src = url;&#125;getBase64Image(&#x27;1.jpg&#x27;);

Propertieserrorhttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/error
readyStatehttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/readyState
resulthttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/result
Methodsaborthttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/abort
readAsArrayBufferhttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer
readAsBinaryStringhttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsBinaryString
readAsDataURLhttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
readAsTexthttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsText
Eventsaborthttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/abort_event
errorhttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/error_event
loadhttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/load_event
loadendhttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/loadend_event
loadstarthttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/loadstart_event
progresshttps://developer.mozilla.org/en-US/docs/Web/API/FileReader/progress_event
FileReaderSynchttps://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync

Web Worker 에서만 사용 가능하다.

MethodsreadAsArrayBufferhttps://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync/readAsArrayBuffer
readAsTexthttps://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync/readAsText
readAsDataURLhttps://developer.mozilla.org/en-US/docs/Web/API/FileReaderSync/readAsDataURL
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>blob-file</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - YouTube</title>
    <url>/javascript-libraries/youtube/</url>
    <content><![CDATA[
  https://github.com/LuanRT/YouTube.js


Use iframehttps://developers.google.com/youtube/player_parameters?hl=ko
&lt;iframe  id=&quot;ytplayer&quot;  type=&quot;text/html&quot;  width=&quot;640&quot;  height=&quot;360&quot;  loading=&quot;lazy&quot;  allow=&quot;autoplay; fullscreen&quot;  src=&quot;https://www.youtube.com/embed/M7lc1UVf-VE?    enablejsapi=1&amp;    playsinline=1&amp;    controls=0&amp;    fs=0&amp;    rel=0&amp;    autoplay=1&amp;    mute=1&amp;    loop=1&amp;    modestbranding=1&amp;    origin=*&quot;&gt;&lt;/iframe&gt;

const player = document.getElementById(&#x27;ytplayer&#x27;);player.contentWindow.postMessage(JSON.stringify(&#123;  event: &#x27;command&#x27;,  func: &#x27;pauseVideo&#x27;,  args: &#x27;&#x27;,&#125;), &#x27;*&#x27;);


HTML 5 의 postMessage 기능을 지원하는 브라우저를 사용해야 한다. (IE 8 이상)최소 200 x 200 이상의 표시영역이 있어야 한다.

Parametersautoplaycc_lang_prefcc_load_policycolorcontrolsdisablekbenablejsapiendfshliv_load_policylistlistTypeloopmodestbrandingoriginplaylistplaysinlinerelshowinfostartwidget_referrerUse player API&lt;https://developers.google.com/youtube/iframe_api_reference?hl=ko&gt;
&lt;div id=&quot;player&quot;&gt;&lt;/div&gt;

const tag = document.createElement(&#x27;script&#x27;);tag.src = &#x27;https://www.youtube.com/iframe_api&#x27;;const firstScriptTag = document.getElementsByTagName(&#x27;script&#x27;)[0];firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);let player;let done = false;function onYouTubeIframeAPIReady() &#123;  player = new YT.Player(&#x27;player&#x27;, &#123;    height: &#x27;360&#x27;,    width: &#x27;640&#x27;,    videoId: &#x27;M7lc1UVf-VE&#x27;,    events: &#123;      onReady(event) &#123;        event.target.playVideo();      &#125;,      onStateChange(event) &#123;        if (event.data == YT.PlayerState.PLAYING &amp;&amp; !done) &#123;          setTimeout(() =&gt; &#123;            player.stopVideo();          &#125;, 6000);          done = true;        &#125;      &#125;,    &#125;,  &#125;);&#125;

Methodshttps://developers.google.com/youtube/iframe_api_reference?hl=ko#Functions
cueVideoByIdloadVideoByIdcueVideoByUrlloadVideoByUrlcuePlaylistloadPlaylistplayVideopauseVideostopVideoseekToclearVideonextVideopreviousVideoplayVideoAtmuteunMuteisMutedsetVolumegetVolumesetSizegetPlaybackRatesetPlaybackRategetAvailablePlaybackRatessetLoopsetShufflegetVideoLoadedFractiongetPlayerStategetCurrentTimegetPlaybackQualitysetPlaybackQualitygetAvailableQualityLevelsgetDurationgetVideoUrlgetVideoEmbedCodegetPlaylistgetPlaylistIndexaddEventListenerremoveEventListenergetIframedestroyEventsonReadyonStateChangeonPlaybackQualityChangeonPlaybackRateChangeonErroronApiChange]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>youtube</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript - Swiper v8.0.7</title>
    <url>/javascript-libraries/swiper/</url>
    <content><![CDATA[
  https://swiperjs.com/swiper-api





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


SetupUse NPMnpm install --save swiper

For javascript&lt;div class=&quot;swiper&quot;&gt;  &lt;div class=&quot;swiper-wrapper&quot;&gt;    &lt;div class=&quot;swiper-slide&quot;&gt;Slide 1&lt;/div&gt;    &lt;div class=&quot;swiper-slide&quot;&gt;Slide 2&lt;/div&gt;  &lt;/div&gt;  &lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;swiper-button-prev&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;swiper-button-next&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;swiper-scrollbar&quot;&gt;&lt;/div&gt;&lt;/div&gt;

import Swiper, &#123; Navigation, Pagination, Scrollbar  &#125; from &#x27;swiper&#x27;;import &#x27;swiper/scss&#x27;;import &#x27;swiper/scss/navigation&#x27;;import &#x27;swiper/scss/pagination&#x27;;import &#x27;swiper/scss/scrollbar&#x27;;const swiper = new Swiper(&#x27;.swiper&#x27;, &#123;  modules: [    Navigation,    Pagination,    Scrollbar,  ],  navigation: &#123;    prevEl: &#x27;.swiper-button-prev&#x27;,    nextEl: &#x27;.swiper-button-next&#x27;,  &#125;,  pagination: &#123;    el: &#x27;.swiper-pagination&#x27;,  &#125;,  scrollbar: &#123;    el: &#x27;.swiper-scrollbar&#x27;,  &#125;,&#125;);

For vue 3&lt;template&gt;  &lt;div class=&quot;swiper-area&quot;&gt;    &lt;button type=&quot;button&quot; class=&quot;button&quot; :data-disabled=&quot;!swiperInstance.activeIndex&quot; @click=&quot;clickPrev&quot;&gt;Prev&lt;/button&gt;    &lt;Swiper      :modules=&quot;modules&quot;      :spaceBetween=&quot;10&quot;      :slidesPerView=&quot;&#x27;auto&#x27;&quot;      :scrollbar=&quot;&#123; draggable: true &#125;&quot;      @swiper=&quot;onSwiper&quot;    &gt;      &lt;SwiperSlide        v-for=&quot;index in [0, 1, 2, 3, 4, 5]&quot;        :key=&quot;index&quot;        :data-active=&quot;index === swiperInstance.activeIndex&quot;        @click=&quot;clickSwiper&quot;      /&gt;    &lt;/Swiper&gt;    &lt;button type=&quot;button&quot; class=&quot;button&quot; :data-disabled=&quot;swiperInstance.activeIndex === 5&quot; @click=&quot;clickNext&quot;&gt;Next&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;;import &#123; Scrollbar &#125; from &#x27;swiper&#x27;;import &#123; Swiper, SwiperSlide &#125; from &#x27;swiper/vue&#x27;;import &#x27;swiper/scss&#x27;;import &#x27;swiper/scss/scrollbar&#x27;;const modules = [Scrollbar];const swiperInstance = reactive(&#123;  target: null,  activeIndex: null,&#125;);const onSwiper = (swiper) =&gt; &#123;  swiperInstance.target = swiper;&#125;;const slideAction = () =&gt; &#123;  swiperInstance.target.slideTo(swiperInstance.activeIndex);&#125;;const clickSwiper = () =&gt; &#123;  swiperInstance.activeIndex = swiperInstance.target.clickedIndex;  slideAction();&#125;;const clickPrev = () =&gt; &#123;  if (swiperInstance.activeIndex &gt; 0) &#123;    swiperInstance.activeIndex -= 1;  &#125;  slideAction();&#125;;const clickNext = () =&gt; &#123;  if (swiperInstance.activeIndex === null) &#123;    swiperInstance.activeIndex = 0;  &#125; else if (swiperInstance.activeIndex &lt; 5) &#123;    swiperInstance.activeIndex += 1;  &#125;  slideAction();&#125;;&lt;/script&gt;&lt;style lang=&quot;scss&quot;&gt;.swiper-area &#123;  display: flex;  gap: 10px;  .button &#123;    overflow: hidden;    position: static;    display: block;    width: 20px;    height: auto;    margin: 0;    padding: 0;    border: 0;    border-radius: 3px;    background-color: #000;    cursor: pointer;    transition: all 0.2s;    &amp;[data-disabled=true] &#123;      opacity: 0.2;      cursor: default;      pointer-events: none;    &#125;  &#125;  .swiper &#123;    flex: 1;    height: 115px;    .swiper-scrollbar &#123;      bottom: 0;      height: 10px;      .swiper-scrollbar-drag &#123;        cursor: pointer;      &#125;    &#125;    .swiper-wrapper &#123;      .swiper-slide &#123;        height: 200px;        &amp;:nth-child(1) &#123; background-color: #f00; &#125;        &amp;:nth-child(2) &#123; background-color: #00f; &#125;        &amp;.active &#123;          box-sizing: border-box;          border: solid 3px #fff;        &#125;      &#125;    &#125;  &#125;&#125;&lt;/style&gt;

Parametershttps://swiperjs.com/swiper-api#parameters
allowSlideNext
기본값 true다음 슬라이드 이동을 허용한다.

allowSlidePrev
기본값 true이전 슬라이드 이동을 허용한다.

allowTouchMove
기본값 true터치 이동을 허용한다.

autoHeight
기본값 false활성 슬라이드 높이에 자동으로 맞춰진다.

breakpointshttps://swiperjs.com/swiper-api#param-breakpoints
new Swiper(&#x27;.swiper&#x27;, &#123;  /* 모바일 (브라우저 너비 959px 이하) */  slidesPerView: 1,  spaceBetween: 10,  breakpoints: &#123;    /* 태블릿 (브라우저 너비 960px 이상) */    960: &#123;      slidesPerView: 2,      spaceBetween: 20,    &#125;,    /* 피씨 (브라우저 너비 1280px 이상) */    1280: &#123;      slidesPerView: 4,      spaceBetween: 40,    &#125;,  &#125;,&#125;);

breakpointsBase
기본값 windowbreakpoints 이벤트가 발생 할 기준을 설정한다.베타 기능으로 자바스크립트 프레임워크 버전에서는 사용 할 수 없다.

centerInsufficientSlides
기본값 false슬라이드 수가 slidesPerView 보다 적으면 가운데 정렬한다.

centeredSlides
기본값 false활성 슬라이드를 가운데 배치하면서 시작과 끝에 간격이 추가된다.

centeredSlidesBounds
기본값 falsecenteredSlides 와 함께 사용하여 시작과 끝에 간격을 추가하지 않도록 한다.

containerModifierClass
기본값 swiper-컨테이너 클래스를 정의한다.

createElements
기본값 false슬라이드를 swiper-wrapper 로 래핑하고 navigation, pagination, scrollbar 를 생성한다.

cssModehttps://swiperjs.com/swiper-api#param-cssMode

기본값 falseCSS scroll snap 를 사용한다.성능이 좋아지지만 몇가지 기능을 사용 할 수 없다.

direction
기본값 horizontal슬라이드 방향을 설정한다.

edgeSwipeDetection
기본값 false앱에서 스와이프백 기능을 위해 이벤트를 해제한다.

edgeSwipeThreshold
기본값 20앱에서 스와이프백 기능을 위해 왼쪽 영역 너비를 설정한다.

effect
기본값 slide 외 fade, cube, coverflow, flip, creative슬라이드 효과를 설정한다.

enabled
기본값 true비활성화 시 navigation, pagination, scrollbar 를 감추고 모든 이벤트가 동작하지 않는다.

focusableElements
기본값 input, select, option, textarea, button, video, label해당 요소에 포커스 되어 있으면 스와이프가 비활성 된다.

followFinger
기본값 true비활성일 경우 드래그에는 반응하지 않고 드랍 시에만 동작한다.

grabCursor
기본값 false커서 모양을 잡기 커서로 변경한다.

height
기본값 null스와이퍼 높이를 강제로 적용한다.스와이퍼가 숨겨진 상태에서 초기화를 위해 적용하는 경우에만 유용하고 사용을 지양한다.

init
기본값 true인스턴스를 생성 할 때 자동으로 초기화한다.비활성일 경우 수동으로 초기화해야 한다.

initialSlide
기본값 0초기 슬라이드의 인덱스를 설정한다.

longSwipes
기본값 true긴 스와이프 동작 허용 여부를 설정한다.

longSwipesMs
기본값 300스와이프를 트리거하는 최소 지속 시간을 설정한다.

longSwipesRatio
기본값 0.5스와이프를 트리거하는 비율을 설정한다.

loophttps://swiperjs.com/swiper-api#param-loop

기본값 false슬라이드를 복제하여 반복한다.

loopAdditionalSlides
기본값 0반복 할 때 복제 할 슬라이드 수를 설정한다.

loopFillGroupWithBlank
기본값 false반복 할 때 빈 슬라이드로 그룹을 채운다.slidesPerGroup 과 함께 사용하면 유용하다.

loopPreventsSlide
기본값 true이동중일 때 재이동을 방지한다.반복이 활성화일 때 동작한다.

loopedSlides
기본값 nullslidesPerView: &#39;auto&#39; 와 반복을 같이 사용 할 경우 복제할 슬라이드 수를 설정한다.

maxBackfaceHiddenSlides
기본값 10

modulesimport Swiper, &#123; Navigation, Pagination &#125; from &#x27;swiper&#x27;;const swiper = new Swiper(&#x27;.swiper&#x27;, &#123;  modules: [Navigation, Pagination],&#125;);

nested
기본값 false상위 스크롤과 같은 방향을 사용하는 스와이프일 때 사용한다.

noSwiping
기본값 truenoSwipingClass 에 지정된 클래스에 일치하는 요소에서 스와이프를 활성 또는 비활성한다.

noSwipingClass
기본값 swiper-no-swipingnoSwiping 할 대상 클래스를 정의한다.

noSwipingSelector
클래스 대신 태그 선택자를 설정할 수 있다.

normalizeSlideIndex
기본값 true슬라이드 인덱스를 정규화한다.

observeParents
기본값 false스와이퍼 상위요소의 변화를 감시한다.

observeSlideChildren
기본값 false슬라이드 하위요소의 변화를 감시한다.

observer
기본값 false변화가 감지되면 스와이퍼를 재초기화한다.

on
이벤트 핸들러를 등록한다.

passiveListeners
기본값 true모바일에서 스크롤 충돌이 있을 경우 비활성해야 한다.

preloadImages
기본값 true이미지를 미리 로드한다.

preventClicks
기본값 true스와이프하는 동안 링크가 클릭되는 것을 방지한다.

preventClicksPropagation
기본값 true스와이프하는 동안 링크에서 클릭 이벤트 전파를 중단한다.

preventInteractionOnTransition
기본값 false이동중일 때 navigation, pagination, scrollbar 로 슬라이드를 변경할 수 없다.

resistance
기본값 true저항범위를 사용할지 여부를 설정한다.

resistanceRatio
기본값 0.85저항비율을 설정한다.

resizeObserver
기본값 true컨테이너 크기 변화를 감시한다.

rewind
기본값 false슬라이드를 복제하지 않고 처음 또는 끝으로 되돌려서 반복한다.loop 와 함께 사용할 수 없다.

roundLengths
기본값 false텍스트의 흐릿함을 방지하기 위해 슬라이드의 너비와 높이값을 반올림하여 소수점을 제거한다.

runCallbacksOnInit
기본값 true스와이퍼 초기화 시 이벤트를 발생시킨다.

setWrapperSize
기본값 false

shortSwipes
기본값 true짧은 스와이프 동작 허용 여부를 설정한다.

simulateTouch
기본값 true마우스 드래그 앤 드롭을 허용한다.

slideActiveClass
기본값 swiper-slide-active활성화된 슬라이드의 클래스명을 설정한다.

slideBlankClass
기본값 swiper-slide-invisible-blank

slideClass
기본값 swiper-slide슬라이드에 적용할 클래스명을 설정한다.

slideDuplicateActiveClass
기본값 swiper-slide-duplicate-active

slideDuplicateClass
기본값 swiper-slide-duplicate

slideDuplicateNextClass
기본값 swiper-slide-duplicate-next

slideDuplicatePrevClass
기본값 swiper-slide-duplicate-prev

slideNextClass
기본값 swiper-slide-next활성화된 슬라이드 바로 뒤에 있는 슬라이드의 클래스명을 설정한다.

slidePrevClass
기본값 swiper-slide-prev활성화된 슬라이드 바로 앞에 있는 슬라이드의 클래스명을 설정한다.

slideToClickedSlide
기본값 false클릭한 슬라이드로 이동할지 여부를 설정한다.

slideVisibleClass
기본값 swiper-slide-visible현재 보이는 슬라이드의 클래스명을 설정한다.

slidesOffsetAfter
기본값 0컨테이너 종료 부분에 간격을 추가한다.

slidesOffsetBefore
기본값 0컨테이너 시작 부분에 간격을 추가한다.

slidesPerGroup
기본값 1

slidesPerGroupAuto
기본값 false

slidesPerGroupSkip
기본값 0

slidesPerView
기본값 1동시에 보여질 슬라이드 수를 설정한다.각 슬라이드 너비에 맞추도록 auto 값을 사용할 수 있다.

spaceBetween
기본값 0슬라이드 사이의 간격을 설정한다.

speed
기본값 300슬라이드 이동 속도를 설정한다.

swipeHandler
기본값 null

threshold
기본값 0터치거리가 설정된 값보다 낮으면 스와이퍼가 움직이지 않는다.

touchAngle
기본값 45터치 이동을 트리거하는 각도를 설정한다.

touchEventsTarget
기본값 wrapper

touchMoveStopPropagation
기본값 false

touchRatio
기본값 1

touchReleaseOnEdges
기본값 false

touchStartForcePreventDefault
기본값 false

touchStartPreventDefault
기본값 true

uniqueNavElements
기본값 true

updateOnImagesReady
기본값 true모든 내부 이미지가 로드된 후 스와이퍼를 재초기화한다.preloadImages: true 와 함께 사용한다.

updateOnWindowResize
기본값 true윈도우 크기가 변경될 때 슬라이드 위치를 재계산한다.

url
기본값 null

userAgent
기본값 null

virtualTranslate
기본값 false

watchOverflow
기본값 true스와이프할 정도의 슬라이드가 없을 경우 navigation 을 감춘다.

watchSlidesProgress
기본값 false

width
기본값 null스와이퍼 너비를 강제로 적용한다.스와이퍼가 숨겨진 상태에서 초기화를 위해 적용하는 경우에만 유용하고 사용을 지양한다.

wrapperClass
기본값 swiper-wrapper슬라이드 래퍼에 사용될 클래스 이름을 설정한다.

onAny
모든 이벤트에서 실행될 이벤트 리스너를 추가한다.

Propertieshttps://swiperjs.com/swiper-api#methods-and-properties
$el
컨테이너 Dom7 요소를 반환한다.swiper.el 은 HTMLElement 를 반환한다.

$wrapperEl
슬라이드 래퍼 Dom7 요소를 반환한다.swiper.wrapperEl 은 HTMLElement 를 반환한다.

activeIndex
활성화된 슬라이드 인덱스를 반환한다.

allowSlideNext
다음 슬라이드로 이동하는 기능을 활성 &#x2F; 비활성 한다.

allowSlidePrev
이전 슬라이드로 이동하는 기능을 활성 &#x2F; 비활성 한다.

allowTouchMove
터치 이동 기능을 활성 &#x2F; 비활성 한다.

animating
애니메이션 재생 중 여부를 반환한다.

clickedIndex
마지막으로 클릭한 슬라이드의 인덱스를 반환한다.

clickedSlide
마지막으로 클릭한 슬라이드 HTML 요소를 반환한다.

el
컨테이너 HTML 요소를 반환한다.

height
컨테이너 높이값을 반환한다.

isBeginning
슬라이더가 시작 위치에 있는지 여부를 반환한다.

isEnd
슬라이더가 마지막 위치에 있는지 여부를 반환한다.

originalParams
초기 파라미터 객체를 반환한다.

params
전달된 파라미터 객체를 반환한다.

previousIndex
바로 이전 활성화되었던 슬라이드 인덱스를 반환한다.

progress
스와이퍼 진행 상태를 반환한다.

realIndex
반복 시 복제된 슬라이드의 인덱스를 반환한다.

slides
슬라이드 HTML 요소 배열을 반환한다.

touches
터치 이벤트 속성이 있는 객체를 반환한다.

translate
래퍼 변형의 현재 값을 반환한다.

width
컨테이너의 너비값을 반환한다.

wrapperEl
슬라이드 래퍼 HTML 요소를 반환한다.

defaults
스와이퍼 기본 옶션을 반환한다.

extendedDefaults
스와이퍼 확장 옵션이 있는 객체를 반환한다.

Methodshttps://swiperjs.com/swiper-api#methods-and-properties
attachEvents
모든 이벤트 리스너를 다시 연결한다.

changeDirection
인자 direction, needUpdate스와이프 진행 방향을 변경한다.

destroy
인자 deleteInstance, cleanStyles스와이퍼 인스턴스를 제거하고 연결된 이벤트도 모두 제거한다.

detachEvents
모든 이벤트를 제거한다.

disable
스와이퍼를 비활성한다.

emit
인자 event, args이벤트를 발생시킨다.

enable
스와이퍼를 활성한다.

getTranslate
CSS 변경값을 반환한다.

init
인자 el스와이퍼를 초기화한다.

loopCreate
내부에서 동작하는 메서드이다.

loopDestroy
내부에서 동작하는 메서드이다.

off
인자 event, handler이벤트 핸들러를 제거한다.

offAny
인자 handler모든 이벤트에 리스너를 제거한다.

on
인자 event, handler이벤트 핸들러를 추가한다.

onAny
인자 handler모든 이벤트에 리스터를 추가한다.

once
인자 event, handler한번만 실행되는 이벤트 핸들러를 추가한다.

setGrabCursor
잡기 커서를 설정한다.

setProgress
인자 progress, speed스와이퍼 진행률을 설정한다.

setTranslate
인자 translateCSS 변환 값을 설정한다.

slideNext
인자 speed, runCallbacks다음 슬라이드로 이동한다.

slidePrev
인자 speed, runCallbacks이전 슬라이드로 이동한다.

slideReset
인자 speed, runCallbacks활성 슬라이드로 재설정한다.

slideTo
인자 index, speed, runCallbacks해당 인덱스로 이동한다.

slideToClosest
인자 speed, runCallbacks가까운 슬라이드로 이동한다.

slideToLoop
인자 index, speed, runCallbacks해당 인덱스로 이동한다.반복을 사용할 경우 realIndex 슬라이드로 이동한다.

translateTo
인자 translate, speed, runCallbacks, translateBoundsCSS 변환 애니메이션을 이용해서 이동한다.

unsetGrabCursor
잡기 커서를 해제한다.

update
스와이퍼를 업데이트한다.

updateAutoHeight
인자 speed해당 시간 동안 스와이퍼 높이를 업데이트한다.

updateProgress
스와이퍼 진행 상황을 업데이트한다.

updateSize
컨테이너 사이즈를 업데이트한다.

updateSlides
슬라이드 개수와 오프셋을 업데이트한다.슬라이드를 추가 &#x2F; 제거 후 사용한다.

updateSlidesClasses
슬라이드 클래스를 업데이트한다.

extendDefaults
인자 options옵션을 확장한다.

use
인자 modules스와이퍼 모듈을 설치한다.

Eventshttps://swiperjs.com/swiper-api#events
const swiper = new Swiper(&#x27;.swiper&#x27;, &#123;  on: &#123;    slideChange() &#123;      console.log(&#x27;swiper changed&#x27;);    &#125;,  &#125;,&#125;);swiper.on(&#x27;slideChange&#x27;, () =&gt; &#123;  console.log(&#x27;slide changed&#x27;);&#125;);

activeIndexChange
인자 swiper활성 인덱스가 변경되면 발생한다.

afterInit
인자 swiper초기화 후에 발생한다.

beforeDestroy
인자 swiper스와이퍼 인스턴스를 제거하기 전에 발생한다.

beforeInit
인자 swiper초기화 전에 발생한다.

beforeLoopFix
인자 swiper루프 수정 전에 발생한다.

beforeResize
인자 swiper리사이즈 전에 발생한다.

beforeSlideChangeStart
인자 swiper슬라이드 변경 시작 전에 발생한다.

beforeTransitionStart
인자 swiper, speed, internalCSS 시작 전에 발생한다.

breakpoint
인자 swiper, breakpointParamsbreakpoints 변경 시 발생한다.

changeDirection
인자 swiper방향 변경 시 발생한다.

click
인자 swiper, event스와이퍼를 클릭하면 발생한다.

destroy
인자 swiper스와이퍼 인스턴스를 제거할 때 발생한다.

doubleClick
인자 swiper, event스와이퍼를 더블클릭하면 발생한다.

doubleTap
인자 swiper, event스와이퍼를 더블탭하면 발생한다.

fromEdge
인자 swiper시작 또는 끝 위치에서 이동할 때 발생한다.

imagesReady
인자 swiper모든 이미지가 로드되면 발생한다.

init
인자 swiper스와이퍼 인스턴스 초기화후 발생한다.

lock
인자 swiperwatchOverflow 가 활성화되어 있을 때 스와이퍼가 잠기면 발생한다.

loopFix
인자 swiper

momentumBounce
인자 swiper

observerUpdate
인자 swiperDOM 변화가 감지되면 발생한다.

orientationchange
인자 swiper진행 방향이 변경되면 발생한다.

progress
인자 swiper, progress

reachBeginning
인자 swiper시작 위치에 도달하면 발생한다.

reachEnd
인자 swiper끝 위치에 도달하면 발생한다.

realIndexChange
인자 swiper실제 인덱스 변경시 발생한다.

resize
인자 swiper리사이즈가 될 때 발생한다.

setTransition
인자 swiper, transition애니메이션을 시작할 때마다 발생한다.

setTranslate
인자 swiper, translate

slideChange
인자 swiper현재 활성 슬라이드가 변경되면 발생한다.

slideChangeTransitionEnd
인자 swiper슬라이드 이동이 끝나면 발생한다.

slideChangeTransitionStart
인자 swiper슬라이드 이동이 시작할 때 발생한다.

slideNextTransitionEnd
인자 swiper다음 슬라이드로 이동이 끝나면 발생한다.

slideNextTransitionStart
인자 swiper다음 슬라이드로 이동이 시작할 때 발생한다.

slidePrevTransitionEnd
인자 swiper이전 슬라이드로 이동이 끝나면 발생한다.

slidePrevTransitionStart
인자 swiper이전 슬라이드로 이동이 시작할 때 발생한다.

slideResetTransitionEnd
인자 swiper

slideResetTransitionStart
인자 swiper

sliderFirstMove
인자 swiper, event첫번째 이동할 때 발생한다.

sliderMove
인자 swiper, event슬라이더가 이동할 때 발생한다.

slidesGridLengthChange
인자 swiper슬라이드 그리드 수가 변경되면 발생한다.

slidesLengthChange
인자 swiper슬라이드 수가 변경되면 발생한다.

snapGridLengthChange
인자 swiper스냅 그리드가 변경되면 발생한다.

snapIndexChange
인자 swiper스냅 인덱스 변경 시 발생한다.

tap
인자 swiper, event클릭 또는 탭하면 발생한다.

toEdge
인자 swiper시작 또는 끝 위치로 이동하면 발생한다.

touchEnd
인자 swiper, event터치이동이 끝나면 발생한다.

touchMove
인자 swiper, event터치이동하면 발생한다.

touchMoveOpposite
인자 swiper, event반대 방향으로 터치이동하면 발생한다.

touchStart
인자 swiper, event터치하면 발생한다.

transitionEnd
인자 swiper슬라이드 이동이 끝나고 발생한다.

transitionStart
인자 swiper슬라이드 이동이 시작할 때 발생한다.

unlock
인자 swiperwatchOverflow 가 활성화되어 있을 때 스와이퍼가 잠금 해제되면 발생한다.

update
인자 swiper업데이트 메서드가 호출된 후 발생한다.

ModulesNavigationhttps://swiperjs.com/swiper-api#navigation
Paginationhttps://swiperjs.com/swiper-api#pagination
Scrollbarhttps://swiperjs.com/swiper-api#scrollbar
Autoplayhttps://swiperjs.com/swiper-api#autoplay
Free Modehttps://swiperjs.com/swiper-api#free-mode
Gridhttps://swiperjs.com/swiper-api#grid
Manipulationhttps://swiperjs.com/swiper-api#manipulation
Parallaxhttps://swiperjs.com/swiper-api#parallax
Lazy Loadinghttps://swiperjs.com/swiper-api#lazy-loading
Fade Effecthttps://swiperjs.com/swiper-api#fade-effect
Coverflow Effecthttps://swiperjs.com/swiper-api#coverflow-effect
Flip Effecthttps://swiperjs.com/swiper-api#flip-effect
Cube Effecthttps://swiperjs.com/swiper-api#cube-effect
Cards Effecthttps://swiperjs.com/swiper-api#cards-effect
Creative Effecthttps://swiperjs.com/swiper-api#creative-effect
Thumbshttps://swiperjs.com/swiper-api#thumbs
Zoomhttps://swiperjs.com/swiper-api#zoom
Keyboard Controlhttps://swiperjs.com/swiper-api#keyboard-control
Mousewheel Controlhttps://swiperjs.com/swiper-api#mousewheel-control
Virtual Slideshttps://swiperjs.com/swiper-api#virtual-slides

  


Hash Navigationhttps://swiperjs.com/swiper-api#hash-navigation
History Navigationhttps://swiperjs.com/swiper-api#history-navigation
Controllerhttps://swiperjs.com/swiper-api#controller
Accessibility (a11y)https://swiperjs.com/swiper-api#accessibility-a11y

접근성 메세지를 설정한다.

ExamplesDemohttps://swiperjs.com/demos
Side margin layout
  

]]></content>
      <categories>
        <category>javascript-libraries</category>
        <category>swiper</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Canvas</title>
    <url>/javascript-web-api/canvas/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API


HTMLCanvasElementPropertiesheighthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height
widthhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width
MethodsgetContexthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
toDataURLhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL
const canvasElement = document.querySelector(&#x27;#canvas&#x27;);const image = canvasElement.toDataURL(); // type: &#x27;image/png&#x27; (default), encoderOptions// const image = canvasElement.toDataURL(&#x27;image/jpeg&#x27;, 0.8);


캔버스를 이미지 (Data URI) 로 반환한다.

toBlobhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob
Eventswebglcontextcreationerrorhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextcreationerror_event
webglcontextlosthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextlost_event
webglcontextrestoredhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextrestored_event
CanvasRenderingContext2DDrawing rectanglesclearRecthttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect
canvasContext.clearRect(0, 0, canvasElement.width, canvasElement.height);


영역을 지운다.

fillRecthttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect
canvasContext.fillRect(0, 0, 10, 10); // x, y, w, h


색을 채운 사각형을 그린다.

strokeRecthttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect
Drawing textfillTexthttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText
strokeTexthttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText
measureTexthttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText
Line styleslineWidthhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth
lineCaphttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap
lineJoinhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin
miterLimithttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit
getLineDashhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash
setLineDashhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash
lineDashOffsethttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset
Text stylesfonthttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font
textAlignhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign
textBaselinehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline
directionhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/direction
Fill and stroke stylesfillStylehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle
canvasContext.fillStyle = &#x27;red&#x27;;


채울 색을 지정한다.

strokeStylehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle
Gradients and patternscreateConicGradienthttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createConicGradient
createLinearGradienthttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient
createRadialGradienthttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient
createPatternhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern
ShadowsshadowBlurhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur
shadowColorhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor
shadowOffsetXhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX
shadowOffsetYhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY
PathsbeginPathhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath
closePathhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath
moveTohttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo
lineTohttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo
bezierCurveTohttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo
quadraticCurveTohttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo
archttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc
arcTohttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo
ellipsehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse
recthttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect
Drawing pathsfillhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill
strokehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke
drawFocusIfNeededhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded
scrollPathIntoViewhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scrollPathIntoView
cliphttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip
isPointInPathhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath
isPointInStrokehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke
TransformationscurrentTransformhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/currentTransform
getTransformhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getTransform
rotatehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate
scalehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale
translatehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate
transformhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform
setTransformhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform
CompositingglobalAlphahttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha
globalCompositeOperationhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
resetTransformhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform
Drawing imagesdrawImagehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage
const videoElement = document.querySelector(&#x27;#video&#x27;);const &#123; videoWidth, videoHeight &#125; = videoElement;const canvasElement = document.querySelector(&#x27;#canvas&#x27;);const canvasContext = canvasElement.getContext(&#x27;2d&#x27;);const step = () =&gt; &#123;  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight  canvasContext.drawImage(videoElement, 0, 0, videoWidth, videoHeight);  canvasElement.animationFrame = requestAnimationFrame(step);&#125;;step();

Pixel manipulationcreateImageDatahttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData
getImageDatahttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData

  


putImageDatahttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData
Image smoothingimageSmoothingEnabledhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled
imageSmoothingQualityhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality
The canvas statesavehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save
restorehttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore
canvashttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas
getContextAttributeshttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getContextAttributes
Filtersfilterhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter
CanvasGradientMethodsaddColorStophttps://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient/addColorStop
CanvasPatternMethodssetTransformhttps://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern/setTransform
ImageBitmapPropertiesheighthttps://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/height
widthhttps://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/width
Methodsclosehttps://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/close
ImageDataPropertiesdatahttps://developer.mozilla.org/en-US/docs/Web/API/ImageData/data
heighthttps://developer.mozilla.org/en-US/docs/Web/API/ImageData/height
widthhttps://developer.mozilla.org/en-US/docs/Web/API/ImageData/width
TextMetricsPropertieswidthhttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/width
actualBoundingBoxLefthttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxLeft
actualBoundingBoxRighthttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxRight
fontBoundingBoxAscenthttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/fontBoundingBoxAscent
fontBoundingBoxDescenthttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/fontBoundingBoxDescent
actualBoundingBoxAscenthttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxAscent
actualBoundingBoxDescenthttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxDescent
emHeightAscenthttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/emHeightAscent
emHeightDescenthttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/emHeightDescent
hangingBaselinehttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/hangingBaseline
alphabeticBaselinehttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/alphabeticBaseline
ideographicBaselinehttps://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/ideographicBaseline
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>canvas</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - DataTransfer</title>
    <url>/javascript-web-api/data-transfer/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer


PropertiesdropEffecthttps://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect
effectAllowedhttps://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/effectAllowed
fileshttps://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/files
itemshttps://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items
typeshttps://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types
Methods&lt;div draggable=&quot;true&quot; ondragstart=&quot;drag(event)&quot;&gt;Drag item&lt;/div&gt;&lt;div ondrop=&quot;drop(event)&quot;&gt;Drop zone&lt;/div&gt;

function drag(event) &#123;  const &#123; target, dataTransfer, offsetX, offsetY &#125; = event;  dataTransfer.setDragImage(target.querySelector(&#x27;img&#x27;), offsetX, offsetY);  dataTransfer.setData(&#x27;abc&#x27;, 1);&#125;function drop(event) &#123;  console.log(event.dataTransfer.getData(&#x27;abc&#x27;));&#125;

clearDatahttps://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/clearData
getDatahttps://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/getData
setDatahttps://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setData
setDragImagehttps://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>data-transfer</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Document</title>
    <url>/javascript-web-api/document/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/Document


PropertiesactiveElementhttps://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement
bodyhttps://developer.mozilla.org/en-US/docs/Web/API/Document/body
characterSethttps://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet
childElementCounthttps://developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount
childrenhttps://developer.mozilla.org/en-US/docs/Web/API/Document/children
compatModehttps://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode
contentTypehttps://developer.mozilla.org/en-US/docs/Web/API/Document/contentType
currentScripthttps://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript
doctypehttps://developer.mozilla.org/en-US/docs/Web/API/Document/doctype
documentElementhttps://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement
documentURIhttps://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI
embedshttps://developer.mozilla.org/en-US/docs/Web/API/Document/embeds
firstElementChildhttps://developer.mozilla.org/en-US/docs/Web/API/Document/firstElementChild
fontshttps://developer.mozilla.org/en-US/docs/Web/API/Document/fonts
formshttps://developer.mozilla.org/en-US/docs/Web/API/Document/forms
fullscreenElementhttps://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement
headhttps://developer.mozilla.org/en-US/docs/Web/API/Document/head
hiddenhttps://developer.mozilla.org/en-US/docs/Web/API/Document/hidden
imageshttps://developer.mozilla.org/en-US/docs/Web/API/Document/images
implementationhttps://developer.mozilla.org/en-US/docs/Web/API/Document/implementation
lastElementChildhttps://developer.mozilla.org/en-US/docs/Web/API/Document/lastElementChild
linkshttps://developer.mozilla.org/en-US/docs/Web/API/Document/links
pictureInPictureElementhttps://developer.mozilla.org/en-US/docs/Web/API/Document/pictureInPictureElement
pictureInPictureEnabledhttps://developer.mozilla.org/en-US/docs/Web/API/Document/pictureInPictureEnabled
pluginshttps://developer.mozilla.org/en-US/docs/Web/API/Document/plugins
pointerLockElementhttps://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement
featurePolicyhttps://developer.mozilla.org/en-US/docs/Web/API/Document/featurePolicy
scriptshttps://developer.mozilla.org/en-US/docs/Web/API/Document/scripts
scrollingElementhttps://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement
styleSheetshttps://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheets
timelinehttps://developer.mozilla.org/en-US/docs/Web/API/Document/timeline
visibilityStatehttps://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState
cookiehttps://developer.mozilla.org/en-US/docs/Web/API/Document/cookie
Savefunction setCookie(name, value, expireHours = 1) &#123;  const date = new Date();  date.setHours(date.getHours() + expireHours);  document.cookie = `$&#123; name &#125;=$&#123; encodeURI(value) &#125;;expires=$&#123; date.toGMTString() &#125;;path=/;`;&#125;

Loadfunction getCookie(name) &#123;  const nameEQ = `$&#123; name &#125;=`;  const cookieArray = document.cookie.split(&#x27;;&#x27;);  for (let i = 0; i &lt; cookieArray.length; i++) &#123;    let c = cookieArray[i];    while (c.charAt(0) === &#x27; &#x27;) c = c.substring(1, c.length);    if (c.indexOf(nameEQ) === 0) return decodeURI(c.substring(nameEQ.length, c.length));  &#125;  return null;&#125;

Deletefunction deleteCookie(name) &#123;  document.cookie = `$&#123; name &#125;=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/`;&#125;


  web http-request


defaultViewhttps://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView
designModehttps://developer.mozilla.org/en-US/docs/Web/API/Document/designMode
dirhttps://developer.mozilla.org/en-US/docs/Web/API/Document/dir
lastModifiedhttps://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified
readyStatehttps://developer.mozilla.org/en-US/docs/Web/API/Document/readyState
referrerhttps://developer.mozilla.org/en-US/docs/Web/API/Document/referrer
titlehttps://developer.mozilla.org/en-US/docs/Web/API/Document/title
URLhttps://developer.mozilla.org/en-US/docs/Web/API/Document/URL
MethodsadoptNodehttps://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode
appendhttps://developer.mozilla.org/en-US/docs/Web/API/Document/append
caretPositionFromPointhttps://developer.mozilla.org/en-US/docs/Web/API/Document/caretPositionFromPoint
createAttributehttps://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute
createCDATASectionhttps://developer.mozilla.org/en-US/docs/Web/API/Document/createCDATASection
createCommenthttps://developer.mozilla.org/en-US/docs/Web/API/Document/createComment
createDocumentFragmenthttps://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment
createElementhttps://developer.mozilla.org/en-US/docs/Web/API/Document/createElement
const ce = (tag, attributes, styles) =&gt; &#123;  const el = typeof tag === &#x27;string&#x27; ? document.createElement(tag) : tag;  if (attributes) &#123;    for (let key in attributes) &#123;      el.setAttribute(key, attributes[key]);    &#125;  &#125;  if (styles) &#123;    for (let key in styles) &#123;      el.style[key] = styles[key];    &#125;  &#125;  return el;&#125;;ce(&#x27;div&#x27;, &#123; id: &#x27;abc&#x27; &#125;, &#123; width: &#x27;10px&#x27; &#125;);

createElementNShttps://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS
createEventhttps://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent
createNodeIteratorhttps://developer.mozilla.org/en-US/docs/Web/API/Document/createNodeIterator
createProcessingInstructionhttps://developer.mozilla.org/en-US/docs/Web/API/Document/createProcessingInstruction
createRangehttps://developer.mozilla.org/en-US/docs/Web/API/Document/createRange
createTextNodehttps://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode
createTreeWalkerhttps://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker
elementFromPointhttps://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint
elementsFromPointhttps://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint
exitPictureInPicturehttps://developer.mozilla.org/en-US/docs/Web/API/Document/exitPictureInPicture
exitPointerLockhttps://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock
getAnimationshttps://developer.mozilla.org/en-US/docs/Web/API/Document/getAnimations
getElementByIdhttps://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById
getElementsByClassNamehttps://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
getElementsByTagNamehttps://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName
getElementsByTagNameNShttps://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagNameNS
hasStorageAccesshttps://developer.mozilla.org/en-US/docs/Web/API/Document/hasStorageAccess
importNodehttps://developer.mozilla.org/en-US/docs/Web/API/Document/importNode
prependhttps://developer.mozilla.org/en-US/docs/Web/API/Document/prepend
querySelectorhttps://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
const qs = (selector, element = document) =&gt; element.querySelector(selector);qs(&#x27;body&#x27;, document);

querySelectorAllhttps://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll
replaceChildrenhttps://developer.mozilla.org/en-US/docs/Web/API/Document/replaceChildren
requestStorageAccesshttps://developer.mozilla.org/en-US/docs/Web/API/Document/requestStorageAccess
createExpressionhttps://developer.mozilla.org/en-US/docs/Web/API/Document/createExpression
createNSResolverhttps://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver
evaluatehttps://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate
closehttps://developer.mozilla.org/en-US/docs/Web/API/Document/close
getElementsByNamehttps://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName
hasFocushttps://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus
openhttps://developer.mozilla.org/en-US/docs/Web/API/Document/open
writehttps://developer.mozilla.org/en-US/docs/Web/API/Document/write
writelnhttps://developer.mozilla.org/en-US/docs/Web/API/Document/writeln
Eventsscrollhttps://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event
visibilitychangehttps://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange_event
wheelhttps://developer.mozilla.org/en-US/docs/Web/API/Document/wheel_event

  javascript-web-api event-target


animationcancelhttps://developer.mozilla.org/en-US/docs/Web/API/Document/animationcancel_event
animationendhttps://developer.mozilla.org/en-US/docs/Web/API/Document/animationend_event
animationiterationhttps://developer.mozilla.org/en-US/docs/Web/API/Document/animationiteration_event
animationstarthttps://developer.mozilla.org/en-US/docs/Web/API/Document/animationstart_event
copyhttps://developer.mozilla.org/en-US/docs/Web/API/Document/copy_event
cuthttps://developer.mozilla.org/en-US/docs/Web/API/Document/cut_event
pastehttps://developer.mozilla.org/en-US/docs/Web/API/Document/paste_event
draghttps://developer.mozilla.org/en-US/docs/Web/API/Document/drag_event
dragendhttps://developer.mozilla.org/en-US/docs/Web/API/Document/dragend_event
dragenterhttps://developer.mozilla.org/en-US/docs/Web/API/Document/dragenter_event
dragleavehttps://developer.mozilla.org/en-US/docs/Web/API/Document/dragleave_event
dragoverhttps://developer.mozilla.org/en-US/docs/Web/API/Document/dragover_event
dragstarthttps://developer.mozilla.org/en-US/docs/Web/API/Document/dragstart_event
drophttps://developer.mozilla.org/en-US/docs/Web/API/Document/drop_event
fullscreenchangehttps://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenchange_event
fullscreenerrorhttps://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenerror_event
keydownhttps://developer.mozilla.org/en-US/docs/Web/API/Document/keydown_event
keypresshttps://developer.mozilla.org/en-US/docs/Web/API/Document/keypress_event
keyuphttps://developer.mozilla.org/en-US/docs/Web/API/Document/keyup_event
readystatechangehttps://developer.mozilla.org/en-US/docs/Web/API/Document/readystatechange_event
gotpointercapturehttps://developer.mozilla.org/en-US/docs/Web/API/Document/gotpointercapture_event
lostpointercapturehttps://developer.mozilla.org/en-US/docs/Web/API/Document/lostpointercapture_event
pointercancelhttps://developer.mozilla.org/en-US/docs/Web/API/Document/pointercancel_event
pointerdownhttps://developer.mozilla.org/en-US/docs/Web/API/Document/pointerdown_event
pointerenterhttps://developer.mozilla.org/en-US/docs/Web/API/Document/pointerenter_event
pointerleavehttps://developer.mozilla.org/en-US/docs/Web/API/Document/pointerleave_event
pointerlockchangehttps://developer.mozilla.org/en-US/docs/Web/API/Document/pointerlockchange_event
pointerlockerrorhttps://developer.mozilla.org/en-US/docs/Web/API/Document/pointerlockerror_event
pointermovehttps://developer.mozilla.org/en-US/docs/Web/API/Document/pointermove_event
pointerouthttps://developer.mozilla.org/en-US/docs/Web/API/Document/pointerout_event
pointeroverhttps://developer.mozilla.org/en-US/docs/Web/API/Document/pointerover_event
pointeruphttps://developer.mozilla.org/en-US/docs/Web/API/Document/pointerup_event
selectionchangehttps://developer.mozilla.org/en-US/docs/Web/API/Document/selectionchange_event
selectstarthttps://developer.mozilla.org/en-US/docs/Web/API/Document/selectstart_event
touchcancelhttps://developer.mozilla.org/en-US/docs/Web/API/Document/touchcancel_event
touchendhttps://developer.mozilla.org/en-US/docs/Web/API/Document/touchend_event
touchmovehttps://developer.mozilla.org/en-US/docs/Web/API/Document/touchmove_event
touchstarthttps://developer.mozilla.org/en-US/docs/Web/API/Document/touchstart_event
transitioncancelhttps://developer.mozilla.org/en-US/docs/Web/API/Document/transitioncancel_event
transitionendhttps://developer.mozilla.org/en-US/docs/Web/API/Document/transitionend_event
transitionrunhttps://developer.mozilla.org/en-US/docs/Web/API/Document/transitionrun_event
transitionstarthttps://developer.mozilla.org/en-US/docs/Web/API/Document/transitionstart_event
Event handlersonselectionchangehttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange
onvisibilitychangehttps://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>document</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - EventTarget</title>
    <url>/javascript-web-api/event-target/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/EventTarget


Event target methodsaddEventListenerhttps://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
element.onclick = () =&gt; &#123;&#125;;element.addEventListener(type, listener);element.addEventListener(type, listener, options);element.addEventListener(type, listener, useCapture);element.addEventListener(&#x27;click&#x27;, function clickEventHandler() &#123;  console.log(&#x27;once&#x27;);&#125;, &#123;  once: true, // 한번 호출 후 자동으로 제거  capture: false, // 이벤트 캡쳐링 사용 여부  passive: true // preventDefault() 호출하지 않을 경우 경고&#125;);




on
addEventListener



이벤트 핸들러 1 개만 적용 가능
다수의 이벤트 핸들러 적용 가능


타겟 단계 리스너
캡쳐링과 버블링을 선택할 수 있음 (true: 캡쳐링, false: 버블링)


removeEventListenerhttps://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
element.removeEventListener(type, listener);element.removeEventListener(type, listener, options);element.removeEventListener(type, listener, useCapture);

dispatchEventhttps://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent
element.dispatchEvent(new Event(&#x27;click&#x27;)); // Event trigger

Event interfaceshttps://developer.mozilla.org/en-US/docs/Web/API/Event#interfaces_based_on_event
AnimationEventhttps://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
AudioProcessingEventhttps://developer.mozilla.org/en-US/docs/Web/API/AudioProcessingEvent
BeforeUnloadEventhttps://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent
BlobEventhttps://developer.mozilla.org/en-US/docs/Web/API/BlobEvent
ClipboardEventhttps://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent

  javascript-web-api navigator


CloseEventhttps://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
CompositionEventhttps://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
CustomEventhttps://developer.mozilla.org/en-US/docs/Web/API/CustomEvent
DeviceMotionEventhttps://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent
DeviceOrientationEventhttps://developer.mozilla.org/en-US/docs/Web/API/DeviceOrientationEvent
DeviceProximityEventhttps://developer.mozilla.org/en-US/docs/Web/API/DeviceProximityEvent
DragEventhttps://developer.mozilla.org/en-US/docs/Web/API/DragEvent
ErrorEventhttps://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent
FetchEventhttps://developer.mozilla.org/en-US/docs/Web/API/FetchEvent
FocusEventhttps://developer.mozilla.org/en-US/docs/Web/API/FocusEvent
FormDataEventhttps://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent
GamepadEventhttps://developer.mozilla.org/en-US/docs/Web/API/GamepadEvent
HashChangeEventhttps://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent
HIDInputReportEventhttps://developer.mozilla.org/en-US/docs/Web/API/HIDInputReportEvent
IDBVersionChangeEventhttps://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent
InputEventhttps://developer.mozilla.org/en-US/docs/Web/API/InputEvent
KeyboardEventhttps://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent
MediaStreamEventhttps://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent
MessageEventhttps://developer.mozilla.org/en-US/docs/Web/API/MessageEvent
MouseEventhttps://developer.mozilla.org/en-US/docs/Web/API/MouseEvent
MutationEventhttps://developer.mozilla.org/en-US/docs/Web/API/MutationEvent
OfflineAudioCompletionEventhttps://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent
PageTransitionEventhttps://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent
PaymentRequestUpdateEventhttps://developer.mozilla.org/en-US/docs/Web/API/PaymentRequestUpdateEvent
PointerEventhttps://developer.mozilla.org/en-US/docs/Web/API/PointerEvent
PopStateEventhttps://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent
ProgressEventhttps://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent
RTCDataChannelEventhttps://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannelEvent
RTCPeerConnectionIceEventhttps://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent
StorageEventhttps://developer.mozilla.org/en-US/docs/Web/API/StorageEvent
SubmitEventhttps://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent
SVGEventhttps://developer.mozilla.org/en-US/docs/Web/API/SVGEvent
TimeEventhttps://developer.mozilla.org/en-US/docs/Web/API/TimeEvent
TouchEventhttps://developer.mozilla.org/en-US/docs/Web/API/TouchEvent
TrackEventhttps://developer.mozilla.org/en-US/docs/Web/API/TrackEvent
TransitionEventhttps://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
UIEventhttps://developer.mozilla.org/en-US/docs/Web/API/UIEvent
UserProximityEventhttps://developer.mozilla.org/en-US/docs/Web/API/UserProximityEvent
WebGLContextEventhttps://developer.mozilla.org/en-US/docs/Web/API/WebGLContextEvent
WheelEventhttps://developer.mozilla.org/en-US/docs/Web/API/WheelEvent
window.addEventListener(&#x27;wheel&#x27;, (event) =&gt; &#123;  if (event.deltaY &gt; 0) &#123;    // Wheel down  &#125; else &#123;    // Wheel up  &#125;&#125;);

Event propertiesbubbleshttps://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles
cancelablehttps://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable
composedhttps://developer.mozilla.org/en-US/docs/Web/API/Event/composed
currentTargethttps://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget
defaultPreventedhttps://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented
eventPhasehttps://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase
isTrustedhttps://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted
targethttps://developer.mozilla.org/en-US/docs/Web/API/Event/target
timeStamphttps://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp
typehttps://developer.mozilla.org/en-US/docs/Web/API/Event/type
Event methodscomposedPathhttps://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath
preventDefaulthttps://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault
const $a = document.querySelector(&#x27;a&#x27;);$a.addEventListener(&#x27;click&#x27;, (event) =&gt; &#123;  event.preventDefault();&#125;);


브라우저 기본 동작을 막는다.

stopPropagationhttps://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation
const $parent = document.querySelector(&#x27;.parent&#x27;);const $child = document.querySelector(&#x27;.child&#x27;);$parent.addEventListener(&#x27;click&#x27;, (event) =&gt; &#123;  console.log(&#x27;parent&#x27;);&#125;);$child.addEventListener(&#x27;click&#x27;, (event) =&gt; &#123;  console.log(&#x27;child event 1&#x27;);&#125;);$child.addEventListener(&#x27;click&#x27;, (event) =&gt; &#123;  event.stopPropagation(); // $parent 이벤트가 발생하지 않음  console.log(&#x27;child event 2&#x27;);&#125;);


이벤트 버블링을 중단한다.

stopImmediatePropagationhttps://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation
const $parent = document.querySelector(&#x27;.parent&#x27;);const $child = document.querySelector(&#x27;.child&#x27;);$parent.addEventListener(&#x27;click&#x27;, (event) =&gt; &#123;  console.log(&#x27;parent&#x27;);&#125;);$child.addEventListener(&#x27;click&#x27;, (event) =&gt; &#123;  console.log(&#x27;child event 1&#x27;);&#125;);$child.addEventListener(&#x27;click&#x27;, (event) =&gt; &#123;  event.stopImmediatePropagation(); // 다른 모든 이벤트가 발생하지 않음  console.log(&#x27;child event 2&#x27;);&#125;);


이벤트 버블링을 중단한다.다른 이벤트도 모두 중단한다.

]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>event-target</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Element</title>
    <url>/javascript-web-api/element/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/Element


PropertiesassignedSlothttps://developer.mozilla.org/en-US/docs/Web/API/Element/assignedSlot
attributeshttps://developer.mozilla.org/en-US/docs/Web/API/Element/attributes

속성을 담은 NamedNodeMap 객체를 반환한다.

childElementCounthttps://developer.mozilla.org/en-US/docs/Web/API/Element/childElementCount
childrenhttps://developer.mozilla.org/en-US/docs/Web/API/Element/children
classListhttps://developer.mozilla.org/en-US/docs/Web/API/Element/classList

클래스 리스트를 담은 DOMTokenList 를 반환한다.

classNamehttps://developer.mozilla.org/en-US/docs/Web/API/Element/className

클래스를 나타내는 DOMString 을 반환한다.

clientHeighthttps://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight

안쪽 높이를 나타내는 Number 를 반환한다. (요소의 높이 + 세로 패딩)

clientLefthttps://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft

왼쪽 테두리 너비를 나타내는 Number 를 반환한다.

clientTophttps://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop

위쪽 테두리 높이를 나타내는 Number 를 반환한다.

clientWidthhttps://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth

안쪽 너비를 나타내는 Number 를 반환한다. (요소의 너비 + 가로 패딩)

firstElementChildhttps://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild
idhttps://developer.mozilla.org/en-US/docs/Web/API/Element/id
innerHTMLhttps://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML
lastElementChildhttps://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild
localNamehttps://developer.mozilla.org/en-US/docs/Web/API/Element/localName
namespaceURIhttps://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI
nextElementSiblinghttps://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling
outerHTMLhttps://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML
parthttps://developer.mozilla.org/en-US/docs/Web/API/Element/part
prefixhttps://developer.mozilla.org/en-US/docs/Web/API/Element/prefix
previousElementSiblinghttps://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling
scrollHeighthttps://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight

Returns a Number representing the scroll view height of an element.(화면에 보이지 않는 내용 포함 요소의 내용 높이 + 세로 패딩)

scrollLefthttps://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft
scrollTophttps://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop
scrollWidthhttps://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth

Returns a Number representing the scroll view width of the element.(화면에 보이지 않는 내용 포함 요소의 내용 너비 + 가로 패딩)

shadowRoothttps://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot
setHTMLhttps://developer.mozilla.org/en-US/docs/Web/API/Element/setHTML
slothttps://developer.mozilla.org/en-US/docs/Web/API/Element/slot
tagNamehttps://developer.mozilla.org/en-US/docs/Web/API/Element/tagName
ARIA PropertiesariaAtomichttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaAtomic
ariaAutoCompletehttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaAutoComplete
ariaBusyhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaBusy
ariaCheckedhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaChecked
ariaColCounthttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaColCount
ariaColIndexhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaColIndex
ariaColIndexTexthttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaColIndexText
ariaColSpanhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaColSpan
ariaCurrenthttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaCurrent
ariaDescriptionhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaDescription
ariaDisabledhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaDisabled
ariaExpandedhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaExpanded
ariaHasPopuphttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaHasPopup
ariaHiddenhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaHidden
ariaKeyShortcutshttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaKeyShortcuts
ariaLabelhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaLabel
ariaLevelhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaLevel
ariaLivehttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaLive
ariaModalhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaModal
ariaMultilinehttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaMultiline
ariaMultiSelectablehttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaMultiSelectable
ariaOrientationhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaOrientation
ariaPlaceholderhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaPlaceholder
ariaPosInSethttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaPosInSet
ariaPressedhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaPressed
ariaReadOnlyhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaReadOnly
ariaRelevanthttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRelevant
ariaRequiredhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRequired
ariaRoleDescriptionhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRoleDescription
ariaRowCounthttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRowCount
ariaRowIndexhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRowIndex
ariaRowIndexTexthttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRowIndexText
ariaRowSpanhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaRowSpan
ariaSelectedhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaSelected
ariaSetSizehttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaSetSize
ariaSorthttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaSort
ariaValueMaxhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaValueMax
ariaValueMinhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaValueMin
ariaValueNowhttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaValueNow
ariaValueTexthttps://developer.mozilla.org/en-US/docs/Web/API/Element/ariaValueText
Methodsafterhttps://developer.mozilla.org/en-US/docs/Web/API/Element/after
attachShadowhttps://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow
animatehttps://developer.mozilla.org/en-US/docs/Web/API/Element/animate
appendhttps://developer.mozilla.org/en-US/docs/Web/API/Element/append
beforehttps://developer.mozilla.org/en-US/docs/Web/API/Element/before
closesthttps://developer.mozilla.org/en-US/docs/Web/API/Element/closest
computedStyleMaphttps://developer.mozilla.org/en-US/docs/Web/API/Element/computedStyleMap
getAnimationshttps://developer.mozilla.org/en-US/docs/Web/API/Element/getAnimations
getAttributehttps://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute
getAttributeNameshttps://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames
getAttributeNodehttps://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNode
getAttributeNodeNShttps://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNodeNS
getAttributeNShttps://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS
getBoundingClientRecthttps://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect
getClientRectshttps://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects
getElementsByClassNamehttps://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName
getElementsByTagNamehttps://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName
getElementsByTagNameNShttps://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagNameNS
hasAttributehttps://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute
hasAttributeNShttps://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS
hasAttributeshttps://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes
hasPointerCapturehttps://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture
insertAdjacentElementhttps://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement
insertAdjacentHTMLhttps://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
insertAdjacentTexthttps://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText
matcheshttps://developer.mozilla.org/en-US/docs/Web/API/Element/matches
prependhttps://developer.mozilla.org/en-US/docs/Web/API/Element/prepend
querySelectorhttps://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector
querySelectorAllhttps://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll
releasePointerCapturehttps://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture
removehttps://developer.mozilla.org/en-US/docs/Web/API/Element/remove
removeAttributehttps://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute
removeAttributeNodehttps://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNode
removeAttributeNShttps://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS
replaceChildrenhttps://developer.mozilla.org/en-US/docs/Web/API/Element/replaceChildren
replaceWithhttps://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith
requestFullscreenhttps://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen
let fullscreenState = false;document.addEventListener(&#x27;fullscreenchange&#x27;, () =&gt; &#123;  fullscreenState = Boolean(document.fullscreenElement);&#125;);async function toggleFullscreen() &#123;  const videoElement = document.querySelector(&#x27;video&#x27;);  try &#123;    if (!document.fullscreenElement) &#123;      videoElement.requestFullscreen();    &#125; else &#123;      document.exitFullscreen();    &#125;  &#125; catch (error) &#123;    alert(`Error attempting to enable fullscreen mode: $&#123; error.message &#125; ($&#123; error.name &#125;)`);  &#125;&#125;

requestPointerLockhttps://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock
scrollhttps://developer.mozilla.org/en-US/docs/Web/API/Element/scroll
scrollByhttps://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy
scrollIntoViewhttps://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView
scrollTohttps://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo
setAttributehttps://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute
setAttributeNodehttps://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNode
setAttributeNodeNShttps://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNodeNS
setAttributeNShttps://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS
setPointerCapturehttps://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture
toggleAttributehttps://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute
Eventscancelhttps://developer.mozilla.org/en-US/docs/Web/API/Element/cancel_event
errorhttps://developer.mozilla.org/en-US/docs/Web/API/Element/error_event
scrollhttps://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event
selecthttps://developer.mozilla.org/en-US/docs/Web/API/Element/select_event
showhttps://developer.mozilla.org/en-US/docs/Web/API/Element/show_event
wheelhttps://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event

  javascript-web-api event-target


securitypolicyviolationhttps://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event
copyhttps://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event
cuthttps://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event
pastehttps://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
compositionendhttps://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event
compositionstarthttps://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event
compositionupdatehttps://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event
blurhttps://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event
focushttps://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event
focusinhttps://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event
focusouthttps://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event
fullscreenchangehttps://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenchange_event
fullscreenerrorhttps://developer.mozilla.org/en-US/docs/Web/API/Element/fullscreenerror_event
keydownhttps://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event
keypresshttps://developer.mozilla.org/en-US/docs/Web/API/Element/keypress_event
keyuphttps://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event
auxclickhttps://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event
clickhttps://developer.mozilla.org/en-US/docs/Web/API/Element/click_event
contextmenuhttps://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event
dblclickhttps://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event
mousedownhttps://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event
mouseenterhttps://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event
mouseleavehttps://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event
mousemovehttps://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
mouseouthttps://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event
mouseoverhttps://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event
mouseuphttps://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event
webkitmouseforcechangedhttps://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforcechanged_event
webkitmouseforcedownhttps://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforcedown_event
webkitmouseforcewillbeginhttps://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforcewillbegin_event
webkitmouseforceuphttps://developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforceup_event
touchcancelhttps://developer.mozilla.org/en-US/docs/Web/API/Element/touchcancel_event
touchendhttps://developer.mozilla.org/en-US/docs/Web/API/Element/touchend_event
touchmovehttps://developer.mozilla.org/en-US/docs/Web/API/Element/touchmove_event
touchstarthttps://developer.mozilla.org/en-US/docs/Web/API/Element/touchstart_event
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>element</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>accessibility</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - HTMLElement</title>
    <url>/javascript-web-api/html-element/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement


PropertiesaccessKeyhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKey
accessKeyLabelhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKeyLabel
contentEditablehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable
// WYSIWYG Live Edit (이지윅 라이브 수정)element.contentEditable = true;

isContentEditablehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/isContentEditable
contextMenuhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contextMenu
datasethttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset
dirhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir
enterkeyhinthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/enterkeyhint
hiddenhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden
inerthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert
innerTexthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText
langhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang
noncehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/nonce
offsetHeighthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight

요소의 높이, 세로 패딩, 위쪽 및 아래쪽 테두리, 사용 가능한 경우 가로 스크롤 막대를 포함한 높이값을 반환한다.

offsetLefthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft
offsetParenthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent
offsetTophttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop
offsetWidthhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth

요소의 너비, 가로 패딩, 왼쪽 및 오른쪽 테두리, 사용 가능한 경우 세로 스크롤 막대를 포함한 너비값을 반환한다.

outerTexthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText
stylehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style
tabIndexhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex
titlehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title
MethodsattachInternalshttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/attachInternals
blurhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur
clickhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click
focushttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus
Eventsinvalidhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/invalid_event
animationcancelhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationcancel_event
animationendhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationend_event
animationiterationhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationiteration_event
animationstarthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationstart_event
beforeinputhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event
inputhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event
changehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event
gotpointercapturehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/gotpointercapture_event
lostpointercapturehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lostpointercapture_event
pointercancelhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointercancel_event
pointerdownhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerdown_event
pointerenterhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerenter_event
pointerleavehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerleave_event
pointermovehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointermove_event
pointerouthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerout_event
pointeroverhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerover_event
pointeruphttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerup_event
transitioncancelhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitioncancel_event
transitionendhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionend_event
transitionrunhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionrun_event
transitionstarthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionstart_event
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>html-element</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - HTMLFormElement</title>
    <url>/javascript-web-api/html-form-element/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement


PropertiesJavascriptconst form = document.querySelector(&#x27;form&#x27;);const formData = new FormData(form);formData.append(&#x27;key&#x27;, &#x27;value&#x27;);formData.set(&#x27;key&#x27;, &#x27;new value&#x27;);formData.delete(&#x27;key&#x27;);formData.has(&#x27;key&#x27;);if (form.requestSubmit) &#123;  form.requestSubmit(); // 유효성 검사에 통과하면 전송 (IE 지원 안함)&#125; else &#123;  form.submit(); // 유효성 검사와 상관없이 전송&#125;form.addEventListener(&#x27;submit&#x27;, async (event) =&gt; &#123;  event.preventDefault();  const form = event.currentTarget;  const &#123; formAction, formMethod &#125; = event.submitter;  const resource = new URL(formAction || window.location.href);  const options = &#123; method: formMethod, body: new FormData(form) &#125;;  if (formMethod === &#x27;get&#x27;) &#123;    resource.search = new URLSearchParams(formData);  &#125; else &#123;    if (form.enctype === &#x27;multipart/form-data&#x27;) &#123;      options.body = formData;    &#125; else &#123;      options.headers[&#x27;Content-Type&#x27;] = &#x27;application/json&#x27;;      options.body = JSON.stringify(Object.fromEntries(formData));    &#125;  &#125;  let response = await fetch(resource, options);  let result = await response.json();&#125;);

jQueryconst $form = $(&#x27;form&#x27;);const formData = new FormData($form[0]);$.ajax(&#123;  url: &#x27;&#x27;,  type: &#x27;post&#x27;,  data: formData,  cache: false,  contentType: false,  processData: false,  success(data, jqXHR, textStatus) &#123;&#125;,  error(jqXHR, textStatus, errorThrown) &#123;&#125;,&#125;);

elementshttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements
lengthhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/length
namehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name
methodhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method
targethttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target
actionhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action
encodinghttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding
enctypehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype
acceptCharsethttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset
MethodsreportValidityhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reportValidity
requestSubmithttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/requestSubmit
resethttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset
submithttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit
Eventsformdatahttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/formdata_event
resethttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset_event
submithttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>html-form-element</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - HTMLMediaElement</title>
    <url>/javascript-web-api/html-media-element/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement


PropertiesaudioTrackshttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/audioTracks

사용 가능한 오디오 트랙을 나타내는 AudioTrackList 객체를 반환한다.

autoplayhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay

미디어가 로드 되자마자 재생을 시작할지 여부를 설정하거나 반환한다.

bufferedhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered

미디어의 버퍼링 된 부분을 나타내는 TimeRanges 객체를 반환한다.

controllerhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controller

미디어의 현재 미디어 컨트롤러를 나타내는 MediaController 객체를 반환한다.

controlshttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls

미디어에 컨트롤 (재생 &#x2F; 일시 정지 등) 을 표시할지 여부를 설정하거나 반환한다.

controlsListhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controlsList
crossOriginhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin

미디어의 CORS 설정을 설정하거나 반환한다.

currentSrchttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentSrc

미디어의 URL 을 반환한다.

currentTimehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime

미디어의 현재 재생 위치를 설정하거나 반환한다.

defaultMutedhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted

기본적으로 미디어를 음소거할지 여부를 설정하거나 반환한다.

defaultPlaybackRatehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate

미디어 재생 기본 속도를 설정하거나 반환한다.

disableRemotePlaybackhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/disableRemotePlayback
durationhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration

미디어의 길이를 초 단위로 반환한다.

endedhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended

미디어 재생이 종료되었는지 여부를 반환한다.

errorhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error

미디어의 오류 상태를 나타내는 MediaError 객체를 반환한다.

loophttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop

완료되면 미디어를 다시 시작할지 여부를 설정하거나 반환한다.

mutedhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted

미디어 음소거 여부를 설정 또는 반환한다.

networkStatehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState

미디어의 현재 네트워크 상태를 반환한다.

pausedhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused

미디어가 일시 중지되었는지 여부를 반환한다.

playbackRatehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate

미디어 재생 속도를 설정하거나 반환한다.

readyStatehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState

미디어의 현재 준비 상태를 반환한다.

seekablehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekable

미디어의 탐색 가능한 부분을 나타내는 TimeRanges 객체를 반환한다.

sinkIdhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/sinkId
srchttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src

미디어 요소의 현재 소스를 설정하거나 반환한다.

srcObjecthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject
textTrackshttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/textTracks

사용 가능한 텍스트 트랙을 나타내는 TextTrackList 객체를 반환한다.

videoTrackshttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/videoTracks

사용 가능한 비디오 트랙을 나타내는 VideoTrackList 객체를 반환한다.

volumehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume

미디어의 볼륨을 설정하거나 반환한다.

onencryptedhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onencrypted
onwaitingforkeyhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onwaitingforkey
MethodscaptureStreamhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/captureStream
canPlayTypehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType

다른 유형의 비디오를 재생할 수 있는지 확인한다.

fastSeekhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/fastSeek

입력된 시간으로 바로 이동한다.

loadhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load

미디어를 리셋하고 src 속성 또는 &lt;source&gt; 요소로 전달된 소스 중 최적의 소스를 로드한다.

pausehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause

미디어를 일시 정지한다.

playhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play
const videoElem = document.getElementById(&#x27;video&#x27;);const playButton = document.getElementById(&#x27;playbutton&#x27;);playButton.addEventListener(&#x27;click&#x27;, handlePlayButton, false);playVideo();async function playVideo() &#123;  try &#123;    await videoElem.play();    playButton.classList.add(&#x27;playing&#x27;);  &#125; catch (error) &#123;    playButton.classList.remove(&#x27;playing&#x27;);  &#125;&#125;function handlePlayButton() &#123;  if (videoElem.paused) &#123;    playVideo();  &#125; else &#123;    videoElem.pause();    playButton.classList.remove(&#x27;playing&#x27;);  &#125;&#125;


미디어를 재생한다.async 함수내에서 try-catch 구문을 사용하여 재생을 권고한다.

seekToNextFramehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekToNextFrame
setMediaKeyshttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setMediaKeys
setSinkIdhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId
Eventsaborthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/abort_event

에러가 아닌 상황에서 미디어 데이터를 가져오는 것을 중단할 경우 발생한다.

canplayhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event

미디어 데이터의 재생이 가능해질 때 발생한다.전체 미디어를 재생하기 위해서 버퍼링이 더 필요할 수 있다.

canplaythroughhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplaythrough_event
Javascriptdocument.getElementById(&#x27;video&#x27;).addEventListener(&#x27;canplaythrough&#x27;, function fn() &#123;  this.play();  this.removeEventListener(&#x27;canplaythrough&#x27;, fn);&#125;);

jQuery$(&#x27;#video&#x27;).one(&#x27;canplaythrough&#x27;, (event) =&gt; &#123;  event.target.play();&#125;);


추가 버퍼링 없이 전체 미디어를 재생할 수 있는 시점에 발생한다.아이폰에서 동작 안할 경우 load 이벤트를 적용한다.

durationchangehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/durationchange_event

duration 속성이 바뀌었을 때 발생한다.

emptiedhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/emptied_event

미디어가 제거된 시점에 발생한다.미디어가 이미 (부분적으로라도) 로드 되었는데 HTMLMediaElement.load() 메서드 호출로 재 로드할 경우 발생한다.networkState 가 NETWORK_EMPTY 상태로 들어가게 되었을 때 발생한다.

endedhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended_event

미디어 재생이 완료 되었을 때 발생한다.

errorhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error_event

에러가 발생하여 리소스를 로드할 수 없는 시점에 발생한다.

loadeddatahttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event

미디어의 첫번째 프레임이 로딩 완료된 시점에 발생한다.

loadedmetadatahttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadedmetadata_event

메타데이터가 로드 된 시점에 발생한다.

loadstarthttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadstart_event

미디어를 찾기 시작할 때 발생한다.

pausehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event

미디어 일시 정지를 요청하고 paused 상태로 진입하는 시점에 발생한다.HTMLMediaElement.pause() 메서드가 호출되는 시점에 발생한다.

playhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play_event

HTMLMediaElement.play() 메서드 호출이나 autoplay 속성에 의해 paused 프로퍼티가 true 에서 false 로 전환되는 시점에 발생한다.

playinghttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playing_event

일시 정지 되거나 버퍼 부족으로 재생 정지 된 이후 재생 가능한 시점에 발생한다.

progresshttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/progress_event

브라우저가 리소르를 로딩 중일 때 주기적으로 발생한다.

ratechangehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ratechange_event

재생 속도가 변경될 때 발생한다.defaultPlaybackRate 나 playbackRate 의 속성이 변경되었을 때 발생한다.

seekedhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeked_event

미디어 탐색이 끝나면 발생한다.

seekinghttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking_event

미디어 탐색 중 발생한다.

stalledhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/stalled_event

미디어 데이터를 요청했지만 전송되지 않은 경우 발생한다.

suspendhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event

미디어 로딩이 중지된 시점에 발생한다.

timeupdatehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/timeupdate_event

현재 재생위치가 바뀌었을 때 발생한다.

volumechangehttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volumechange_event

볼륨이 변경되는 시점에 발생한다.volume 속성이 바뀌거나 muted 속성이 바뀌었을 때 발생한다.

waitinghttps://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/waiting_event

일시적인 버퍼 부족으로 재생이 정지된 시점에 발생한다.

]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>html-media-element</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Indexed DB</title>
    <url>/javascript-web-api/indexed-db/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/indexedDB


Indexed DB// 저장 공간 사용 가능 체크async function storageEstimate() &#123;  if (navigator.storage &amp;&amp; navigator.storage.estimate) &#123;    const &#123;      usage, // 사용 된 바이트      quota, // 사용 가능한 바이트    &#125; = await navigator.storage.estimate();    const percentageUsed = (usage / quota) * 100;    const remaining = quota - usage;    console.log(`사용 가능한 스토리지의 $&#123;percentageUsed.toFixed(2)&#125;% 를 사용했습니다.`);    console.log(`최대 $&#123;remaining&#125; bytes 를 더 사용할 수 있습니다.`);  &#125;&#125;


남은 저장 공간의 60% 를 사용할 수 있다.

window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;const DBOpenRequest = window.indexedDB.open(&#x27;databaseName&#x27;, 1);DBOpenRequest.onupgradeneeded = (event) =&gt; &#123;  const db = event.target.result; // request.result  const objectStore = db.createObjectStore(&#x27;objectStoreName&#x27;, &#123; keyPath: &#x27;id&#x27; &#125;);  // objectStore.createIndex(&#x27;indexName&#x27;, [&#x27;name.last&#x27;, &#x27;name.first&#x27;], &#123; unique: false &#125;);&#125;;DBOpenRequest.onsuccess = async () =&gt; &#123;  await getStoreData(&#x27;storeName&#x27;, &#x27;keyName&#x27;);  await saveStoreData(&#x27;storeName&#x27;, &#x27;keyName&#x27;);  await deleteStoreData(&#x27;storeName&#x27;, &#x27;keyName&#x27;);&#125;DBOpenRequest.onerror = (event) =&gt; &#123;  console.log(event);&#125;;const getStoreData = (storeName, key) =&gt; &#123;  return new Promise((resolve) =&gt; &#123;    const DBOpenRequest = window.indexedDB.open(&#x27;databaseName&#x27;, 1);    DBOpenRequest.onsuccess = () =&gt; &#123;      const transaction = DBOpenRequest.result.transaction(storeName, &#x27;readonly&#x27;);      const objectStore = transaction.objectStore(storeName);      const request = (key === &#x27;all&#x27;) ? objectStore.getAll() : objectStore.get(key);      request.onsuccess = () =&gt; &#123;        resolve(request.result);      &#125;;      transaction.oncomplete = () =&gt; &#123;        DBOpenRequest.result.close();      &#125;;    &#125;;  &#125;);&#125;;const saveStoreData = (storeName, key) =&gt; &#123;  return new Promise((resolve) =&gt; &#123;    const DBOpenRequest = window.indexedDB.open(&#x27;databaseName&#x27;, 1);    DBOpenRequest.onsuccess = () =&gt; &#123;      const transaction = DBOpenRequest.result.transaction(storeName, &#x27;readwrite&#x27;);      const objectStore = transaction.objectStore(storeName);      const request = objectStore.put(payload);      request.onsuccess = () =&gt; &#123;        resolve(request.result);      &#125;;      transaction.oncomplete = () =&gt; &#123;        DBOpenRequest.result.close();      &#125;;    &#125;;  &#125;);&#125;;const deleteStoreData = (storeName, key) =&gt; &#123;  return new Promise((resolve) =&gt; &#123;    const DBOpenRequest = window.indexedDB.open(&#x27;databaseName&#x27;, 1);    DBOpenRequest.onsuccess = () =&gt; &#123;      const transaction = DBOpenRequest.result.transaction(storeName, &#x27;readwrite&#x27;);      const objectStore = transaction.objectStore(storeName);      const request = (key === &#x27;all&#x27;) ? objectStore.clear() : objectStore.delete(key);      request.onsuccess = () =&gt; &#123;        resolve(request.result);      &#125;;      transaction.oncomplete = () =&gt; &#123;        DBOpenRequest.result.close();      &#125;;    &#125;;  &#125;);&#125;;

IDBFactoryhttps://developer.mozilla.org/en-US/docs/Web/API/IDBFactoryhttps://developer.mozilla.org/en-US/docs/Web/API/IDBRequesthttps://developer.mozilla.org/en-US/docs/Web/API/IDBOpenDBRequesthttps://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeEvent
Methodsopenhttps://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/open
deleteDatabasehttps://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase
// 전체 데이터베이스 삭제window.indexedDB.databases().then((result) =&gt; &#123;  result.forEach((&#123; name &#125;) =&gt; window.indexedDB.deleteDatabase(name));&#125;);


데이터베이스를 삭제한다.

cmphttps://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/cmp
databaseshttps://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/databases
IDBIndexhttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndexhttps://developer.mozilla.org/en-US/docs/Web/API/IDBCursorhttps://developer.mozilla.org/en-US/docs/Web/API/IDBCursorWithValuehttps://developer.mozilla.org/en-US/docs/Web/API/IDBKeyRange
Propertiesnamehttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/name
objectStorehttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/objectStore
keyPathhttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/keyPath
multiEntryhttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/multiEntry
uniquehttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/unique
Methodscounthttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/count
gethttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/get
getKeyhttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getKey
getAllhttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAll
getAllKeyshttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAllKeys
openCursorhttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openCursor
openKeyCursorhttps://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openKeyCursor
IDBObjectStorehttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStorehttps://developer.mozilla.org/en-US/docs/Web/API/IDBDatabasehttps://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction
PropertiesindexNameshttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/indexNames
keyPathhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/keyPath
namehttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/name
transactionhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/transaction
autoIncrementhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/autoIncrement
Methodsaddhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/add
const storeAddItem = (payload) =&gt; &#123;  return new Promise((resolve) =&gt; &#123;    IDBDatabase.transaction(&#x27;ObjectStoreName&#x27;, &#x27;readwrite&#x27;).objectStore(&#x27;ObjectStoreName&#x27;).add(payload);    resolve();  &#125;);&#125;;


레코드를 추가한다.

clearhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/clear
const storeClearItems = () =&gt; &#123;  return new Promise((resolve) =&gt; &#123;    IDBDatabase.transaction(&#x27;ObjectStoreName&#x27;, &#x27;readwrite&#x27;).objectStore(&#x27;ObjectStoreName&#x27;).clear();    resolve();  &#125;);&#125;;


모든 레코드를 제거한다.

counthttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/count
const storeCountItems = () =&gt; &#123;  return new Promise((resolve) =&gt; &#123;    IDBDatabase.transaction(&#x27;ObjectStoreName&#x27;, &#x27;readonly&#x27;).objectStore(&#x27;ObjectStoreName&#x27;).count().onsuccess = (event) =&gt; &#123;      resolve(event.target.result);    &#125;;  &#125;);&#125;;


레코드 수를 반환한다.

createIndexhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex
deletehttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete
deleteIndexhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/deleteIndex
gethttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/get
const storeGetItem = (key) =&gt; &#123;  return new Promise((resolve) =&gt; &#123;    IDBDatabase.transaction(&#x27;ObjectStoreName&#x27;, &#x27;readonly&#x27;).objectStore(&#x27;ObjectStoreName&#x27;).get(key).onsuccess = (event) =&gt; &#123;      resolve(event.target.result);    &#125;;  &#125;);&#125;;

getKeyhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getKey
getAllhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll
const storeGetAllItem = () =&gt; &#123;  return new Promise((resolve) =&gt; &#123;    IDBDatabase.transaction(&#x27;ObjectStoreName&#x27;, &#x27;readonly&#x27;).objectStore(&#x27;ObjectStoreName&#x27;).getAll().onsuccess = (event) =&gt; &#123;      resolve(event.target.result);    &#125;;  &#125;);&#125;;


모든 레코드를 반환한다.

getAllKeyshttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAllKeys
indexhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/index
openCursorhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openCursor
const cursor = IDBDatabase.transaction(&#x27;ObjectStoreName&#x27;, &#x27;readonly&#x27;).objectStore(&#x27;ObjectStoreName&#x27;).openCursor();cursor.onsuccess = (&#123; target &#125;) =&gt; &#123;  const &#123; result &#125; = target;  if (result) &#123;    console.log(result.key, result.value);    // cursor.continue();  &#125; else &#123;    console.log(&#x27;No more entries&#x27;);  &#125;&#125;;

openKeyCursorhttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openKeyCursor
puthttps://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/put
const storePutItem = (payload) =&gt; &#123;  return new Promise((resolve) =&gt; &#123;    IDBDatabase.transaction(&#x27;ObjectStoreName&#x27;, &#x27;readwrite&#x27;).objectStore(&#x27;ObjectStoreName&#x27;).put(payload);    resolve();  &#125;);&#125;;


레코드를 추가하거나 업데이트한다.추가할 때는 IDBobjectStore.add() 사용을 권장하고, 업데이트 할 때는 IDBursor.update() 를 권장한다.

]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>indexed-db</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Intersection Observer</title>
    <url>/javascript-web-api/intersection-observer/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
  https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver


Propertiesroothttps://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/root
rootMarginhttps://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/rootMargin
thresholdshttps://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/thresholds

0.0: 요소가 교차영역에 진입할 때 observer 를 실행한다.0.1: 요소가 교차영역에 모두 진입한 뒤 observer 를 실행한다.

Methodsconst $tocListLink = $(&#x27;.toc-list-link&#x27;);const $headerList = $(&#x27;h2, h3&#x27;);const $headerListLink = $headerList.find(&#x27;a&#x27;);const locationHash = location.hash;const currentInView = new Set();const tocActive = (id) =&gt; &#123;  const anchor = `#$&#123; id &#125;`;  $tocListLink.removeClass(&#x27;active&#x27;);    $tocListLink.filter(`[href=&#x27;$&#123; anchor &#125;&#x27;]`).addClass(&#x27;active&#x27;).closest(&#x27;.toc-list-child&#x27;).siblings(&#x27;.toc-list-link&#x27;).addClass(&#x27;active&#x27;);    history.pushState(null, null, anchor);&#125;;$headerList.each((index, item) =&gt; &#123;  new IntersectionObserver((entries) =&gt; &#123;    entries.forEach((entry) =&gt; &#123;      if (entry.isIntersecting) &#123;        currentInView.add(entry.target);      &#125; else &#123;        currentInView.delete(entry.target);      &#125;      const result = (currentInView.size) ?        [...currentInView].sort((a, b) =&gt; a.offsetTop - b.offsetTop) :        $headerList          .filter((index, element) =&gt; element.offsetTop &lt; $body.scrollTop())          .sort((a, b) =&gt; b.offsetTop - a.offsetTop);      result[0] &amp;&amp; result[0].id &amp;&amp; tocActive(result[0].id);    &#125;);  &#125;, &#123;    root: null,    rootMargin: &#x27;-100px 0px 0px 0px&#x27;,    threshold: 0,  &#125;).observe(item);&#125;);if (locationHash) &#123;  setTimeout(() =&gt; &#123;    $(locationHash)[0].scrollIntoView();  &#125;, 300);&#125;$.merge($tocListLink, $headerListLink).on(&#x27;click&#x27;, (event) =&gt; &#123;  event.preventDefault();  $($(event.currentTarget).attr(&#x27;href&#x27;))[0].scrollIntoView(&#123; behavior: &#x27;smooth&#x27; &#125;);&#125;);

disconnecthttps://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/disconnect
observehttps://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/observe
takeRecordshttps://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/takeRecords
unobservehttps://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver/unobserve
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>intersection-observer</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Media Devices</title>
    <url>/javascript-web-api/media-devices/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices


Methods// MediaStream use cam// https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamconst mediaStream = await navigator.mediaDevices.getUserMedia(&#123; video: true &#125;);const video = document.querySelector(&#x27;video&#x27;);const canvas = document.querySelector(&#x27;canvas&#x27;);const context = canvas.getContext(&#x27;2d&#x27;);let videoWidth = null;let videoHeight = null;const raf = () =&gt; &#123;  context.filter = &#x27;grayscale(1)&#x27;;  context.drawImage(video, 0, 0, videoWidth, videoHeight);  requestAnimationFrame(raf);&#125;;const handleLoadedMetadata = () =&gt; &#123;  videoWidth = video.videoWidth;  videoHeight = video.videoHeight;  canvas.width = videoWidth;  canvas.height = videoHeight;  video.play();  raf();  video.removeEventListener(&#x27;loadedmetadata&#x27;, handleLoadedMetadata);&#125;;video.addEventListener(&#x27;loadedmetadata&#x27;, handleLoadedMetadata);video.srcObject = mediaStream;// https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getVideoTracks// https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackconst mediaStreamTrack = mediaStream.getVideoTracks()[0];// https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackProcessorconst mediaStreamTrackProcessor = new MediaStreamTrackProcessor(&#123; track: mediaStreamTrack &#125;);// https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackGeneratorconst mediaStreamTrackGenerator = new MediaStreamTrackGenerator(&#123; kind: &#x27;video&#x27; &#125;);console.log(mediaStreamTrackProcessor, mediaStreamTrackGenerator);

enumerateDeviceshttps://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices
getSupportedConstraintshttps://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getSupportedConstraints
getDisplayMediahttps://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia
getUserMediahttps://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia
selectAudioOutputhttps://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/selectAudioOutput
Eventsdevicechangehttps://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/devicechange_event
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>media-devices</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Navigator</title>
    <url>/javascript-web-api/navigator/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/Navigator


Propertiesconnectionhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection
cookieEnabledhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/cookieEnabled
credentialshttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/credentials
deviceMemoryhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory
geolocationhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/geolocation
hidhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/hid
hardwareConcurrencyhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/hardwareConcurrency
keyboardhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/keyboard
languagehttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/language
languageshttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages
lockshttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/locks
maxTouchPointshttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/maxTouchPoints
mediaCapabilitieshttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaCapabilities
mediaDeviceshttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices
mediaSessionhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaSession
onLinehttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine
pdfViewerEnabledhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/pdfViewerEnabled
permissionshttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/permissions
presentationhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/presentation
serialhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/serial
serviceWorkerhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/serviceWorker
storagehttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/storage
userAgenthttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/userAgent
userAgentDatahttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/userAgentData
webdriverhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/webdriver
windowControlsOverlayhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/windowControlsOverlay
xrhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/xr
buildIDhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/buildID
contactshttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/contacts
wakeLockhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/wakeLock
const canWakeLock = () =&gt; &#x27;wakeLock&#x27; in navigator;let wakelock;async function lockWakeState() &#123;  if (!canWakeLock()) return;  try &#123;    wakelock = await navigator.wakeLock.request();    wakelock.addEventListener(&#x27;release&#x27;, () =&gt; &#123;      console.log(&#x27;Screen Wake State Locked:&#x27;, !wakelock.released);    &#125;);    console.log(&#x27;Screen Wake State Locked:&#x27;, !wakelock.released);  &#125; catch(error) &#123;    console.error(&#x27;Failed to lock wake state with reason:&#x27;, error.message);  &#125;&#125;function releaseWakeState() &#123;  if (wakelock) wakelock.release();  wakelock = null;&#125;await lockWakeState();setTimeout(releaseWakeState, 5000); // release wake state after 5 seconds


화면 보호기를 중단한다.

MethodscanSharehttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/canShare
clearAppBadgehttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/clearAppBadge
getBatteryhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/getBattery
registerProtocolHandlerhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler
requestMediaKeySystemAccesshttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess
requestMIDIAccesshttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMIDIAccess
sendBeaconhttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon
setAppBadgehttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/setAppBadge
sharehttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/share
vibratehttps://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate
InterfaceClipboardhttps://developer.mozilla.org/en-US/docs/Web/API/Clipboard
readhttps://developer.mozilla.org/en-US/docs/Web/API/Clipboard/read
readTexthttps://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText
writehttps://developer.mozilla.org/en-US/docs/Web/API/Clipboard/write
writeTexthttps://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText
navigator.clipboard.writeText(&#x27;text&#x27;);
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>navigator</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Node</title>
    <url>/javascript-web-api/node/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/Node


PropertiesbaseURIhttps://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI
childNodeshttps://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes
firstChildhttps://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild
isConnectedhttps://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected
lastChildhttps://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild
nextSiblinghttps://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling
nodeNamehttps://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName
nodeTypehttps://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType



Name
Value



ELEMENT_NODE
1


ATTRIBUTE_NODE
2


TEXT_NODE
3


CDATA_SECTION_NODE
4


PROCESSING_INSTRUCTION_NODE
7


COMMENT_NODE
8


DOCUMENT_NODE
9


DOCUMENT_TYPE_NODE
10


DOCUMENT_FRAGMENT_NODE
11


nodeValuehttps://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue
ownerDocumenthttps://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument
parentNodehttps://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode
parentElementhttps://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement
previousSiblinghttps://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling
textContenthttps://developer.mozilla.org/en-US/docs/Web/API/Node/textContent
MethodsappendChildhttps://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild
cloneNodehttps://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode
compareDocumentPositionhttps://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
containshttps://developer.mozilla.org/en-US/docs/Web/API/Node/contains
getRootNodehttps://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode
hasChildNodeshttps://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes
insertBeforehttps://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore
isDefaultNamespacehttps://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace
isEqualNodehttps://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode
isSameNodehttps://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode
lookupPrefixhttps://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix
lookupNamespaceURIhttps://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI
normalizehttps://developer.mozilla.org/en-US/docs/Web/API/Node/normalize
removeChildhttps://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild
replaceChildhttps://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>node</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Web Component</title>
    <url>/javascript-web-api/web-component/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/Web_Components
  https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements
  https://css-tricks.com/an-introduction-to-web-components
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
  https://css-tricks.com/creating-a-custom-element-from-scratch
  https://css-tricks.com/encapsulating-style-and-structure-with-shadow-dom
  https://css-tricks.com/advanced-tooling-for-web-components
  https://webcomponents.dev/blog/all-the-ways-to-make-a-web-component


Custom elementsclass MyCounter extends HTMLParagraphElement &#123;  constructor() &#123;    super();  &#125;&#125;document.createElement(&#x27;my-counter&#x27;);// document.createElement(&#x27;p&#x27;, &#123; is: &#x27;my-counter&#x27; &#125;);

&lt;my-counter counter=&quot;5&quot;&gt;&lt;!-- &lt;p is=&quot;my-counter&quot;&gt; --&gt;

customElements.define(&#x27;my-counter&#x27;,  class extends HTMLElement &#123;    constructor() &#123;      super();      const template = document.getElementById(&#x27;tag-template&#x27;).content;      const shadowRoot = this.attachShadow(&#123; mode: &#x27;open&#x27; &#125;).appendChild(template.cloneNode(true));    &#125;  &#125;);const myCounter = document.querySelector(&#x27;my-counter&#x27;);myCounter.counter = 10;

CustomElementRegistryhttps://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry
customElementshttps://developer.mozilla.org/en-US/docs/Web/API/Window/customElements
Life cycle callbackshttps://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks
Extensions for creating custom built-in elementshttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-is
CSS pseudohttps://developer.mozilla.org/en-US/docs/Web/CSS/:definedhttps://developer.mozilla.org/en-US/docs/Web/CSS/:hosthttps://developer.mozilla.org/en-US/docs/Web/CSS/:host-contexthttps://developer.mozilla.org/en-US/docs/Web/CSS/::parthttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-part
Shadow DOMhttps://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM
ShadowRoothttps://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot
Element extensionshttps://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadowhttps://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot
Relevant node additionshttps://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNodehttps://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected
Event extensionshttps://developer.mozilla.org/en-US/docs/Web/API/Event/composedhttps://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath
HTML templatestemplatehttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/template
slothttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot
The slot global HTML attributehttps://developer.mozilla.org/en-US/docs/Web/API/Element/assignedSlothttps://developer.mozilla.org/en-US/docs/Web/API/Element/assignedSlot
CSS pseudo-elementshttps://developer.mozilla.org/en-US/docs/Web/CSS/::slotted
The slotchange eventhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/slotchange_eventhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement
ExamplesOfficial exampleshttps://github.com/mdn/web-components-examples
uhtmlhttps://github.com/WebReflection/uhtml

  
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>web-component</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Web Socket</title>
    <url>/javascript-web-api/web-socket/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/WebSocket


PropertiesbinaryTypehttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType
bufferedAmounthttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/bufferedAmount
extensionshttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/extensions
protocolhttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/protocol
readyStatehttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState
urlhttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/url
Methodsclosehttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close
sendhttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send
Eventsclosehttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close_event
errorhttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/error_event
messagehttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/message_event
openhttps://developer.mozilla.org/en-US/docs/Web/API/WebSocket/open_event
ExamplesClient// 웹소켓 연결const ws = new WebSocket(&#x27;ws://localhost:30001&#x27;);// 연결 완료ws.addEventListener(&#x27;open&#x27;, (event) =&gt; &#123;  // 메세지 전송 (String, Blob, ArrayBuffer)  ws.send(&#x27;Hello Server!&#x27;);&#125;);// 메세지 청취ws.addEventListener(&#x27;message&#x27;, (event) =&gt; &#123;  console.log(&#x27;Message from server &#x27;, event.data);&#125;);ws.addEventListener(&#x27;error&#x27;, (event) =&gt; &#123;  console.log(event);&#125;);ws.addEventListener(&#x27;close&#x27;, () =&gt; &#123;  console.log(&#x27;close&#x27;);&#125;);document.getElementById(&#x27;close-button&#x27;).onclick = () =&gt; &#123;  if (ws.readyState === ws.OPEN) &#123;    // 웹소켓 종료    ws.close();  &#125; else &#123;    console.log(&#x27;No WebSocket Server is connected.&#x27;);  &#125;&#125;;

Serverconst WebSocket = require(&#x27;ws&#x27;);const wss = new WebSocket.Server(&#123; port: 30001 &#125;);wss.on(&#x27;connection&#x27;, (ws, request) =&gt; &#123;  const ip = request.headers[&#x27;x-forwarded-for&#x27;] || request.connection.remoteAddress;  if (wss.readyState === wss.OPEN)&#123;    // 메세지 전송    wss.send(`Welcome $&#123;ip&#125;`);  &#125;  // 메세지 청취  wss.on(&#x27;message&#x27;, (message) =&gt; &#123;    console.log(&#x27;Received: %s&#x27;, message);  &#125;);  wss.on(&#x27;error&#x27;, (error) =&gt; &#123;    console.log(error);  &#125;);  wss.on(&#x27;close&#x27;, () =&gt; &#123;    console.log(&#x27;close&#x27;);  &#125;);&#125;);
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>web-socket</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Web Worker</title>
    <url>/javascript-web-api/web-worker/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/Worker


MethodspostMessagehttps://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage
terminatehttps://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate
Eventsmessagehttps://developer.mozilla.org/en-US/docs/Web/API/Worker/message_event
messageerrorhttps://developer.mozilla.org/en-US/docs/Web/API/Worker/messageerror_event
rejectionhandledhttps://developer.mozilla.org/en-US/docs/Web/API/Window/rejectionhandled_event
unhandledrejectionhttps://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event
Handleronerrorhttps://developer.mozilla.org/en-US/docs/Web/API/Worker/onerror
onmessagehttps://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage
onmessageerrorhttps://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror
ExamplesSingle fileconst backRun = (fn, end, ...arg) =&gt; &#123;  const blob = new Blob([`onmessage = (e) =&gt; postMessage(($&#123;fn&#125;)(e.data));`], &#123; type: &#x27;text/javascript&#x27; &#125;);  const url = URL.createObjectURL(blob);  const worker = new Worker(url);  worker.onmessage = (event) =&gt; end(event.data);  worker.onerror = (event) =&gt; end(null);  worker.postMessage(arg);&#125;backRun(value =&gt; value[0] + value[1], console.log, 3, 5); // 8

Multi filesindex.jsconst worker = new Worker(&#x27;worker.js&#x27;, &#123; type: &#x27;module&#x27; &#125;);worker.onmessage = function(event) &#123;  console.log(`The sum of the numbers is $&#123;event.data.result&#125;`);&#125;;worker.postMessage(&#123; numbers: [1, 2, 3, 4, 5] &#125;);

worker.jsself.addEventListener(&#x27;message&#x27;, (MessageEvent) =&gt; &#123;  console.log(MessageEvent);  const result = MessageEvent.data.numbers.reduce((a, b) =&gt; a + b, 0);  self.postMessage(&#123; result &#125;);&#125;, false);
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>web-worker</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - Window</title>
    <url>/javascript-web-api/window/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/Window


PropertiesclientInformationhttps://developer.mozilla.org/en-US/docs/Web/API/Window/clientInformation
closedhttps://developer.mozilla.org/en-US/docs/Web/API/Window/closed
consolehttps://developer.mozilla.org/en-US/docs/Web/API/Console
asserthttps://developer.mozilla.org/ko/docs/Web/API/Console/assert

첫 번째 매개변수가 false 인 경우 출력한다.

clearhttps://developer.mozilla.org/ko/docs/Web/API/Console/clear

콘솔의 내용을 모두 지운다.

counthttps://developer.mozilla.org/ko/docs/Web/API/Console/count

콘솔이 호출된 횟수를 출력한다.

countResethttps://developer.mozilla.org/ko/docs/Web/API/Console/countReset

count 횟수를 초기화한다.

debughttps://developer.mozilla.org/ko/docs/Web/API/Console/debug

debug 중요도로 메시지를 출력한다.

dirhttps://developer.mozilla.org/ko/docs/Web/API/Console/dir

객체를 계층 구조로 출력한다.

dirxmlhttps://developer.mozilla.org/ko/docs/Web/API/Console/dirxml

객체를 XML/HTML 요소 형태로 출력한다.

errorhttps://developer.mozilla.org/ko/docs/Web/API/Console/error

오류 메시지를 출력한다.

grouphttps://developer.mozilla.org/ko/docs/Web/API/Console/group

이후 모든 출력을 한 단계 들여쓰기 출력한다.

groupCollapsedhttps://developer.mozilla.org/ko/docs/Web/API/Console/groupCollapsed

이후 모든 출력을 한 단계 들여쓰기 출력한다. (접혀서 표시)

groupEndhttps://developer.mozilla.org/ko/docs/Web/API/Console/groupEnd

한 단계 들여쓰기 출력을 해제한다.

infohttps://developer.mozilla.org/ko/docs/Web/API/Console/info

정보 메시지를 출력한다.

loghttps://developer.mozilla.org/ko/docs/Web/API/Console/log

일반 메시지를 출력한다.

profilehttps://developer.mozilla.org/ko/docs/Web/API/Console/profile

브라우저의 내장 프로파일러를 실행한다.

profileEndhttps://developer.mozilla.org/ko/docs/Web/API/Console/profileEnd

프로파일러를 중단한다.

tablehttps://developer.mozilla.org/ko/docs/Web/API/Console/table

표 형태의 데이터를 표로 출력한다.

timehttps://developer.mozilla.org/ko/docs/Web/API/Console/time

타이머를 실행한다.

timeEndhttps://developer.mozilla.org/ko/docs/Web/API/Console/timeEnd

타이머를 중단하고 소요된 시간을 출력한다.

tracehttps://developer.mozilla.org/ko/docs/Web/API/Console/trace

스택 추적을 출력한다.

warnhttps://developer.mozilla.org/ko/docs/Web/API/Console/warn

경고 메시지를 출력한다.

customElementshttps://developer.mozilla.org/en-US/docs/Web/API/Window/customElements
cryptohttps://developer.mozilla.org/en-US/docs/Web/API/Window/crypto
devicePixelRatiohttps://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio
documenthttps://developer.mozilla.org/en-US/docs/Web/API/Window/document
frameElementhttps://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement
frameshttps://developer.mozilla.org/en-US/docs/Web/API/Window/frames
historyhttps://developer.mozilla.org/en-US/docs/Web/API/Window/history
window.history.back(); // 뒤로가기 버튼 클릭과 동일window.history.go(-1); // 뒤로가기 버튼 클릭과 동일window.history.pushState(&#123; path: &#x27;test.html&#x27; &#125;, &#x27;test&#x27;, &#x27;test.html&#x27;); // 리로드 없이 URL 변경

Propertieshttps://developer.mozilla.org/ko/docs/Web/API/History/lengthhttps://developer.mozilla.org/ko/docs/Web/API/History/scrollRestorationhttps://developer.mozilla.org/ko/docs/Web/API/History/state
Methodshttps://developer.mozilla.org/ko/docs/Web/API/History/backhttps://developer.mozilla.org/ko/docs/Web/API/History/forwardhttps://developer.mozilla.org/ko/docs/Web/API/History/gohttps://developer.mozilla.org/ko/docs/Web/API/History/pushStatehttps://developer.mozilla.org/ko/docs/Web/API/History/replaceState
innerHeighthttps://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight
innerWidthhttps://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth
isSecureContexthttps://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext
lengthhttps://developer.mozilla.org/en-US/docs/Web/API/Window/length
locationhttps://developer.mozilla.org/en-US/docs/Web/API/Window/location
Propertieshttps://developer.mozilla.org/en-US/docs/Web/API/Location/ancestorOriginshttps://developer.mozilla.org/en-US/docs/Web/API/Location/hashhttps://developer.mozilla.org/en-US/docs/Web/API/Location/hosthttps://developer.mozilla.org/en-US/docs/Web/API/Location/hostnamehttps://developer.mozilla.org/en-US/docs/Web/API/Location/hrefhttps://developer.mozilla.org/en-US/docs/Web/API/Location/originhttps://developer.mozilla.org/en-US/docs/Web/API/Location/passwordhttps://developer.mozilla.org/en-US/docs/Web/API/Location/pathnamehttps://developer.mozilla.org/en-US/docs/Web/API/Location/porthttps://developer.mozilla.org/en-US/docs/Web/API/Location/protocolhttps://developer.mozilla.org/en-US/docs/Web/API/Location/searchhttps://developer.mozilla.org/en-US/docs/Web/API/Location/username
// http://www.naver.com?a=10&amp;b=20const params = new URLSearchParams(location.search);console.log(params.get(&#x27;a&#x27;)); // 10

Methodshttps://developer.mozilla.org/en-US/docs/Web/API/Location/assignhttps://developer.mozilla.org/ko/docs/Web/API/Location/reloadhttps://developer.mozilla.org/en-US/docs/Web/API/Location/replacehttps://developer.mozilla.org/en-US/docs/Web/API/Location/toString
locationbarhttps://developer.mozilla.org/en-US/docs/Web/API/Window/locationbar
localStoragehttps://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage

같은 도메인에서만 사용할 수 있다.동기 방식으로 동작하며 메인 스레드 연산을 중단시키기 때문에 성능이 좋진 않다.용량 제한은 5 MB 이며 문자열만 저장할 수 있다.웹 워커나 서비스 워커에서 접근할 수 없다.

menubarhttps://developer.mozilla.org/en-US/docs/Web/API/Window/menubar
namehttps://developer.mozilla.org/en-US/docs/Web/API/Window/name
navigatorhttps://developer.mozilla.org/en-US/docs/Web/API/Window/navigator
window.navigator.userAgent.match(/Android|iPhone/iPad/iPod/)

openerhttps://developer.mozilla.org/en-US/docs/Web/API/Window/opener
outerHeighthttps://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight
outerWidthhttps://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth
pageXOffsethttps://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset
pageYOffsethttps://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset
parenthttps://developer.mozilla.org/en-US/docs/Web/API/Window/parent
performancehttps://developer.mozilla.org/en-US/docs/Web/API/Window/performance
const performanceCheck = performance.now();setTimeout(() =&gt; &#123;  const performanceTime = ((performance.now() - performanceCheck) / 1000).toFixed(2);  console.log(performanceTime);&#125;, 1000);

personalbarhttps://developer.mozilla.org/en-US/docs/Web/API/Window/personalbar
screenhttps://developer.mozilla.org/en-US/docs/Web/API/Window/screen
screenXhttps://developer.mozilla.org/en-US/docs/Web/API/Window/screenX
screenYhttps://developer.mozilla.org/en-US/docs/Web/API/Window/screenY
scrollbarshttps://developer.mozilla.org/en-US/docs/Web/API/Window/scrollbars
scrollXhttps://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX
scrollYhttps://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY
selfhttps://developer.mozilla.org/en-US/docs/Web/API/Window/self
sessionStoragehttps://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage

현재 탭에서만 사용할 수 있다. (타 탭과 데이터가 공유되지 않는다.)탭을 새로고침해도 유지된다.

speechSynthesishttps://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis
statusbarhttps://developer.mozilla.org/en-US/docs/Web/API/Window/statusbar
toolbarhttps://developer.mozilla.org/en-US/docs/Web/API/Window/toolbar
tophttps://developer.mozilla.org/en-US/docs/Web/API/Window/top
visualViewporthttps://developer.mozilla.org/en-US/docs/Web/API/Window/visualViewport
windowhttps://developer.mozilla.org/en-US/docs/Web/API/Window/window
cachehttps://developer.mozilla.org/en-US/docs/Web/API/caches
isSecureContexthttps://developer.mozilla.org/en-US/docs/Web/API/isSecureContext
originhttps://developer.mozilla.org/en-US/docs/Web/API/origin
Methodsalerthttps://developer.mozilla.org/en-US/docs/Web/API/Window/alert
blurhttps://developer.mozilla.org/en-US/docs/Web/API/Window/blur
cancelAnimationFramehttps://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame
cancelIdleCallbackhttps://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback
clearImmediatehttps://developer.mozilla.org/en-US/docs/Web/API/Window/clearImmediate
closehttps://developer.mozilla.org/en-US/docs/Web/API/Window/close
confirmhttps://developer.mozilla.org/en-US/docs/Web/API/Window/confirm
if (window.confirm(&#x27;message&#x27;)) &#123;  console.log(&#x27;abc&#x27;);&#125;

dumphttps://developer.mozilla.org/en-US/docs/Web/API/Window/dump
findhttps://developer.mozilla.org/en-US/docs/Web/API/Window/find
focushttps://developer.mozilla.org/en-US/docs/Web/API/Window/focus
getComputedStylehttps://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle
getDefaultComputedStylehttps://developer.mozilla.org/en-US/docs/Web/API/Window/getDefaultComputedStyle
getSelectionhttps://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection
window.getSelection().toString(); // 선택된 텍스트 반환

matchMediahttps://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia
Viewportif (window.matchMedia(&#x27;(min-width: 400px)&#x27;).matches) &#123;  // 뷰포트 너비가 400 픽셀 이상&#125; else &#123;  // 뷰포트 너비가 400 픽셀 미만&#125;

DarkMode&lt;head&gt;  &lt;meta name=&quot;color-scheme&quot; content=&quot;light dark&quot;&gt;&lt;/head&gt;&lt;body&gt;  &lt;label for=&quot;color-scheme&quot;&gt;Color scheme&lt;/label&gt;  &lt;select id=&quot;color-scheme&quot;&gt;    &lt;option value=&quot;system&quot;&gt;System default&lt;/option&gt;    &lt;option value=&quot;light&quot;&gt;Forced light&lt;/option&gt;    &lt;option value=&quot;dark&quot;&gt;Forced dark&lt;/option&gt;  &lt;/select&gt;&lt;/body&gt;

html &#123;  --color: black;  --backgroundColor: white;  &amp;[data-color-scheme=&#x27;dark&#x27;] &#123;    --color: white;    --backgroundColor: black;  &#125;  color: var(--color);  background-color: var(--backgroundColor);&#125;

const $html = $(&#x27;html&#x27;);const localStorageColorScheme = window.localStorage.getItem(&#x27;colorScheme&#x27;);const isColorSchemeDark = window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;).matches;const $colorScheme = $(&#x27;#color-scheme&#x27;);if (localStorageColorScheme) &#123;  $html.attr(&#x27;data-color-scheme&#x27;, localStorageColorScheme);  $colorScheme.val(localStorageColorScheme);&#125; else &#123;  $html.attr(&#x27;data-color-scheme&#x27;, isColorSchemeDark ? &#x27;dark&#x27; : &#x27;light&#x27;);&#125;$colorScheme.on(&#x27;change&#x27;, (event) =&gt; &#123;  const value = $(event.target).val();  if (value === &#x27;system&#x27;) &#123;    $html.attr(&#x27;data-color-scheme&#x27;, isColorSchemeDark ? &#x27;dark&#x27; : &#x27;light&#x27;);    window.localStorage.removeItem(&#x27;colorScheme&#x27;);  &#125; else &#123;    $html.attr(&#x27;data-color-scheme&#x27;, value);    window.localStorage.setItem(&#x27;colorScheme&#x27;, value);  &#125;&#125;);

moveByhttps://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy
moveTohttps://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo
openhttps://developer.mozilla.org/en-US/docs/Web/API/Window/open
window.open(&#x27;url&#x27;, &#x27;title&#x27;, &#x27;  top=0,  left=0,  width=0,  height=0,  scrollbars=[no|yes],  resizeable=[no|yes],  menubar=[no|yes],  toolbar=[no|yes]&#x27;);

postMessagehttps://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
Parent to childParent&lt;iframe id=&quot;child&quot; src=&quot;child.html&quot;&gt;&lt;/iframe&gt;&lt;button id=&quot;button&quot;&gt;postMessage&lt;/button&gt;

Parentconst child = document.getElementById(&#x27;child&#x27;);const button = document.getElementById(&#x27;button&#x27;);button.addEventListener(&#x27;click&#x27;, () =&gt; &#123;  child.contentWindow.postMessage(&#x27;test message&#x27;, &#x27;*&#x27;);&#125;);

Childwindow.addEventListener(&#x27;message&#x27;, (event) =&gt; &#123;  console.log(event.data);&#125;);

Child to parentChild&lt;button id=&quot;button&quot;&gt;postMessage&lt;/button&gt;

Parentwindow.addEventListener(&#x27;message&#x27;, (event) =&gt; &#123;  console.log(event.data);&#125;);

Childconst child = document.getElementById(&#x27;child&#x27;);const button = document.getElementById(&#x27;button&#x27;);button.addEventListener(&#x27;click&#x27;, () =&gt; &#123;  window.parent.postMessage(&#x27;test message&#x27;, &#x27;*&#x27;);&#125;);

printhttps://developer.mozilla.org/en-US/docs/Web/API/Window/print
prompthttps://developer.mozilla.org/en-US/docs/Web/API/Window/prompt
const result = window.prompt(&#x27;message&#x27;, &#x27;default value&#x27;);if (result) &#123;  console.log(result);&#125;

requestAnimationFramehttps://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame
window.requestAnimationFrame(function fn () &#123;  console.log(&#x27;requestAnimationFrame&#x27;);  window.requestAnimationFrame(fn);&#125;);

Blocking evasion time slicingManual// slice 수 만큼 쪼개어 실행const logger = (n, fn, slice = 3) =&gt; &#123;  let limit = 0;  let i = 0;  const runner = () =&gt; &#123;    while (i &lt; n) &#123;      if (limit++ &lt; slice) fn(i++);      else &#123;        limit = 0;        window.requestAnimationFrame(runner);        break;      &#125;    &#125;  &#125;;  window.requestAnimationFrame(runner);&#125;;logger(10, console.log); // 0 1 2 3 4 5 6 7 8 9

Auto// ms 초 만큼 초과되면 다음 프레임으로 넘김const logger = (n, fn, ms = 3000, i = 0) =&gt; &#123;  let old = performance.now();  let curr = null;  const runner = () =&gt; &#123;    while (i &lt; n) &#123;      curr = performance.now();      if (curr - old &lt; ms) fn(i++);      else &#123;        old = curr;        window.requestAnimationFrame(runner);        break;      &#125;    &#125;  &#125;;  window.requestAnimationFrame(runner);&#125;;logger(10, console.log); // 0 1 2 3 4 5 6 7 8 9


requestAnimationFrame 을 이용하여 처리를 위임하는 개념이다.내부에서는 쓰레드와 비슷한 효과를 볼 수 있다.

requestIdleCallbackhttps://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback
resizeByhttps://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy
resizeTohttps://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo
scrollhttps://developer.mozilla.org/en-US/docs/Web/API/Window/scroll
scrollByhttps://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy
scrollByLineshttps://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByLines
scrollByPageshttps://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByPages
scrollTohttps://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo
setImmediatehttps://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate
setResizablehttps://developer.mozilla.org/en-US/docs/Web/API/Window/setResizable
sizeToContenthttps://developer.mozilla.org/en-US/docs/Web/API/Window/sizeToContent
showOpenFilePickerhttps://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker
showSaveFilePickerhttps://developer.mozilla.org/en-US/docs/Web/API/Window/showSaveFilePicker
showDirectoryPickerhttps://developer.mozilla.org/en-US/docs/Web/API/Window/showDirectoryPicker
stophttps://developer.mozilla.org/en-US/docs/Web/API/Window/stop
atobhttps://developer.mozilla.org/en-US/docs/Web/API/atob
const decodedData = atob(encodedData);


Base64 문자열을 디코딩한다.

btoahttps://developer.mozilla.org/en-US/docs/Web/API/btoa
const encodedData = btoa(&#x27;text&#x27;);


문자열을 Base64 로 인코딩한다.

clearIntervalhttps://developer.mozilla.org/en-US/docs/Web/API/clearInterval
clearTimeouthttps://developer.mozilla.org/en-US/docs/Web/API/clearTimeout
createImageBitmaphttps://developer.mozilla.org/en-US/docs/Web/API/createImageBitmap
fetchhttps://developer.mozilla.org/en-US/docs/Web/API/fetch




Fetch
axios



필요 사항
브라우저 내장 (import 필요 없음)
라이브러리 필요


기능
적음
많음


브라우저 지원
지원하지 않는 브라우저 있음 (IE 11 등)
대부분 지원


Request Aborting
제공하지 않음
제공 함


response timeout API
지원하지 않음
지원 함


Error handling
문제 있음
문제 없음


setIntervalhttps://developer.mozilla.org/en-US/docs/Web/API/setInterval
setTimeouthttps://developer.mozilla.org/en-US/docs/Web/API/setTimeout
reportErrorhttps://developer.mozilla.org/en-US/docs/Web/API/reportError
Eventserrorhttps://developer.mozilla.org/en-US/docs/Web/API/Window/error_event
languagechangehttps://developer.mozilla.org/en-US/docs/Web/API/Window/languagechange_event
devicemotionhttps://developer.mozilla.org/en-US/docs/Web/API/Window/devicemotion_event
deviceorientationhttps://developer.mozilla.org/en-US/docs/Web/API/Window/deviceorientation_event
resizehttps://developer.mozilla.org/en-US/docs/Web/API/Window/resize_event
storagehttps://developer.mozilla.org/en-US/docs/Web/API/Window/storage_event
animationcancelhttps://developer.mozilla.org/en-US/docs/Web/API/Window/animationcancel_event
animationendhttps://developer.mozilla.org/en-US/docs/Web/API/Window/animationend_event
animationiterationhttps://developer.mozilla.org/en-US/docs/Web/API/Window/animationiteration_event
animationstarthttps://developer.mozilla.org/en-US/docs/Web/API/Window/animationstart_event
copyhttps://developer.mozilla.org/en-US/docs/Web/API/Window/copy_event
cuthttps://developer.mozilla.org/en-US/docs/Web/API/Window/cut_event
pastehttps://developer.mozilla.org/en-US/docs/Web/API/Window/paste_event
offlinehttps://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event
onlinehttps://developer.mozilla.org/en-US/docs/Web/API/Window/online_event
blurhttps://developer.mozilla.org/en-US/docs/Web/API/Window/blur_event
focushttps://developer.mozilla.org/en-US/docs/Web/API/Window/focus_event
gamepadconnectedhttps://developer.mozilla.org/en-US/docs/Web/API/Window/gamepadconnected_event
gamepaddisconnectedhttps://developer.mozilla.org/en-US/docs/Web/API/Window/gamepaddisconnected_event
hashchangehttps://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event
pagehidehttps://developer.mozilla.org/en-US/docs/Web/API/Window/pagehide_event
pageshowhttps://developer.mozilla.org/en-US/docs/Web/API/Window/pageshow_event
window.addEventListener(&#x27;pageshow&#x27;, (event) =&gt; &#123;  if (event.persisted) &#123;    console.log(&#x27;This page was restored from the bfcache.&#x27;);  &#125; else &#123;    console.log(&#x27;This page was loaded normally.&#x27;);  &#125;&#125;);

popstatehttps://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event
beforeunloadhttps://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event
const html = document.querySelector(&#x27;html&#x27;);const scrollTop = window.localStorage.getItem(&#x27;scrollTop&#x27;);if (scrollTop) html.scrollTop = scrollTop;// 페이지를 벗어날 때 스크롤 위치를 localStorage 에 저장window.addEventListener(&#x27;beforeunload&#x27;, () =&gt; &#123;  window.localStorage.setItem(&#x27;scroll-top&#x27;, html.scrollTop);&#125;);

// 페이지 벗어날 때 확인 (메세지를 변경할 수 없음)// 사이트를 새로고침하시겠습니까? or 사이트에서 나가시겠습니까?// 변경사항이 저장되지 않을 수 있습니다.window.addEventListener(&#x27;beforeunload&#x27;, (event) =&gt; &#123;  event.preventDefault();  event.returnValue = &#x27;&#x27;;&#125;);

DOMContentLoadedhttps://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event
const documentReady = (callback) =&gt; &#123;  document.readyState === &#x27;loading&#x27; ? document.addEventListener(&#x27;DOMContentLoaded&#x27;, callback) : callback();&#125;;documentReady(() =&gt; &#123;  // Do something when the document is ready&#125;);

loadhttps://developer.mozilla.org/en-US/docs/Web/API/Window/load_event
unloadhttps://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event
appinstalledhttps://developer.mozilla.org/en-US/docs/Web/API/Window/appinstalled_event
messagehttps://developer.mozilla.org/en-US/docs/Web/API/Window/message_event
messageerrorhttps://developer.mozilla.org/en-US/docs/Web/API/Window/messageerror_event
afterprinthttps://developer.mozilla.org/en-US/docs/Web/API/Window/afterprint_event
beforeprinthttps://developer.mozilla.org/en-US/docs/Web/API/Window/beforeprint_event
rejectionhandledhttps://developer.mozilla.org/en-US/docs/Web/API/Window/rejectionhandled_event
unhandledrejectionhttps://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event
transitioncancelhttps://developer.mozilla.org/en-US/docs/Web/API/Window/transitioncancel_event
transitionendhttps://developer.mozilla.org/en-US/docs/Web/API/Window/transitionend_event
transitionrunhttps://developer.mozilla.org/en-US/docs/Web/API/Window/transitionrun_event
transitionstarthttps://developer.mozilla.org/en-US/docs/Web/API/Window/transitionstart_event
vrdisplayactivatehttps://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplayactivate_event
vrdisplayblurhttps://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplayblur_event
vrdisplayconnecthttps://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplayconnect_event
vrdisplaydeactivatehttps://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplaydeactivate_event
vrdisplaydisconnecthttps://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplaydisconnect_event
vrdisplayfocushttps://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplayfocus_event
vrdisplaypresentchangehttps://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplaypresentchange_event
vrdisplaypointerrestrictedhttps://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplaypointerrestricted_event
vrdisplaypointerunrestrictedhttps://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplaypointerunrestricted_event
Event handlersonappinstalledhttps://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled
ondevicemotionhttps://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicemotion
ondeviceorientationhttps://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceorientation
onrejectionhandledhttps://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled
onaborthttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort
onafterprinthttps://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint
onbeforeprinthttps://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint
onbeforeunloadhttps://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload
onblurhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur
onchangehttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange
onclickhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick
ondblclickhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick
onclosehttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose
oncontextmenuhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu
onerrorhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror
onfocushttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus
onhashchangehttps://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange
oninputhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput
onkeydownhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown
onkeypresshttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress
onkeyuphttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup
onlanguagechangehttps://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange
onloadhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload
onmessagehttps://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage
onmousedownhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown
onmousemovehttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove
onmouseouthttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout
onmouseoverhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover
onmouseuphttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup
onpopstatehttps://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
onresethttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset
onresizehttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize
onscrollhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll
onwheelhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel

  javascript-web-api event-target


onselecthttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect
onselectionchangehttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange
onstoragehttps://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage
onsubmithttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit
onunhandledrejectionhttps://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection
onunloadhttps://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>window</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Web API - XMLHttpRequest</title>
    <url>/javascript-web-api/xml-http-request/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest


PropertiesreadyStatehttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState
responsehttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response
responseTexthttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText
responseTypehttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType
responseURLhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL
responseXMLhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML
statushttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status
statusTexthttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/statusText
timeouthttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout
uploadhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload
withCredentialshttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials

쿠키를 헤더에 포함한다.프론트 요청 헤더에는 withCredentials: true 를 적용한다.백엔드 응답 헤더에는 Access-Control-Allow-Credentials: true 를 적용한다.

Methodsaborthttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort
getAllResponseHeadershttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders
getResponseHeaderhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader
openhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open
overrideMimeTypehttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType
sendhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send
setRequestHeaderhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader
Eventsaborthttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort_event
errorhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/error_event
loadhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/load_event
loadendhttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/loadend_event
loadstarthttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/loadstart_event
progresshttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/progress_event
readystatechangehttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readystatechange_event
timeouthttps://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout_event
Fetchhttps://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
try &#123;  const response = await fetch(&#x27;http://www.example.com/&#x27;, &#123;    method: &#x27;POST&#x27;, // *GET, POST, PUT, DELETE, etc.    mode: &#x27;cors&#x27;, // no-cors, *cors, same-origin    cache: &#x27;no-cache&#x27;, // *default, no-cache, reload, force-cache, only-if-cached    credentials: &#x27;same-origin&#x27;, // include, *same-origin, omit    headers: &#123;      &#x27;Content-Type&#x27;: &#x27;application/json&#x27;      // &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;,    &#125;,    redirect: &#x27;follow&#x27;, // manual, *follow, error    referrerPolicy: &#x27;no-referrer&#x27;, // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url    body: JSON.stringify(data), // body data type must match &quot;Content-Type&quot; header  &#125;);  console.log(response);&#125; catch (error) &#123;  console.log(error);&#125;

CORShttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
Request Header







Origin
허용 요청 할 도메인 주소


Access-Control-Request-Method
허용 요청 할 메서드


Access-Control-Request-Headers
허용 요청 할 헤더 정보


Response Header







Access-Control-Allow-Origin
허용 할 도메인 주소, 또는 와일드카드(*)


Access-Control-Allow-Methods
허용 할 메서드 (GET, POST, PATCH, DELETE 등)


Access-Control-Expose-Headers
브라우저가 접근 할 수 있도록 서버 화이트리스트 헤더


Access-Control-Allow-Headers
허용 할 헤더 정보 (Content-Type, 사용자 헤더 등)


Access-Control-Allow-Credentials
인증 확인 (boolean)


Access-Control-Max-Age
캐시 할 시간 (ms)


ExamplesGet server timefunction serverTime() &#123;  let xhr;  if (window.XMLHttpRequest) &#123;    xhr = new XMLHttpRequest();  &#125; else if (window.ActiveXObject) &#123;    xhr = new ActiveXObject(&#x27;Microsoft.XMLHTTP&#x27;);  &#125; else &#123;    throw new Error(&#x27;Not Ajax&#x27;);  &#125;  xhr.open(&#x27;HEAD&#x27;, window.location.href.toString(), false);  xhr.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;text/html&#x27;);  xhr.send(&#x27;&#x27;);  return xhr.getResponseHeader(&#x27;Date&#x27;);&#125;const serverDate = new Date(serverTime());
]]></content>
      <categories>
        <category>javascript-web-api</category>
        <category>xml-http-request</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>http-request</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery Ajax v3.6.0</title>
    <url>/jquery/ajax/</url>
    <content><![CDATA[
  https://api.jquery.com/category/ajax


Shorthand methodshttps://api.jquery.com/category/ajax/shorthand-methods
get() // DOM 노드 반환 (제이쿼리 래퍼 제거)getJSON()getScript()post()load()

Global ajax event handlershttps://api.jquery.com/category/ajax/global-ajax-event-handlers
ajaxStart()ajaxSend()ajaxSuccess()ajaxComplete()ajaxStop()ajaxError()

Low level interfacehttps://api.jquery.com/category/ajax/low-level-interface
$.ajaxSetup()$.ajaxPrefilter()$.ajaxTransport()$.ajax(&#123;  method: &#x27;GET&#x27;, // 기본값. 요청 방식  url: &#x27;data.json&#x27;, // 요청 URL  xhr() &#123;&#125;, // IE 에서는 ActiveXObject, 다른 브라우저는 XMLHttpRequest  xhrFields: &#123; // 기본 XHR 객체의 키값의 맵 데이터    withCredentials: true,  &#125;,  async: true, // 기본값. 비동기식으로 동작 (데이터타입이 jsonp 경우 동기식으로 동작)  cache: true, // 기본값. false 일 경우 브라우저의 캐시사용 제한  crossDomain: false, // 기본값. true 일 경우 크로스도메인 요청  global: true, // 전역 Ajax 이벤트 핸들러 제어  isLocal : true, // 로컬환경으로 인식하도록 허용  mimeType: &#x27;string&#x27;, // XHR 마임 타입  ifModified: false, // 마지막 request 이후 response 가 변경되었을 경우에만 request 성공하도록 허용  processData: true, // false 로 설정되면, URL 인코딩된 형태로 처리되어 전달된 데이터를 금지  scriptCharset: &#x27;string&#x27;, // 스크립트 문자셋 설  timeout: 1000, // 요청 대기 시간 (ms)  traditional: true, // 전통적인 스타일의 파라미터 직렬화를 사용  jsonp: &#123; // jsonp 요청에 사용한 콜백 함수명을 오버라이드    jsonp: false,    jsonpCallback: &#x27;callbackName&#x27;,  &#125;,  jsonpCallback() &#123;&#125;, // jsonp 요청 시 콜백 함수명  contentType: &#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;, // 기본값  data: &#123;&#125;, // 서버로 보낼 데이터 (string, plain object, array)  headers: &#123; // 요청 시 추가로 보낼 헤더 정보    &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,    &#x27;Accept&#x27;: &#x27;application/json&#x27;,  &#125;,  username: &#x27;string&#x27;, // HTTP 엑세스 시 아이디  password: &#x27;string&#x27;, // HTTP 엑세스 시 패스워드  dataType: &#x27;json&#x27;, // server 로부터 전달받을 데이터 유형 (xml, html, script, json, jsonp, text)  accepts: &#123; // content 타입을 헤더에 포함하여 서버에 보내면 응답 시 같은 타입으로 리턴 됨    customtype: &#x27;application/x-some-custom-type&#x27;,  &#125;,  dataFilter(data, type) &#123;&#125;, // 응답받은 데이터를 정제함  context: document.body,  converters: &#123; // 데이터 타입을 변환    &#x27;* text&#x27;: window.String,    &#x27;text html&#x27;: true,    &#x27;text json&#x27;: $.parseJSON,    &#x27;text xml&#x27;: $.parseXML,  &#125;,  contents: &#x27;&#x27;, // 문자열과 정규표현식이 쌍으로 이루어진 맵 데이터  beforeSend(jqXHR, settings) &#123;&#125;, // 요청 전 콜백 함수  success(data, textStatus, jqXHR) &#123;&#125;, // 요청 성공시 콜백 함수  error(jqXHR, textStatus, errorThrown) &#123;&#125;, // 요청 실패시 콜백 함수  complete(jqXHR, textStatus) &#123; // 요청 완료 콜백 함수. success/error 이후 발생    // textStatus 에 문자열 반환: [success | notmodified | error | timeout | abort | parsererror]  &#125;,  statusCode: &#123; // 요청에 대한 응답 시 전달된 HTTP 상태 코드와 실행될 함수    404: function() &#123;      alert(&#x27;page not found&#x27;);    &#125;,  &#125;,&#125;);

Helper functionshttps://api.jquery.com/category/ajax/helper-functions
serialize() // form 태그 내부 정보를 파라미터문자열로 반환serializeArray() // form 태그 내부 정보를 배열로 반환$.param(&#123; a: 0, b: 1 &#125;); // a=0&amp;b=1
]]></content>
      <categories>
        <category>jquery</category>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>http-request</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery Effects v3.6.0</title>
    <url>/jquery/effects/</url>
    <content><![CDATA[
  https://api.jquery.com/category/effects


Basichttps://api.jquery.com/category/effects/basics
show() // 보임 (opacity: 100, display: block or inline)hide() // 감춤 (opacity: 0, display: none)toggle() // 보임 / 감춤

Fadinghttps://api.jquery.com/category/effects/fading
fadeIn() // 보임 (opacity: 100)fadeOut() // 감춤 (opacity: 0)fadeTo() // 불투명도를 현재의 설정 값에서 opacity 매개변수 값으로 설정fadeToggle() // fadeIn / fadeOut

Slidinghttps://api.jquery.com/category/effects/sliding
slideUp() // 보이는 요소가 점차적으로 높이 값이 감소하면서 화면에서 제거slideDown() // 감춰진 요소가 높이 값이 증가하면서 나타남slideToggle() // slideDown / slideUp

Custom effectshttps://api.jquery.com/category/effects/custom-effects
animate(  properties: [CSS Properties],  duration: [slow(600) | normal(400) | fast(200) | millisecond],  easing,  callback,)queue()dequeue()clearQueue()delay()finish()stop(clearQueue, jumpToEnd)$.speed$.fx.off

Easing typehttps://api.jqueryui.com/easings

  linear
  swing
  easeInQuad
  easeOutQuad
  easeInOutQuad
  easeInCubic
  easeOutCubic
  easeInOutCubic
  easeInQuart
  easeOutQuart
  easeInOutQuart
  easeInQuint
  easeOutQuint
  easeInOutQuint
  easeInExpo
  easeOutExpo
  easeInOutExpo
  easeInSine
  easeOutSine
  easeInOutSine
  easeInCirc
  easeOutCirc
  easeInOutCirc
  easeInElastic
  easeOutElastic
  easeInOutElastic
  easeInBack
  easeOutBack
  easeInOutBack
  easeInBounce
  easeOutBounce
  easeInOutBounce


EaxmplesAnimation scroll$(&#x27;html, body&#x27;).animate(&#123; scrollTop: 0 &#125;, 1000);
]]></content>
      <categories>
        <category>jquery</category>
        <category>effects</category>
      </categories>
      <tags>
        <tag>ease</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery Events v3.6.0</title>
    <url>/jquery/events/</url>
    <content><![CDATA[
  https://api.jquery.com/category/events


Document loadinghttps://api.jquery.com/category/events/document-loading
ready() // 데이터를 전송 할 준비가 될 때load() // 문서가 열릴 때unload() // 문서가 닫힐 때$.ready

Event handler attachmenthttps://api.jquery.com/category/events/event-handler-attachment
on() // 이벤트 연결one() // 이벤트 연결 (한번 발생 후 해제)off() // 이벤트 해제trigger() // 이벤트 강제 실행 (버블링 포함)triggerHandler() // 이벤트 강제 실행 (버블링 제외, 브라우저 기본 동작 안함)

Mouse eventshttps://api.jquery.com/category/events/mouse-events
click() // 마우스 왼쪽 버튼을 클릭 할 때contextmenu() // 마우스 오른쪽 버튼을 클릭 할 때dblclick() // 마우스 왼쪽 버튼을 더블 클릭 할 때hover()mousedown() // 마우스 버튼을 눌렀을 때mouseup() // 마우스 버튼을 눌렀다가 땔 때mouseover() // 마우스가 해당 객체로 올라갈 때 (버블링 발생) 여러번 발생mouseout() // 마우스가 해당 객체에 올라갔다가 나갈 때 (버블링 발생) 여러번 발생mouseenter() // 마우스가 해당 객체로 올라갈 때 (사용 권장) 한번 발생mouseleave() // 마우스가 해당 객체에 올라갔다가 나갈 때 (사용 권장) 한번 발생mousemove() // 마우스 커서가 움직일 때

Keyboard eventshttps://api.jquery.com/category/events/keyboard-events
keypress() // 키보드 키가 눌려질 때keydown() // 키보드 키가 눌려질 때 (지속적 발생)keyup() // 키보드 키가 눌려졌다가 땔 때

Form eventshttps://api.jquery.com/category/events/form-events
blur() // 포커스를 잃었을 때change() // 해당 값이 변경 될 때focus() // 포커스를 가졌을 때focusin() // 포커스를 가졌을 때 (버블링 발생)focusout() // 포커스를 잃었을 때 (버블링 발생)select() // 드래그 선택영역이 있을 때submit() // 값이 다른 페이지로 전송될 때

Browser eventshttps://api.jquery.com/category/events/browser-events
error() // 자바스크립트 에러가 발생 할 때resize() // 창의 사이즈가 변경 될 때scroll() // 스크롤 값이 변경 될 때

Event object







target
이벤트가 발생한 대상 (ex: li)


currentTarget
이벤트를 설정한 대상 (ex: ul)


relatedTarget
커서 이벤트가 발생한 대상


type
발생한 이벤트 타입


metaKey
메타키 눌림 여부


altKey
알트키가 눌림 여부


ctrlKey
컨트롤키 눌림 여부


shiftKey
쉬프트키 눌림 여부


pageX
페이지에서 이벤트가 발생한 X 좌표 값


pageY
페이지에서 이벤트가 발생한 Y 좌표 값


screenX
스크린에서 이벤트가 발생한 X 좌표 값


screenY
스크린에서 이벤트가 발생한 Y 좌표 값


timeStamp
브라우저가 이벤트를 생성한 시간과 1970년 1월 1일 사이의 차이 (밀리초)


namespace
이벤트가 트리거될 때 지정된 네임스페이스


data
현재 실행 중인 핸들러가 바인딩될 때 이벤트 메서드에 전달되는 데이터의 선택적 개체


delegateTarget
현재 호출되는 이벤트 핸들러가 연결된 요소


result
값이 undefined 인 경우를 제외하고 이 이벤트에 의해 트리거된 이벤트 핸들러에 의해 반환된 마지막 값


which
이벤트 키 값 반환 (마우스 이벤트일 경우 왼1, 중2, 오3 값 반환)


key
키 값 문자 반환


keyCode
키 값 숫자 반환 (대소문자 구분없음) 삭제 예정으로 사용을 권장하지 않음


isDefaultPrevented()isPropagationStopped()isImmediatePropagationStopped()preventDefault() // 브라우저 기본 이벤트 제한stopPropagation() // 이벤트 버블링 중단stopImmediatePropagation() // 다른 모든 이벤트 중단 (이벤트 버블링 포함)

ExamplesDynamic elements binding$(&#x27;ul&#x27;).on(&#x27;click&#x27;, &#x27;li&#x27;, function() &#123;  console.log($(this));&#125;);

Event parameters$(&#x27;button&#x27;).on(&#x27;click&#x27;, &#123; test: &#x27;text&#x27; &#125;, function(event) &#123;  console.log(event.data.test); // text&#125;);

Scroll directionlet lastScrollTop = 0;$(window).on(&#x27;scroll&#x27;, function() &#123;  const scrollTop = $(this).scrollTop();  if (scrollTop &gt; lastScrollTop) &#123;    console.log(&#x27;down&#x27;, window.scrollY);  &#125; else if (scrollTop &lt; lastScrollTop) &#123; // else 를 사용하지 않음 (IE 대응)    console.log(&#x27;up&#x27;, window.scrollY);  &#125;  lastScrollTop = scrollTop;&#125;).trigger(&#x27;scroll&#x27;);

Keeps increasing
  

]]></content>
      <categories>
        <category>jquery</category>
        <category>events</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery Manipulation v3.6.0</title>
    <url>/jquery/manipulation/</url>
    <content><![CDATA[
  https://api.jquery.com/category/manipulation


DOM insertion - insidehttps://api.jquery.com/category/manipulation/dom-insertion-inside
append() // 맨 마지막 자식으로 추가 / 이동appendTo() // 맨 마지막 자식으로 추가 / 이동prepend() // 맨 처음 자식으로 추가 / 이동prependTo() // 맨 처음 자식으로 추가 / 이동text() // 대상의 내용을 텍스트로 입력html() // 대상의 내용을 HTML 로 입력

DOM insertion - outsidehttps://api.jquery.com/category/manipulation/dom-insertion-outside
after() // 바로 다음 형제로 추가 / 이동insertAfter() // 바로 다음 형제로 추가 / 이동before() // 바로 이전 형제로 추가 / 이동insertBefore() // 바로 이전 형제로 추가 / 이동

DOM insertion - aroundhttps://api.jquery.com/category/manipulation/dom-insertion-around
wrap() // 대상을 각각 밖에서 감쌈wrapAll() // 대상을 전체적으로 밖에서 감쌈wrapInner() // 대상을 각각 안에서 감쌈unwrap() // 대상을 싸는 요소를 제거

DOM replacementhttps://api.jquery.com/category/manipulation/dom-replacement
replaceWithhttps://api.jquery.com/replaceWith
&lt;div class=&quot;first&quot;&gt;First&lt;/div&gt;&lt;div class=&quot;second&quot;&gt;Second&lt;/div&gt;&lt;div class=&quot;third&quot;&gt;Third&lt;/div&gt;

// .second 를 선택해서 .third 로 교체 (기존 .third 가 유지되지 않고 이동함)$(&#x27;.second&#x27;).replaceWith($(&#x27;.third&#x27;));// 결과: First, Third// .second 를 선택해서 새로운 엘리먼트로 교체$(&#x27;.second&#x27;).replaceWith(&#x27;&lt;div class=&quot;fourth&quot;&gt;Fourth&lt;/div&gt;&#x27;);// 결과: First, Fourth, Third


replaceWith 는 선택자를 대상으로 교체한다. (일반적으로 사용하는 편)

replaceAllhttps://api.jquery.com/replaceAll
&lt;div class=&quot;first&quot;&gt;First&lt;/div&gt;&lt;div class=&quot;second&quot;&gt;Second&lt;/div&gt;&lt;div class=&quot;third&quot;&gt;Third&lt;/div&gt;

// .second 로 .third 대상을 교체 (기존 .second 가 유지되지 않고 이동함)$(&#x27;.second&#x27;).replaceAll(&#x27;.third&#x27;);// 결과: First, Second// 새로운 엘리먼트로 .second 대상을 교체 $(&#x27;&lt;div class=&quot;fourth&quot;&gt;Fourth&lt;/div&gt;&#x27;).replaceAll(&#x27;.second&#x27;);// 결과: First, Fourth, Third


replaceAll 은 선택자로 대상을 교체한다.

DOM removalhttps://api.jquery.com/category/manipulation/dom-removal
empty() // 대상의 내용을 제거remove() // 대상을 제거 (이벤트 제거)detach() // 대상을 제거 (이벤트 유지)

General attributeshttps://api.jquery.com/category/manipulation/general-attributes
attr() // 속성을 가져오거나, 수정removeAttr() // 속성을 제거prop() // 속성상태 불리언값 리턴removeProp() // 속성상태 제거val() // value 값 가져오거나, 수정

Class attributehttps://api.jquery.com/category/manipulation/class-attribute
addClass() // 클래스를 추가removeClass() // 클래스를 제거hasClass() // 클래스 존재 여부 불리언값 리턴toggleClass() // 클래스 존재 여부에 따라 추가/제거

Style propertieshttps://api.jquery.com/category/manipulation/style-properties
css() // CSS 속성을 추가width() // 넓이값을 가져오거나 지정height() // 높이값을 가져오거나 지정innerWidth() // 패딩 포함innerHeight() // 패딩 포함outerWidth() // 패딩, 보더 포함 (true: 마진 포함)outerHeight() // 패딩, 보더 포함 (true: 마진 포함)position() // 부모포지션부터 좌표offset() // 문서 기준으로 좌표scrollTop() // 스크롤바 y좌표scrollLeft() // 스크롤바 x좌표$.cssNumber.someCSSProp = true; // 특정 CSS 속성에 단위 자동 추가 금지

Copyinghttps://api.jquery.com/category/manipulation/copying
clone() // 확장집합 복사

ExamplesPreload images$.preloadImages = (...args) =&gt; args.forEach((img) =&gt; $(&#x27;&#x27;).attr(&#x27;src&#x27;, img));$.preloadImages(&#x27;1.jpg&#x27;, &#x27;2.jpg&#x27;);

Media ratioconst $video = $(&#x27;video.fullsize&#x27;);$(window).on(&#x27;resize&#x27;, function() &#123;  $video.each(function() &#123;    const $this = $(this);    if ($this.width() / $this.height() &gt; $this.parent().width() / $this.parent().height()) &#123;      $this.css(&#123; width: &#x27;auto&#x27;, height: &#x27;100%&#x27; &#125;);    &#125; else &#123;      $this.css(&#123; width: &#x27;100%&#x27;, height: &#x27;auto&#x27; &#125;);    &#125;  &#125;);&#125;).trigger(&#x27;resize&#x27;);
]]></content>
      <categories>
        <category>jquery</category>
        <category>manipulation</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery Plugins v3.6.0</title>
    <url>/jquery/plugins/</url>
    <content><![CDATA[
  https://plugins.jquery.com


Template;(function($) &#123;  $.fn.pluginName.defaults = &#123;    key1: &#x27;value0&#x27;,  &#125;;  $.fn.pluginName = function(params) &#123;    var options = $.extend($.fn.pluginName.defaults, params);    return this.each(function() &#123;      console.log(options.key1, options.key2);    &#125;);  &#125;;&#125;(jQuery));$(&#x27;target&#x27;).pluginName(&#123; key1: &#x27;value1&#x27;, key2: &#x27;value2&#x27; &#125;);

ExamplesModal layer
  


Box drag and resize
  

]]></content>
      <categories>
        <category>jquery</category>
        <category>plugins</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Embedded JavaScript v3.1.6</title>
    <url>/node/ejs/</url>
    <content><![CDATA[
  https://ejs.co
  https://ionicabizau.github.io/ejs-playground


Setupnpm install --save ejs

TagsStart tag







&lt;%=
이스케이프 된 결과


&lt;%-
이스케이프 되지 않은 결과


&lt;%#
주석


&lt;%
EJS 스크립트 코드 조각


&lt;%_
EJS 스크립트 코드 조각 (모든 공백 제거)


EJS&lt;% const tag = &quot;&lt;p&gt;단락&lt;/p&gt;&quot;; %&gt;&lt;%= tag %&gt;&lt;%- tag %&gt;

Result&amp;lt;p&amp;gt;단락&amp;lt;/p&amp;gt;&lt;p&gt;단락&lt;/p&gt;

End tag







%&gt;
자주 사용되는 일반적인 종료


-%&gt;
마지막 문자 뒤 줄 바꿈


_%&gt;
마지막 문자 뒤 모든 공백 제거


EJS&lt;% const name = &quot;가나다&quot;; %&gt;&lt;%= name -%&gt;라마바

Result가나다라마바

Includesheadhead.html&lt;head&gt;  &lt;title&gt;모든 코드를 가져오려면 body 요소가 없어야 합니다.&lt;/title&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;default.css&quot;&gt;&lt;/head&gt;

EJS&lt;html&gt;&lt;%- include(&#x27;head.html&#x27;) %&gt;&lt;body&gt;  내용입니다.&lt;/body&gt;&lt;/html&gt;

Result&lt;html&gt;  &lt;head&gt;    &lt;title&gt;모든코드를 가져오려면 body 요소가 없어야 합니다.&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;default.css&quot;&gt;  &lt;/head&gt;  &lt;body&gt;    내용입니다.  &lt;/body&gt;&lt;/html&gt;

bodyOnly templatechild.html&lt;p&gt;포함될 파일의 코드입니다.&lt;/p&gt;

EJS&lt;p&gt;내용입니다.&lt;/p&gt;&lt;%- include(&#x27;child.html&#x27;) %&gt;

Result&lt;p&gt;내용입니다.&lt;/p&gt;&lt;p&gt;포함될 파일의 코드입니다.&lt;/p&gt;

Template with datapet.html&lt;p&gt;&lt;%= locals.pet %&gt;&lt;/p&gt;

EJS&lt;h1&gt;우리 강아지&lt;/h1&gt;&lt;%- include(&#x27;pet.html&#x27;, &#123;  pet : &#x27;말티즈&#x27;,&#125;) %&gt;

Result&lt;h1&gt;우리 강아지&lt;/h1&gt;&lt;p&gt;말티즈&lt;/p&gt;

VariableEJS&lt;% const name = &#x27;홍길동&#x27; %&gt;&lt;%= name %&gt;

Result홍길동

ConditionEJS&lt;% const user = &#123;  name: &#x27;홍길동&#x27;,  age: &#x27;20&#x27;,&#125;; %&gt;&lt;% if (user.name) &#123; %&gt;  &lt;h1&gt;&lt;%= user.name %&gt;, &lt;%= user.age %&gt;세&lt;/h1&gt;&lt;% &#125; else &#123; %&gt;  &lt;p&gt;이름이 없습니다.&lt;/p&gt;&lt;% &#125; %&gt;

Result&lt;h2&gt;홍길동, 20세&lt;/h2&gt;

LoopArrayEJS&lt;% const pets = [&#x27;말티즈&#x27;, &#x27;치와와&#x27;, &#x27;푸들&#x27;] %&gt;&lt;ul&gt;  &lt;% pets.forEach((pet) =&gt; &#123; -%&gt;    &lt;li&gt;&lt;%= pet %&gt;&lt;/li&gt;  &lt;% &#125;); %&gt;&lt;/ul&gt;

Result&lt;ul&gt;  &lt;li&gt;말티즈&lt;/li&gt;  &lt;li&gt;치와와&lt;/li&gt;  &lt;li&gt;푸들&lt;/li&gt;&lt;/ul&gt;

ObjectEJS&lt;% const pets = &#123; name: &#x27;말티즈&#x27;, name: &#x27;치와와&#x27;, name: &#x27;푸들&#x27; &#125; %&gt;&lt;ul&gt;  &lt;% for (let pet in pets) &#123; %&gt;    &lt;li&gt;&lt;%= pet.name %&gt;&lt;/li&gt;  &lt;% &#125; %&gt;&lt;/ul&gt;

Result&lt;ul&gt;  &lt;li&gt;말티즈&lt;/li&gt;  &lt;li&gt;치와와&lt;/li&gt;  &lt;li&gt;푸들&lt;/li&gt;&lt;/ul&gt;
]]></content>
      <categories>
        <category>node</category>
        <category>ejs</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery Selectors v3.6.0</title>
    <url>/jquery/selectors/</url>
    <content><![CDATA[
  https://api.jquery.com/category/selectors


Basichttps://api.jquery.com/category/selectors/basic-css-selectors
$(&#x27;*&#x27;) // 전체$(&#x27;#id&#x27;) // 아이디$(&#x27;.class&#x27;) // 클래스$(&#x27;tag&#x27;) // 태그$(&#x27;selector1, selector2, selectorN&#x27;) // 다중

Hierarchyhttps://api.jquery.com/category/selectors/hierarchy-selectors
$(&#x27;parent &gt; child&#x27;) // 직계 자식$(&#x27;ancestor descendant&#x27;) // 조상 자손$(&#x27;prev + next&#x27;) // 인접$(&#x27;prev ~ siblings&#x27;) // 형제

Basic filterhttps://api.jquery.com/category/selectors/basic-filter-selectors
$(&#x27;:animated&#x27;) // 애니메이션 중인 요소$(&#x27;:focus&#x27;) // 포커스된 요소$(&#x27;:header&#x27;) // 헤딩 태그$(&#x27;:lang(ko)&#x27;) // 지정된 언어 요소$(&#x27;:not(selector)&#x27;) // 주어진 선택자와 일치하지 않는 요소$(&#x27;:root&#x27;) // 최상위 요소$(&#x27;:target&#x27;) // URI 해시태그에 일치하는 id 값을 가진 요소

Child filterhttps://api.jquery.com/category/selectors/child-filter-selectors
$(&#x27;:first-child&#x27;) // 첫번째 자식$(&#x27;:last-child&#x27;) // 마지막 자식$(&#x27;:first-of-type&#x27;) // 첫번째 자식 (동일 요소)$(&#x27;:last-of-type&#x27;) // 마지막 자식 (동일 요소)$(&#x27;:nth-child(n)&#x27;) // 앞에서부터 n 번째 자식 (1 부터 시작, 홀수: odd, 짝수: even)$(&#x27;:nth-last-child(n)&#x27;) // 뒤에서부터 n 번째 자식 (1 부터 시작, 홀수: odd, 짝수: even)$(&#x27;:nth-last-of-type(n)&#x27;) // 뒤에서부터 n 번째 자식 (동일요소, 1 부터 시작, 홀수: odd, 짝수: even)$(&#x27;:nth-of-type(n)&#x27;) // 앞에서부터 n 번째 자식 (동일요소, 1 부터 시작, 홀수: odd, 짝수: even)$(&#x27;:only-child&#x27;) // 유일한 자식$(&#x27;:only-of-type&#x27;) // 유일한 자식 (동일 요소)

Attributehttps://api.jquery.com/category/selectors/attribute-selectors
$(&#x27;[attribute]&#x27;) // 해당 속성을 가진 요소$(&#x27;[attribute=value]&#x27;) // 속성값과 동일한 문자열$(&#x27;[attribute!=value]&#x27;) // 속성값과 다른 문자열$(&#x27;[attribute|=value]&#x27;) // 속성값이 동일하거나 하이픈으로 분리된 문자열$(&#x27;[attribute*=value]&#x27;) // 속성값을 포함하는 문자열$(&#x27;[attribute~=value]&#x27;) // 속성값을 포함하는 문자열 (공백으로 구분되었을 경우만 해당)$(&#x27;[attribute^=value]&#x27;) // 속성값으로 시작하는 문자열$(&#x27;[attribute$=value]&#x27;) // 속성값으로 끝나는 문자열$(&#x27;[attribute1=value1][attribute2=value2]&#x27;) // 다중 조건에 만족하는 요소

Formhttps://api.jquery.com/category/selectors/form-selectors
$(&#x27;:focus&#x27;) // 포커스된 요소$(&#x27;:enabled&#x27;) // 활성 요소$(&#x27;:disabled&#x27;) // 비활성 요소$(&#x27;:input&#x27;) // 모든 인풋 요소 (input, select, textarea, button)$(&#x27;:text&#x27;) // 텍스트 입력 요소$(&#x27;:password&#x27;) // 비밀번호 입력 요소$(&#x27;:radio&#x27;) // 라디오 버튼 요소$(&#x27;:checkbox&#x27;) // 체크박스 요소 ([type=checkbox])$(&#x27;:checked&#x27;) // 체크된 체크박스 요소$(&#x27;:button&#x27;) // 버튼 요소 ([type=button], button)$(&#x27;:file&#x27;) // 파일 탐색기 요소$(&#x27;:image&#x27;) // 이미지 탐색기 요소$(&#x27;:reset&#x27;) // 리셋 버튼 요소$(&#x27;:submit&#x27;) // 제출 버튼 요소$(&#x27;:selected&#x27;) // 선택된 option 요소

Visibility filterhttps://api.jquery.com/category/selectors/visibility-filter-selectors
$(&#x27;:visible&#x27;) // 보이는 요소$(&#x27;:hidden&#x27;) // 보이지 않는 요소

Content filterhttps://api.jquery.com/category/selectors/content-filter-selector
$(&#x27;:empty&#x27;) // 빈 요소$(&#x27;:parent&#x27;) // 비어있지 않은 요소$(&#x27;:contains(text)&#x27;) // 문자열을 포함하는 요소$(&#x27;:has(selector)&#x27;) // 선택자를 포함하는 요소
]]></content>
      <categories>
        <category>jquery</category>
        <category>selectors</category>
      </categories>
      <tags>
        <tag>selectors</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Gulp - Task Automate v4.0.2</title>
    <url>/node/gulp/</url>
    <content><![CDATA[
  https://gulpjs.com/docs/en/api/concepts


Setupnpm install --global gulp-cli

SyntaxReturning a streamconst &#123; src, dest &#125; = require(&#x27;gulp&#x27;);function task() &#123;  return src()    .pipe(dest());&#125;exports.default = task;

Returning a promisefunction task(callback) &#123;  return Promise.resolve(&#x27;result&#x27;);&#125;exports.default = task;

Returning an event emitterconst &#123; EventEmitter &#125; = require(&#x27;events&#x27;);function task() &#123;  const emitter = new EventEmitter();  setTimeout(() =&gt; emitter.emit(&#x27;finish&#x27;), 250);  return emitter;&#125;exports.default = task;

Returning a child processconst &#123; exec &#125; = require(&#x27;child-process&#x27;);function task() &#123;  return exec(&#x27;date&#x27;);&#125;exports.default = task;

Returning an observableconst &#123; Observable &#125; = require(&#x27;rxjs&#x27;);function task() &#123;  return Observable.of(1, 2, 3);&#125;exports.default = task;

Using async awaitconst fs = require(&#x27;fs&#x27;);async function task() &#123;  const &#123; version &#125; = JSON.parse(fs.readFileSync(&#x27;package.json&#x27;, &#x27;utf8&#x27;));  console.log(version);  await Promise.resolve(&#x27;some result&#x27;);&#125;exports.default = task;

Methodssrchttps://gulpjs.com/docs/en/api/src

파일 시스템에서 Vinyl 객체를 읽기 위한 스트림을 만든다.

const &#123; src, dest &#125; = require(&#x27;gulp&#x27;);function copy() &#123;  return src(&#x27;input/*.js&#x27;, &#123;    buffer: true, // 파일 내용을 메모리에 버퍼링    read: true, // false 일 경우 파일을 읽을 수 없음    since: new Date(), // 지정된 시간 이후 수정된 파일에 대해서만 Vinyl 객체를 만듦    removeBOM: true, // UTF-8 인코딩 파일에서 BOM 을 제거    sourcemaps: false, // true 일 경우 소스맵 지원을 활성화    resolveSymlinks: true, // 심볼릭 링크를 재귀적으로 해결    cwd: process.cwd(), // 상대경로와 결합되어 절대경로를 형성할 디렉토리    base: &#x27;&#x27;, // base 경로    cwdbase: false,    root: &#x27;&#x27;, // 루트 경로    allowEmpty: false, // true 일 경우 대상을 찾지 못하면 에러 처리    uniqueBy: &#x27;path&#x27;, // 스트림에서 중복을 제거    dot: false, // true 일 경우 이름에 dot 가 있는 파일을 비교 (.gitignore)    silent: true, // 경고 표시 안함    mark: false,    nosort: false, // 결과를 정렬하지 않음    stat: false, // true 일 경우 fs.stat() 모든 결과에서 호출 (오버헤드가 발생하므로 사용 자제)    strict: false, // 엄격 모드    nounique: false, // 결과에서 중복 방지    debug: false, // 디버깅 정보 표시    nobrace: false,    noglobstar: false, // 이중 별 문자를 단일 별 문자로 취급    noext: false, // true 일 경우 extglob 패턴과 일치 하지 않음    nocase: false, // 대소문자 구분안함    matchBase: false, // true 일 경우 glob 에 / 문자가 포함되어 있지 않으면 모든 디렉토리를 탐색    nodir: false, // 디렉토리는 탐색하지 않음 (디렉토리만 일치하려면 glob 를 / 으로 끝냄)    ignore: [&#x27;&#x27;], // 제외할 문자    follow: false,    realpath: false, // true 일 경우 fs.realpath() 모든 결과에서 호출    cache: &#123;&#125;,    statCache: &#123;&#125;,    symlinks: &#123;&#125;,    nocomment: false, // false 일 경우 glob 시작 부분에 # 문자를 주석으로 처리  &#125;).pipe(dest(&#x27;output/&#x27;));&#125;exports.copy = copy;

desthttps://gulpjs.com/docs/en/api/dest

Vinyl 객체를 파일 시스템에 쓰기 위한 스트림을 만든다.

const &#123; src, dest &#125; = require(&#x27;gulp&#x27;);function copy() &#123;  return src(&#x27;input/*.js&#x27;, &#123;    cwd: process.cwd(), // 상대경로와 결합되어 절대경로를 형성할 디렉토리    mode: stat.mode, // 파일을 만들 때 사용되는 모드    dirMode: function() &#123;&#125;, // 디렉토리를 만들 때 사용되는 모드    overwrite: true, // 덮어씌우기    append: false, // 기존 내용을 변경하지 않고 파일 끝에 추가    sourcemaps: false, // true 일 경우 소스맵 지원을 활성화    relativeSymlinks: false, // 상대적인 심볼릭 링크    useJunctions: true, // true 일 경우 디렉토리 기호링크를 junction 으로 작성 (windows 용 옵션)  &#125;).pipe(dest(&#x27;output/&#x27;));&#125;exports.copy = copy;

symlinkhttps://gulpjs.com/docs/en/api/symlink

Vinyl 객체를 파일 시스템에 연결하기 위한 스트림을 만든다.

const &#123; src, symlink &#125; = require(&#x27;gulp&#x27;);function link() &#123;  return src(&#x27;input/*.js&#x27;, &#123;    cwd: process.cwd(), // 상대경로와 결합되어 절대경로를 형성할 디렉토리    dirMode: function() &#123;&#125;, // 디렉토리를 만들 때 사용되는 모드    overwrite: true, // 덮어씌우기    relativeSymlinks: false, // 상대적인 심볼릭 링크    useJunctions: true, // true 일 경우 디렉토리 기호링크를 junction 으로 작성 (windows 용 옵션)  &#125;).pipe(symlink(&#x27;output/&#x27;));&#125;exports.link = link;

lastRunhttps://gulpjs.com/docs/en/api/lastrun

현재 실행중인 프로세스중에 작업이 마지막으로 완료된 시간을 검색한다.src() 와 같이 사용하면 변경된 파일만 가져오기 때문에 성능에 유리하다.

const &#123; src, dest, lastRun, watch &#125; = require(&#x27;gulp&#x27;);const imagemin = require(&#x27;gulp-imagemin&#x27;);function images() &#123;  return src(&#x27;src/img/**/*.jpg&#x27;, &#123; since: lastRun(images) &#125;)    .pipe(imagemin())    .pipe(dest(&#x27;build/img/&#x27;));&#125;exports.default = () =&gt; &#123;  watch(&#x27;src/img/**/*.jpg&#x27;, images);&#125;;

serieshttps://gulpjs.com/docs/en/api/series

태스크를 순차적으로 실행한다.

const &#123; series &#125; = require(&#x27;gulp&#x27;);function a(callback) &#123;  callback();&#125;function b(callback) &#123;  callback();&#125;exports.build = series(a, b);

parallelhttps://gulpjs.com/docs/en/api/parallel

태스크를 동시에 실행한다.

const &#123; parallel &#125; = require(&#x27;gulp&#x27;);function a(callback) &#123;  callback();&#125;function b(callback) &#123;  callback();&#125;exports.build = parallel(a, b);

watchhttps://gulpjs.com/docs/en/api/watch

glob 을 관찰하고 변경이 발생할 때 작업을 실행한다.

const &#123; watch &#125; = require(&#x27;gulp&#x27;);watch([&#x27;input/*.js&#x27;, &#x27;!input/something.js&#x27;], &#123;  ignoreInitial: true,  delay: 200, // 작업 실행 전 지연시간  queue: true, // 작업이 진행중이면 큐에 넣어서 대기 후 실행  events: [&#x27;add&#x27;, &#x27;change&#x27;, &#x27;unlink&#x27;], // 작업 실행을 트리거하기 위해 감시되는 이벤트  persistent: true, // false 일 경우 감시자는 노드 프로세스를 계속 실행하지 않음  ignored: [&#x27;&#x27;], // 무시할 glob  followSymlinks: true, // 심볼릭 링크와 링크된 파일을 모두 변경하면 이벤트가 트리거 됨  cwd: &#x27;&#x27;, // 상대경로와 결합되어 절대경로를 형성할 디렉토리  disableGlobbing: false, // true 일 경우 globs 에 특수문자가 있더라도 모두 리터럴 경로이름으로 처리  usePolling: false, // fs.watchFile() 대신 폴링을 사용  interval: 100, // 파일 시스템 폴링 간격  binaryInterval: 300, // 바이너리 파일 시스템 폴링 간격  useFsEvents: true, // fsevents 를 사용 하여 시청 (usePolling 옵션을 대체)  alwaysStat: false, // true 일 경우 항상 fs.stat() 변경된 파일을 호출 (파일 감시자가 느려짐)  depth: number, // 감시할 디렉토리의 중첩 수준  awaitWriteFinish: false, // awaitWriteFinish 보다 delay 사용 권장  ignorePermissionErrors: false, // true 일 경우 읽기 권한이 없는 파일도 감시  atomic: 100,&#125;, (callback) =&gt; &#123;  callback();&#125;);

const &#123; watch &#125; = require(&#x27;gulp&#x27;);const watcher = watch([&#x27;input/*.js&#x27;]);watcher.on(&#x27;add&#x27;, (path, stats) =&gt; &#123;&#125;);watcher.on(&#x27;addDir&#x27;, (path, stats) =&gt; &#123;&#125;);watcher.on(&#x27;change&#x27;, (path, stats) =&gt; &#123;&#125;);watcher.on(&#x27;unlink&#x27;, (path, stats) =&gt; &#123;&#125;);watcher.on(&#x27;unlinkDir&#x27;, (path, stats) =&gt; &#123;&#125;);watcher.on(&#x27;ready&#x27;, (path, stats) =&gt; &#123;&#125;);watcher.on(&#x27;error&#x27;, (path, stats) =&gt; &#123;&#125;);watcher.on(&#x27;all&#x27;, (path, stats) =&gt; &#123;&#125;);watcher.add(globs); // glob 추가watcher.unwatch(globs); // glob 제거watcher.close(); // 감시 종료

taskhttps://gulpjs.com/docs/en/api/task

태스크를 정의한다.

Not recommend >foldedconst &#123; task &#125; = require(&#x27;gulp&#x27;);const taskName = (callback) =&gt; &#123;  callback();&#125;;taskName.displayName = &#x27;name&#x27;;taskName.description = &#x27;description&#x27;;taskName.flags = &#123; &#x27;-f&#x27;: &#x27;flag&#x27; &#125;;task(taskName);

Recommendfunction taskName(callback) &#123;  callback();&#125;exports.taskName = taskName;

registryhttps://gulpjs.com/docs/en/api/registry

사용자지정 레지스트리를 작업시스템에 연결하여 공유작업 또는 기능강화를 제공한다.

const &#123; registry, task, series &#125; = require(&#x27;gulp&#x27;);const FwdRef = require(&#x27;undertaker-forward-reference&#x27;);registry(FwdRef());task(&#x27;default&#x27;, series(&#x27;forward-ref&#x27;));task(&#x27;forward-ref&#x27;, (callback) =&gt; &#123;  callback();&#125;);

treehttps://gulpjs.com/docs/en/api/tree

현재 작업 종속성 트리를 가져온다.

gulpfileconst &#123; series, parallel &#125; = require(&#x27;gulp&#x27;);function a(callback) &#123;  callback();&#125;function b(callback) &#123;  callback();&#125;function c(callback) &#123;  callback();&#125;const d = series(a, b);const e = series(d, parallel(c, (callback) =&gt; &#123;  callback();&#125;));module.exports = &#123; a, b, c, d, e &#125;;

tree() >folded&#123;  label: &#x27;Tasks&#x27;,  nodes: [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27; ]&#125;

tree(&#123; deep: true &#125;) >folded&#123;  label: &quot;Tasks&quot;,  nodes: [    &#123;      label: &quot;a&quot;,      type: &quot;task&quot;,      nodes: []    &#125;,    &#123;      label: &quot;b&quot;,      type: &quot;task&quot;,      nodes: []    &#125;,    &#123;      label: &quot;c&quot;,      type: &quot;task&quot;,      nodes: []    &#125;,    &#123;      label: &quot;d&quot;,      type: &quot;task&quot;,      nodes: [        &#123;          label: &quot;&lt;series&gt;&quot;,          type: &quot;function&quot;,          branch: true,          nodes: [            &#123;              label: &quot;a&quot;,              type: &quot;function&quot;,              nodes: []            &#125;,            &#123;              label: &quot;b&quot;,              type: &quot;function&quot;,              nodes: []            &#125;          ]        &#125;      ]    &#125;,    &#123;      label: &quot;e&quot;,      type: &quot;task&quot;,      nodes: [        &#123;          label: &quot;&lt;series&gt;&quot;,          type: &quot;function&quot;,          branch: true,          nodes: [            &#123;              label: &quot;&lt;series&gt;&quot;,              type: &quot;function&quot;,              branch: true,              nodes: [                &#123;                  label: &quot;a&quot;,                  type: &quot;function&quot;,                  nodes: []                &#125;,                &#123;                  label: &quot;b&quot;,                  type: &quot;function&quot;,                  nodes: []                &#125;              ]            &#125;,            &#123;              label: &quot;&lt;parallel&gt;&quot;,              type: &quot;function&quot;,              branch: true,              nodes: [                &#123;                  label: &quot;c&quot;,                  type: &quot;function&quot;,                  nodes: []                &#125;,                &#123;                  label: &quot;&lt;anonymous&gt;&quot;,                  type: &quot;function&quot;,                  nodes: []                &#125;              ]            &#125;          ]        &#125;      ]    &#125;  ]&#125;

Vinylhttps://gulpjs.com/docs/en/api/vinyl
Vinyl.isVinylhttps://gulpjs.com/docs/en/api/vinyl-isvinyl
Vinyl.isCustomProphttps://gulpjs.com/docs/en/api/vinyl-iscustomprop
ExamplesSCSS to CSSconst &#123; src, dest, watch &#125; = require(&#x27;gulp&#x27;);const gulpSourcemaps = require(&#x27;gulp-sourcemaps&#x27;);const gulpSass = require(&#x27;gulp-sass&#x27;);const gulpAutoprefixer = require(&#x27;gulp-autoprefixer&#x27;);const gulpCleanCSS = require(&#x27;gulp-clean-css&#x27;);const gulpClean = require(&#x27;gulp-clean&#x27;);const path = &#123;  scss: &#x27;src/scss&#x27;,&#125;;function scssToCss() &#123;  return src(`$&#123;path.scss&#125;/*.scss`)    .pipe(gulpSourcemaps.init())    .pipe(gulpSass(&#123;&#125;)).on(&#x27;error&#x27;, gulpSass.logError)    .pipe(gulpAutoprefixer())    .pipe(gulpCleanCSS(&#123;      level: &#123;        2: &#123; mergeSemantically: true &#125;,      &#125;    &#125;))      .pipe(gulpSourcemaps.write(&#x27;./&#x27;))      .pipe(dest(&#x27;dist/css&#x27;));&#125;// 빌드 시 추가function cleanMap() &#123;  return src(`$&#123;path.dist&#125;/css/*.css.map`, &#123; read: false &#125;)    .pipe(gulpClean(&#123; force: true &#125;));&#125;function minifyStyle() &#123;  return src(`$&#123;path.dist&#125;/css/*.css`)    .pipe(gulpSass(&#123; outputStyle: &#x27;compressed&#x27; &#125;))    .pipe(dest(`$&#123;path.dist&#125;/css`));&#125;const makeStyle = () =&gt; scssToCss();exports.makeStyle = makeStyle;exports.watch = watch([`$&#123;path.scss&#125;/*.scss`], makeStyle);

Make sprite imageconst &#123; readdirSync, statSync &#125; = require(&#x27;fs&#x27;);const nodePath = require(&#x27;path&#x27;);const gulpClean = require(&#x27;gulp-clean&#x27;);const gulpSpritesmith = require(&#x27;gulp.spritesmith&#x27;);const gulpCompileHandlebars = require(&#x27;gulp-compile-handlebars&#x27;);const gulpRename = require(&#x27;gulp-rename&#x27;);const path = &#123;  dist: &#x27;./src/dist&#x27;,  img: &#x27;./src/img&#x27;,&#125;;const getFolders = (directory) =&gt; &#123;  return readdirSync(directory).filter((file) =&gt; &#123;    return statSync(nodePath.join(directory, file)).isDirectory();  &#125;);&#125;;function cleanImage() &#123;  return src(`$&#123;path.dist&#125;/img/*`, &#123; read: false &#125;)    .pipe(gulpClean(&#123; force: true &#125;));&#125;async function makeSpriteImage() &#123;  const stream = [];  const folders = await getFolders(`$&#123;path.img&#125;/sprite`);  folders.forEach((folder) =&gt; &#123;    const spriteData = src(`$&#123;path.img&#125;/sprite/$&#123;folder&#125;/*.png`)      .pipe(gulpSpritesmith(&#123;        imgName: `sp_$&#123;folder&#125;.png`,        cssName: `_$&#123;folder&#125;.scss`,        cssFormat: &#x27;scss&#x27;,        padding: 4,        cssTemplate: `$&#123;path.img&#125;/sprite/sprite-template.hbs`,        cssSpritesheetName: `$&#123;folder&#125;`,        imgPath: nodePath.posix.relative(`$&#123;path.dist&#125;/css/`, `$&#123;path.dist&#125;/img/sp_$&#123;folder&#125;.png`),        cssHandlebarsHelpers: &#123; ratio: 1 &#125;,      &#125;));    stream.push(spriteData.img.pipe(dest(`$&#123;path.dist&#125;/img`)));    stream.push(spriteData.css.pipe(dest(`$&#123;path.scss&#125;/sprite`)));  &#125;);    return Promise.all(stream);&#125;function makeSpriteMap() &#123;  const folders = getFolders(`$&#123;path.img&#125;/sprite/`);    return src(`$&#123;path.img&#125;/sprite/sprite-maps-template.hbs`)    .pipe(gulpCompileHandlebars(&#123;      path: nodePath.posix.relative(`$&#123;path.scss&#125;/import`, `$&#123;path.scss&#125;/sprite`),      import: folders    &#125;))    .pipe(gulpRename(&#x27;_sprite-maps.scss&#x27;))    .pipe(dest(`$&#123;path.scss&#125;/import`));&#125;const makeSprite = series(cleanImage, makeSpriteImage, makeSpriteMap);exports.makeSprite = makeSprite;exports.watch = watch([`$&#123;path.img&#125;/sprite/**/*`], makeSprite);

/sprite/sprite-template.hbs$&#123;&#123;spritesheet_info.strings.name&#125;&#125;: (  name: &quot;&#123;&#123;spritesheet_info.strings.name&#125;&#125;&quot;,  image: &quot;&#123;&#123;spritesheet.escaped_image&#125;&#125;&quot;,  width: &#123;&#123;spritesheet.px.width&#125;&#125;,  height: &#123;&#123;spritesheet.px.height&#125;&#125;,  ratio: &#123;&#123;ratio&#125;&#125;,  sprites: (&#123;&#123;#each sprites&#125;&#125;  &#123;&#123;strings.name&#125;&#125;: (    &#123;&#123;strings.bare_offset_x&#125;&#125;: &#123;&#123;px.offset_x&#125;&#125;,    &#123;&#123;strings.bare_offset_y&#125;&#125;: &#123;&#123;px.offset_y&#125;&#125;,    &#123;&#123;strings.bare_width&#125;&#125;: &#123;&#123;px.width&#125;&#125;,    &#123;&#123;strings.bare_height&#125;&#125;: &#123;&#123;px.height&#125;&#125;,  ),&#123;&#123;/each&#125;&#125;  ));

/sprite/sprite-maps-template.hbs&#123;&#123;#each import as |value key|&#125;&#125;@import &quot;&#123;&#123;@root.path&#125;&#125;/&#123;&#123;@root.prefix&#125;&#125;&#123;&#123;value&#125;&#125;&quot;;&#123;&#123;/each&#125;&#125;$map-list: &#123;&#123;#each import as |value key|&#125;&#125;$&#123;&#123;@root.prefix&#125;&#125;&#123;&#123;value&#125;&#125;, &#123;&#123;/each&#125;&#125;;

Transpile javascriptconst gulpClean = require(&#x27;gulp-clean&#x27;);const browserify = require(&#x27;browserify&#x27;);const babelify = require(&#x27;babelify&#x27;);const vinylSourceStream = require(&#x27;vinyl-source-stream&#x27;);const gulpUglify = require(&#x27;gulp-uglify&#x27;);const path = &#123;  dist: &#x27;./src/dist&#x27;,  js: &#x27;./src/js&#x27;,&#125;;function cleanScript() &#123;  return src([`$&#123;path.dist&#125;/js/*`, `!$&#123;path.dist&#125;/js/*.min.js`], &#123; read: false &#125;)    .pipe(gulpClean(&#123; force: true &#125;));&#125;function transpileJavascript() &#123;  return browserify([`$&#123;path.js&#125;/script.js`], &#123; debug: true &#125;)    .transform(babelify, &#123;      presets: [        [&#x27;@babel/preset-env&#x27;, &#123; targets: &#123; edge: &#x27;9&#x27; &#125;&#125;],      ]    &#125;).bundle()      .pipe(vinylSourceStream(&#x27;script.js&#x27;))      .pipe(dest(`$&#123;path.dist&#125;/js`));&#125;// 빌드 시 추가function minifyJavascript() &#123;  return src([`$&#123;path.dist&#125;/js/*`, `!$&#123;path.dist&#125;/js/*.min.js`])    .pipe(gulpUglify())    .pipe(dest(`$&#123;path.dist&#125;/js`))&#125;const makeScript = series(cleanScript, transpileJavascript);exports.makeScript = makeScript;exports.watch = watch([`$&#123;path.ejsSrc&#125;/*.js`], makeScript);

EJS to HTMLconst &#123; src, dest, series, watch &#125; = require(&#x27;gulp&#x27;);const gulpClean = require(&#x27;gulp-clean&#x27;);const gulpEjs = require(&#x27;gulp-ejs&#x27;);const gulpIndex = require(&#x27;gulp-index&#x27;);const gulpHtmlBeautify = require(&#x27;gulp-html-beautify&#x27;);const path = &#123;  dist: &#x27;./src/dist&#x27;,  ejs: &#x27;./src/ejs&#x27;,&#125;;function cleanMarkup() &#123;  return src(`$&#123;path.dist&#125;/*.html`, &#123; read: false &#125;)    .pipe(gulpClean(&#123; force: true &#125;));&#125;function ejsToHtml() &#123;  return src(`$&#123;path.ejs&#125;/*.ejs`)    .pipe(gulpEjs(&#123;&#125;, &#123;&#125;, &#123; ext: &#x27;.html&#x27; &#125;))    .pipe(dest(path.dist));&#125;function makeIndex() &#123;  return src(`$&#123;path.dist&#125;/*(!(css|img|js|index.html))`)    .pipe(gulpIndex(&#123;      &#x27;title&#x27;: &#x27;Indexed Page List&#x27;,      &#x27;tab-string&#x27;: &#x27;&#x27;,      &#x27;pathDepth&#x27;: 1,      &#x27;relativePath&#x27;: &#x27;./src/&#x27;,      &#x27;outputFile&#x27;: &#x27;./index.html&#x27;,      &#x27;prepend-to-output&#x27;: () =&gt; `&lt;!DOCTYPE html&gt;&lt;html lang=&quot;ko&quot;&gt;&lt;head&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;&lt;title&gt;Indexed Page List&lt;/title&gt;&lt;/head&gt;&lt;body&gt;`,      &#x27;append-to-output&#x27;: () =&gt; `&lt;/body&gt;&lt;/html&gt;`,      &#x27;title-template&#x27;: (title) =&gt; `&lt;h1 style=&quot;text-align: center; font-size: 30px;&quot;&gt;$&#123;title&#125;&lt;/h1&gt;`,      &#x27;section-template&#x27;: (sectionContent) =&gt; `&lt;section&gt;$&#123;sectionContent&#125;&lt;/section&gt;`,      &#x27;section-heading-template&#x27;: (heading) =&gt; `&lt;h2 style=&quot;display: none;&quot;&gt;$&#123;heading&#125;&lt;/h2&gt;`,      &#x27;list-template&#x27;: (listContent) =&gt; `&lt;ul&gt;$&#123;listContent&#125;&lt;/ul&gt;`,      &#x27;item-template&#x27;: (filepath, filename) =&gt; `&lt;li&gt;&lt;a href=&quot;./$&#123;filename&#125;&quot; target=&quot;_self&quot; style=&quot;font-size: 20px;&quot;&gt;$&#123;filename&#125;&lt;/a&gt;&lt;/li&gt;`,    &#125;))      .pipe(dest(path.dist));&#125;// 빌드 시 추가function htmlBeautify() &#123;  return src(`$&#123;path.dist&#125;/*.html`)    .pipe(gulpHtmlBeautify(&#123;      indent_with_tabs: true,      indentSize: 4,      end_with_newline: true,    &#125;))    .pipe(dest(path.dist));&#125;const makeMarkup = series(cleanMarkup, ejsToHtml, makeIndex);exports.makeMarkup = makeMarkup;exports.watch = watch([`$&#123;path.ejsSrc&#125;/*.ejs`], makeMarkup);

FTP uploadconst &#123; src, parallel &#125; = require(&#x27;gulp&#x27;);const vinylFtp = require(&#x27;vinyl-ftp&#x27;);const path = &#123;  ftp: &#x27;/test&#x27;,&#125;;const exampleServer = vinylFtp.create(&#123;  host: &#x27;example.com&#x27;,  user: &#x27;id&#x27;,  password: &#x27;password&#x27;,&#125;);function ftpUpload(glob, base, server) &#123;  return src(glob, &#123; base, buffer: false &#125;)    .pipe(server.newerOrDifferentSize(path.ftp))    .pipe(server.dest(path.ftp));&#125;const deployJsExampleServer = () =&gt; ftpUpload([&#x27;dist/js/**&#x27;], &#x27;./dist&#x27;, exampleServer);const deployCssExampleServer = () =&gt; ftpUpload([&#x27;dist/css/**&#x27;], &#x27;./dist&#x27;, exampleServer);exports.deployJsExampleServer = deployJsExampleServer;exports.deployCssExampleServer = deployCssExampleServer;exports.deployAllExampleServer = parallel(deployJsExampleServer, deployCssExampleServer);exports.watch = series(() =&gt; &#123;  watch([&#x27;dist/js/**/*.js&#x27;], deployJsExampleServer);  watch([&#x27;dist/css/**/*.js&#x27;], deployCssExampleServer);&#125;);
]]></content>
      <categories>
        <category>node</category>
        <category>gulp</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery Setup v3.6.0</title>
    <url>/jquery/setup/</url>
    <content><![CDATA[
  https://jquery.com/download


SetupUse NPMnpm install --save jquery

Use CDN&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;&lt;/script&gt;

Document ready$(document).ready(function() &#123;&#125;);$(document).ready(() =&gt; &#123;&#125;);

$(document).on(&#x27;ready&#x27;, function() &#123;&#125;);$(document).on(&#x27;ready&#x27;, () =&gt; &#123;&#125;);

$(function() &#123;&#125;);$(() =&gt; &#123;&#125;);

$.when($.ready).then(function() &#123;&#125;);$.when($.ready).then(() =&gt; &#123;&#125;);

Window loaded$(window).load(function() &#123;&#125;);$(window).load(() =&gt; &#123;&#125;);

$(document).on(&#x27;load&#x27;, function() &#123;&#125;);$(document).on(&#x27;load&#x27;, () =&gt; &#123;&#125;);

noConflict$.noConflict();;(function($) &#123;&#125;)(window.jQuery);;(($) =&gt; &#123;&#125;)(window.jQuery);
]]></content>
      <categories>
        <category>jquery</category>
        <category>setup</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo - Blog Framework v6.0.0</title>
    <url>/node/hexo/</url>
    <content><![CDATA[
  https://hexo.io
  https://github.com/hexojs/hexo


SetupInstall global CLInpm install -global hexo-cli

Create new bloghexo init blog-name

Configurationhttps://hexo.io/ko/docs/configuration
Commandhttps://hexo.io/ko/docs/commands
Tag pluginsLinkhttps://hexo.io/docs/tag-plugins#Link
&#123;% link Naver https://www.naver.com true %&#125;

Imagehttps://hexo.io/ko/docs/tag-plugins#Image
&#123;% img /img/logo.svg 300 %&#125;&#123;% img [light|dark] &quot;/img/logo.svg&quot; 300 %&#125;

Block quotehttps://hexo.io/ko/docs/tag-plugins#Block-Quote
&#123;% blockquote name http://example.com example %&#125;&#123;% endblockquote %&#125;

Code blockhttps://hexo.io/ko/docs/tag-plugins#Code-Block
&#123;% codeblock title lang:javascript &gt;folded http://example.com example line_number:true highlight:true first_line:1 mark:1,3-5 wrap:true %&#125;line-01line-02line-03line-04line-05&#123;% endcodeblock %&#125;

Jsfiddlehttps://hexo.io/ko/docs/tag-plugins#jsFiddle
&lt;div class=&quot;jsfiddle-cover&quot;&gt;  &#123;% jsfiddle 9swg2fmn result,html,css &#x27;dark&#x27; &#x27;100%&#x27; &#x27;300&#x27; %&#125;&lt;/div&gt;

Youtubehttps://hexo.io/ko/docs/tag-plugins#YouTube
&#123;% youtube video_id [type] [cookie] %&#125;

Include posthttps://hexo.io/ko/docs/tag-plugins#Include-Posts
&#123;% post_link node/hexo Refer to Hexo %&#125;

Syntax highlightinghttps://hexo.io/ko/docs/syntax-highlight
Vue highlight&lt;script src=&quot;/js/highlight-9.16.2.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/js/highlightjs-vue.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;hljs.registerLanguage(&#x27;vue&#x27;, window.hljsDefineVue);hljs.initHighlightingOnLoad();&lt;/script&gt;

Custom rulesTags
  button 1
  button 2


&lt;div class=&quot;tags&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;button 1&lt;/span&gt;  &lt;span class=&quot;tag&quot;&gt;button 2&lt;/span&gt;&lt;/div&gt;

Tabs
  
    tab 1
    tab 2
  
  
    
panel 1
    
    
panel 2
    
  


&lt;div class=&quot;tabs-panels&quot;&gt;  &lt;menu class=&quot;tabs&quot;&gt;    &lt;li class=&quot;item active&quot;&gt;&lt;button class=&quot;button&quot;&gt;tab 1&lt;/button&gt;&lt;/li&gt;    &lt;li class=&quot;item&quot;&gt;&lt;button class=&quot;button&quot;&gt;tab 2&lt;/button&gt;&lt;/li&gt;  &lt;/menu&gt;  &lt;ul class=&quot;panels&quot;&gt;    &lt;li class=&quot;item active&quot;&gt;panel 1    &lt;/li&gt;    &lt;li class=&quot;item&quot;&gt;panel 2    &lt;/li&gt;  &lt;/ul&gt;&lt;/div&gt;

Tree


Depth 1
Depth 2





&lt;div class=&quot;tree&quot;&gt;* Depth 1  * Depth 2&lt;/div&gt;

CaniuseIE 지원 안함
&lt;a class=&quot;caniuse&quot; href=&quot;https://caniuse.com/?search=main&quot;&gt;`IE` 지원 안함&lt;/a&gt;&lt;a class=&quot;caniuse&quot; href=&quot;https://caniuse.com/?search=progress&quot;&gt;`IE 10` 이상&lt;/a&gt;

Serverhttps://hexo.io/ko/docs/server.html
/blog/hexo server

Generatehttps://hexo.io/ko/docs/generating.html
/blog/hexo generate

Deployhttps://hexo.io/ko/docs/github-pageshttps://hexo.io/ko/docs/one-command-deployment.html
/blog/npm install --save hexo-deployer-git

/blog/config.ymldeploy:  type: git  repo: https://github.com/GronkOut/gronkout.github.io.git  branch: master

/blog/hexo deploy

Generate &amp; Deploy/blog/hexo clean &amp;&amp; hexo d -g

PluginEncrypthttps://github.com/D0n9X1n/hexo-blog-encrypt
/blog/npm install --save hexo-blog-encrypt

/blog/config.ymlencrypt:  abstract: Here&#x27;s something encrypted, password is required to continue reading.  message: Enter password.  wrong_pass_message: This is an invalid password. Check and try again, please.  wrong_hash_message: These decrypted content cannot be verified, but you can still have a look.  theme: up

/blog/source/_posts/hexo.mdpassword: 12345

Themehttps://hexo.io/themes
/blog/_config.ymltheme: icarus

Use git submodule/blog/git submodule add https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus

/blog/themes/icarus/npm install

/blog/git submodule update --init --recursive


설치가 쉽고 최신 테마로 관리할 수 있으나, 커스터마이징이 어렵다.

Use copy and pastedownload icarus theme

/blog/themes/icarus/npm install


테마 코드를 직접 관리하면 최신 테마 적용이 어렵지만, 커스터마이징하기 쉽다.

]]></content>
      <categories>
        <category>node</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>node</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery Traversing v3.6.0</title>
    <url>/jquery/traversing/</url>
    <content><![CDATA[
  https://api.jquery.com/category/traversing


Tree traversalhttps://api.jquery.com/category/traversing/tree-traversal
find() // 자손children() // 직계 자식parent() // 부모parents() // 조상으로 탐색하면서 모든 결과 리턴parentsUntil() // 조상으로 탐색하면서 모든 결과 리턴 (인자에 지정한 선택자 이전까지)closest() // 조상으로 탐색하면서 하나의 결과 리턴offsetParent() // 포지션의 기준이 되는 부모 요소siblings() // 형제 요소prev() // 이전에 있는 형제 요소next() // 다음에 있는 형제 요소prevAll() // 이전에 있는 모든 형제 요소nextAll() // 다음에 있는 모든 형제 요소prevUntil() // 이전에 있는 모든 형제 요소 (인자에 지정한 선택자 이전까지)nextUntil() // 다음에 있는 모든 형제 요소 (인자에 지정한 선택자 이전까지)

Filteringhttps://api.jquery.com/category/traversing/filtering
eq() // 확장집합의 해당 인덱스 대상을 반환odd() // 확장집합의 홀수 인덱스 대상을 반환even() // 확장집합의 짝수 인덱스 대상을 반환is() // 조건 만족 여부 확인 (불리언값 리턴)has() // 선택자를 가지고 있는 요소만 반환first() // 확장집합의 첫번째 요소last() // 확장집합의 마지막 요소filter() // 조건에 충족하는 요소만 반환map() // 확장집합 맵핑 반복문not() // 확장집합에서 대상을 제외slice() // 확장집합 분할

Miscellaneoushttps://api.jquery.com/category/traversing/miscellaneous-traversal
add() // 확장집합에 대상을 추가addBack() // 확장집합에 상위선택자를 추가contents() // 대상의 하위 요소를 모두 반환end() // 체인의 이전단계
]]></content>
      <categories>
        <category>jquery</category>
        <category>traversing</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery Utilities v3.6.0</title>
    <url>/jquery/utilities/</url>
    <content><![CDATA[
  https://api.jquery.com/category/utilities


Methodsindex() // 확장집합에서 일치하는 인덱스 반환 (일치하지 않을 경우 -1 반환)toArray() // 확장집합을 배열로 반환queue()dequeue()clearQueue()$.each(index, element) // 반복 메서드$.map()$.uniqueSort()$.data()$.removeData()$.contains()$.queue()$.dequeue()$.merge()$.grep()$.noop()$.globalEval()$.inArray()$.isEmptyObject()$.isPlainObject()$.isXMLDoc()$.makeArray()$.parseHTML()$.parseXML()$.extend()$.fn.extend()

datahttps://api.jquery.com/jQuery.data

jQuery 에서만 사용되는 값으로 HTML data attribute 와 다르다.

]]></content>
      <categories>
        <category>jquery</category>
        <category>utilities</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>React Components v18.2.0</title>
    <url>/react/components/</url>
    <content><![CDATA[
  https://ko.reactjs.org/docs/react-component.html


Function componentconst Function = () =&gt; &#123;  return (    &lt;div&gt;abc&lt;/div&gt;  );&#125;;export default Function;


Presentational Component
멍청한 (dumb) 컴포넌트라고 알려져 있으며 오직 뷰만 담당한다.안에 DOM 요소와 스타일이 있으며, 프리젠테이셔널 컴포넌트나 컨테이너 컴포넌트가 있을 수도 있다.리덕스 스토어에 직접 접근할 권한은 없으며, 오직 props 로만 데이터를 가져올 수 있다.대부분은 state 가 없고, 있다 해도 데이터와 관련된 것이 아니라 UI 와 관련된 것이어야 한다.주로 함수형 컴포넌트로 작성한다.

Class componentimport &#123; Component &#125; from &#x27;react&#x27;;class Example extends Component &#123;  render() &#123;    return (      &lt;div&gt;abc&lt;/div&gt;    );  &#125;&#125;export default Example;


Container Component
똑똑한 (smart) 컴포넌트라고 알려져 있으며 컴포넌트들의 관리를 담당한다.내부에 DOM 요소를 직접적으로 사용할 때는 없고, 감싸는 용도일 때만 사용한다.스타일도 가지고 있지 않아야 하며, 스타일은 모두 프리젠테이셔널 컴포넌트에서 정의해야 한다.상태를 가지고 있을 때가 많으며, 리덕스에 직접 접근할 수 있다.

]]></content>
      <categories>
        <category>react</category>
        <category>components</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Node Package Manager v8.5.2</title>
    <url>/node/npm/</url>
    <content><![CDATA[
  https://docs.npmjs.com


SetupNode version managerhttps://github.com/coreybutler/nvm-windows/releases
nvm lsnvm ls availablenvm install x.x.xnvm uninstall x.x.xnvm use x.x.x


exit status 1 메세지가 나오면서 버젼이 변경되지 않을 경우 관리자 권한으로 커맨드를 실행해야 한다.

Update npm versionnpm install -global npm@latest

Clear cachenpm cache clear --force

Show installed modulesnpm list --depth=0

Differences between npm install and ci


npm install
npm ci



패키지와 모든 종속성 설치
종속성을 설치


개별 종속성 추가 가능
개별 종속성 추가 할 수 없음


package.json 과 package-lock.json 에 쓸 수 있음
package.json 과 package-lock.json 에 쓸 수 없음


package-lock.json 에 종속성이 없으면 종속성을 추가 함
종속성이 없거나 호환되지 않으면 오류 처리


node_modules 가 이미 있으면 아무것도 하지 않음
node_modules 가 이미 있으면 제거 후 재 설치


글로벌 패키지를 설치할 수 있음
글로벌 패키지를 설치할 수 없음


속도 느림
속도 빠름



npm ci 는 v5.7.0 이상부터 사용 가능하다.

package.jsonhttps://docs.npmjs.com/cli/v8/configuring-npm/package-json
Createhttps://docs.npmjs.com/creating-a-package-json-file
npm init --yes

/package.json&#123;  &quot;name&quot;: &quot;my_package&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;scripts&quot;: &#123;    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;  &#125;,  &quot;repository&quot;: &#123;    &quot;type&quot;: &quot;git&quot;,    &quot;url&quot;: &quot;https://github.com/monatheoctocat/my_package.git&quot;  &#125;,  &quot;keywords&quot;: [],  &quot;author&quot;: &quot;&quot;,  &quot;license&quot;: &quot;ISC&quot;,  &quot;bugs&quot;: &#123;    &quot;url&quot;: &quot;https://github.com/monatheoctocat/my_package/issues&quot;  &#125;,  &quot;homepage&quot;: &quot;https://github.com/monatheoctocat/my_package&quot;&#125;

namehttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#name
/package.json&#123;  &quot;name&quot;: &quot;project-name&quot;&#125;

versionhttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#version
/package.json&#123;  &quot;version&quot;: &quot;project-version&quot;&#125;

descriptionhttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#description-1
/package.json&#123;  &quot;description&quot;: &quot;project-description&quot;&#125;

keywordshttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#keywords
/package.json&#123;  &quot;keywords&quot;: &quot;keywords&quot;&#125;

homepagehttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#homepage
/package.json&#123;  &quot;homepage&quot;: &quot;https://github.com/owner/project#readme&quot;&#125;

bugshttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#bugs
/package.json&#123;  &quot;bugs&quot;: &#123;    &quot;url&quot;: &quot;https://github.com/owner/project/issues&quot;,    &quot;email&quot;: &quot;project@hostname.com&quot;  &#125;&#125;

licensehttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#license
/package.json&#123;  &quot;license&quot; : &quot;MIT&quot;&#125;

authorhttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#people-fields-author-contributors
/package.json&#123;  &quot;author&quot;: &#123;    &quot;name&quot;: &quot;Barney Rubble&quot;,    &quot;email&quot;: &quot;b@rubble.com&quot;,    &quot;url&quot;: &quot;http://barnyrubble.tumblr.com/&quot;  &#125;,  &quot;contributors&quot;: &quot;Barney Rubble &lt;b@rubble.com&gt; (http://barnyrubble.tumblr.com/)&quot;&#125;

fundinghttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#funding
/package.json&#123;  &quot;funding&quot;: &#123;    &quot;type&quot;: &quot;individual&quot;,    &quot;url&quot;: &quot;http://example.com/donate&quot;  &#125;&#125;

repositoryhttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#repository
/package.json&#123;  &quot;repository&quot;: &#123;    &quot;type&quot;: &quot;git&quot;,    &quot;url&quot;: &quot;https://github.com/npm/cli.git&quot;  &#125;&#125;

scripthttps://docs.npmjs.com/cli/v8/using-npm/scripts
confighttps://docs.npmjs.com/cli/v8/using-npm/config
dependencieshttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#dependencies

엔드 유저가 사용하는 모듈이다.

devDependencieshttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#devdependencies

개발 단계에서만 사용하는 모듈이다.

engineshttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#engines
/package.json&#123;  &quot;engines&quot;: &#123;    &quot;node&quot;: &quot;&gt;=16.14.0&quot;,    &quot;npm&quot;: &quot;&gt;=8.5.2&quot;  &#125;&#125;

oshttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#os
/package.json&#123;  &quot;os&quot;: [ &quot;linux&quot; ]&#125;

privatehttps://docs.npmjs.com/cli/v8/configuring-npm/package-json#private
/package.json&#123;  &quot;private&quot;: true&#125;

resolutionshttps://github.com/rogeriochaves/npm-force-resolutions
/package.json&#123;  &quot;scripts&quot;: &#123;    &quot;preinstall&quot;: &quot;npm install --package-lock-only --ignore-scripts &amp;&amp; npx npm-force-resolutions&quot;  &#125;,  &quot;resolutions&quot;: &#123;    &quot;stylus&quot;: &quot;0.54.8&quot;  &#125;&#125;


resolutions 속성은 하위 모듈에 특정 버전을 고정한다.yarn install 시 기본적으로 동작하지만, npm install 은 지원하지 않는다.preinstall (사전 설치) 속성에 npm-force-resolutions 라이브러리를 사용하도록 추가하면 npm install 도 정상 동작한다.

Edit node_modulesuse patch-packagehttps://github.com/ds300/patch-package
Setupnpm install --save-dev patch-packageyarn add patch-package postinstall-postinstall

Create patch datanpx patch-package package-nameyarn patch-package package-name


node_modules 내부 파일을 수정 후 패치 데이터를 생성하면 \patches\package-name+version.patch 에 diff 가 파일로 저장된다.

Version rangeshttps://github.com/npm/node-semver#versions








version
명시한 버전과 일치


&gt;version
명시한 버전보다 높아야 함


&gt;=version
명시한 버전보다 높거나 같아야 함


&lt;version
명시한 버전보다 낮아야 함


&lt;=version
명시한 버전보다 낮거나 같아야 함


~version
명시한 버전과 근사한 버전


^version
명시한 버전과 호환되는 것


1.2.x
1.2.0, 1.2.1,.. (1.3.0 은 제외)


*
모든 버전


&quot;&quot;
모든 버전


version1 - version2
&gt;=version1 과 &lt;=version2 를 동시에 적용함


range1 ¦¦ range2
range1 또는 range2


npmrchttps://docs.npmjs.com/cli/v8/configuring-npm/npmrc
/.npmrcregistry=https://registry.navercorp.com/api/npm/npm-naver/strict-ssl=false
]]></content>
      <categories>
        <category>node</category>
        <category>npm</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>React JSX v18.2.0</title>
    <url>/react/jsx/</url>
    <content><![CDATA[
  https://ko.reactjs.org/docs/introducing-jsx.html


RulesReturn single elementreturn (  &lt;div&gt;    &lt;p&gt;abc&lt;/p&gt;    &lt;p&gt;def&lt;/p&gt;  &lt;/div&gt;);

return (  &lt;&gt;    &lt;p&gt;abc&lt;/p&gt;    &lt;p&gt;def&lt;/p&gt;  &lt;/&gt;);

import &#123; Fragment &#125; from &#x27;react&#x27;;return (  &lt;Fragment&gt;    &lt;p&gt;abc&lt;/p&gt;    &lt;p&gt;def&lt;/p&gt;  &lt;/Fragment&gt;);

Closed tag&lt;img src=&quot;./img/image.jpg&quot; alt=&quot;alt text&quot; /&gt;&lt;input type=&quot;text&quot; /&gt;&lt;br /&gt;

Single quoteconst title = &quot;Writer&#x27;s Comment&quot;;return (  &lt;div&gt;&#123; title &#125;&lt;/div&gt;);

&lt;div&gt;Writer&amp;rsquo;s Comment&lt;/div&gt;

&lt;div&gt; &#123; `Writer&#x27;s Comment` &#125; &lt;/div&gt;

Comment&lt;div  /* 주석 *//&gt;&#123;/* Todo: 주석 */&#125;

Attributesclass&lt;div className=&quot;abc&quot;&gt;&lt;/div&gt;

for&lt;label htmlFor=&quot;abc&quot;&gt;&lt;/label&gt;

tabindex&lt;input tabIndex=&quot;1&quot; /&gt;

readonly&lt;input readOnly=&#123; true &#125; /&gt;

StyleInline&lt;div style=&#123;&#123; display: &#x27;block&#x27;, backgroundColor: &#x27;#fff&#x27; &#125;&#125;&gt;&lt;/div&gt;

Objectrender() &#123;  const style = &#123;    display: &#x27;block&#x27;,    backgroundColor: &#x27;#fff&#x27;,  &#125;;  return (    &lt;div&gt;      &lt;p style=&#123; style &#125;&gt;text&lt;/p&gt;    &lt;/div&gt;  );&#125;

Form default valueinput&lt;input defaultValue=&#123; 1 &#125; /&gt;

textarea&lt;textarea defaultValue=&#123; 1 &#125; /&gt;

select&lt;select defaultValue=&quot;en&quot;&gt;  &lt;option value=&quot;en&quot;&gt;English&lt;/option&gt;  &lt;option value=&quot;ko&quot;&gt;한국어&lt;/option&gt;&lt;/select&gt;

checkbox&#x2F;radio&lt;input type=&quot;checkbox&quot; defaultChecked /&gt;
]]></content>
      <categories>
        <category>react</category>
        <category>jsx</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>React Events v18.2.0</title>
    <url>/react/events/</url>
    <content><![CDATA[
  https://ko.reactjs.org/docs/handling-events.html
  https://ko.reactjs.org/docs/events.html


Event typeClipboardhttps://ko.reactjs.org/docs/events.html#clipboard-events

  onCopy
  onCut
  onPaste


Compositionhttps://ko.reactjs.org/docs/events.html#composition-events

  onCompositionEnd
  onCompositionStart
  onCompositionUpdate


Keyboardhttps://ko.reactjs.org/docs/events.html#keyboard-events

  onKeyDown
  onKeyPress
  onKeyUp


Focushttps://ko.reactjs.org/docs/events.html#focus-events

  onFocus
  onBlur


const Function = () =&gt; &#123;  return (    &lt;div      tabIndex=&#123; 1 &#125;      onFocus=&#123; (event) =&gt; &#123;        if (event.currentTarget === event.target) &#123;          console.log(&#x27;focused self&#x27;);        &#125; else &#123;          console.log(&#x27;focused child&#x27;, event.target);        &#125;        if (!event.currentTarget.contains(event.relatedTarget)) &#123;          // Not triggered when swapping focus between children          console.log(&#x27;focus entered self&#x27;);        &#125;      &#125; &#125;      onBlur=&#123; (event) =&gt; &#123;        if (event.currentTarget === event.target) &#123;          console.log(&#x27;unfocused self&#x27;);        &#125; else &#123;          console.log(&#x27;unfocused child&#x27;, event.target);        &#125;        if (!event.currentTarget.contains(event.relatedTarget)) &#123;          // Not triggered when swapping focus between children          console.log(&#x27;focus left self&#x27;);        &#125;      &#125; &#125;    &gt;      &lt;input id=&quot;1&quot; /&gt;      &lt;input id=&quot;2&quot; /&gt;    &lt;/div&gt;  );&#125;;

Formhttps://ko.reactjs.org/docs/events.html#form-events

  onChange
  onInput
  onInvalid
  onReset
  onSubmit


Generichttps://ko.reactjs.org/docs/events.html#generic-events

  onError
  onLoad


Mousehttps://ko.reactjs.org/docs/events.html#mouse-events

  onClick
  onContextMenu
  onDoubleClick
  onDrag
  onDragEnd
  onDragEnter
  onDragExit
  onDragLeave
  onDragOver
  onDragStart
  onDrop
  onMouseDown
  onMouseEnter
  onMouseLeave
  onMouseMove
  onMouseOut
  onMouseOver
  onMouseUp


Pointerhttps://ko.reactjs.org/docs/events.html#pointer-events

  onPointerDown
  onPointerMove
  onPointerUp
  onPointerCancel
  onGotPointerCapture
  onLostPointerCapture
  onPointerEnter
  onPointerLeave
  onPointerOver
  onPointerOut


Selectionhttps://ko.reactjs.org/docs/events.html#selection-events

  onSelect


Touchhttps://ko.reactjs.org/docs/events.html#touch-events

  onTouchCancel
  onTouchEnd
  onTouchMove
  onTouchStart


UIhttps://ko.reactjs.org/docs/events.html#ui-events

  onScroll


Wheelhttps://ko.reactjs.org/docs/events.html#wheel-events

  onWheel


Mediahttps://ko.reactjs.org/docs/events.html#media-events

  onAbort
  onCanPlay
  onCanPlayThrough
  onDurationChange
  onEmptied
  onEncrypted
  onEnded
  onError
  onLoadedData
  onLoadedMetadata
  onLoadStart
  onPause
  onPlay
  onPlaying
  onProgress
  onRateChange
  onSeeked
  onSeeking
  onStalled
  onSuspend
  onTimeUpdate
  onVolumeChange
  onWaiting


Imagehttps://ko.reactjs.org/docs/events.html#image-events

  onLoad
  onError


Animationhttps://ko.reactjs.org/docs/events.html#animation-events

  onAnimationStart
  onAnimationEnd
  onAnimationIteration


Transitionhttps://ko.reactjs.org/docs/events.html#transition-events

  onTransitionEnd


Otherhttps://ko.reactjs.org/docs/events.html#other-events

  onToggle


Binding handlerUse case 1import &#123; Component &#125; from &#x27;react&#x27;;class Example extends Component &#123;  constructor(props) &#123;    super(props);    this.handleClick = this.handleClick.bind(this);  &#125;  handleClick(event) &#123;    console.log(this, event.target);  &#125;  render() &#123;    return (      &lt;button onClick=&#123; this.handleClick &#125;&gt;Button&lt;/button&gt;    );  &#125;&#125;

Use case 2import &#123; Component &#125; from &#x27;react&#x27;;class Example extends Component &#123;  handleClick(event) &#123;    console.log(this, event.target);  &#125;  render() &#123;    return (      &lt;button onClick=&#123; this.handleClick.bind(this) &#125;&gt;Button&lt;/button&gt;    );  &#125;&#125;

Use case 3import &#123; Component &#125; from &#x27;react&#x27;;class Example extends Component &#123;  handleClick(event) &#123;    console.log(this, event.target);  &#125;  render() &#123;    return (      &lt;button onClick=&#123; () =&gt; this.handleClick() &#125;&gt;Button&lt;/button&gt;    );  &#125;&#125;

Use case 4import &#123; Component &#125; from &#x27;react&#x27;;class Example extends Component &#123;  handleClick = (event) =&gt; &#123;    console.log(this, event.target);  &#125;  render() &#123;    return (      &lt;button onClick=&#123; this.handleClick &#125;&gt;Button&lt;/button&gt;    );  &#125;&#125;

Use case 5function Example() &#123;  const handleClick = (event) =&gt; &#123;    console.log(event.target);  &#125;;  return (    &lt;button onClick=&#123; handleClick &#125;&gt;Button&lt;/button&gt;  );&#125;


일반적으로 가장 많이 사용하는 방법이다.

]]></content>
      <categories>
        <category>react</category>
        <category>events</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack - Bundler v5.6.91</title>
    <url>/node/webpack/</url>
    <content><![CDATA[
  https://webpack.js.org/api


Setupnpm install --save-dev webpack

Configurationhttps://webpack.js.org/configuration
/package.json&quot;scripts&quot;: &#123;  &quot;start&quot;: &quot;webpack-dev-server --hot --config webpack/development.js&quot;,  &quot;dev&quot;: &quot;webpack --config webpack/development.js&quot;,  &quot;build&quot;: &quot;webpack --config webpack/production.js&quot;&#125;

Entry and Contexthttps://webpack.js.org/configuration/entry-context
/webpack.configconst path = require(&#x27;path&#x27;);module.exports = &#123;  context: path.resolve(__dirname, &#x27;app&#x27;),  entry: &#123;&#125;,&#125;;

Modehttps://webpack.js.org/configuration/mode
/package.jsonmodule.exports = &#123;  // &#x27;none&#x27;, &#x27;development&#x27;, &#x27;production&#x27;  mode: &#x27;development&#x27;,&#125;;

Outputhttps://webpack.js.org/configuration/output
/webpack.configmodule.exports = &#123;  output: &#123;&#125;,&#125;;

Modulehttps://webpack.js.org/configuration/module
/webpack.configmodule.exports = &#123;  module: &#123;&#125;,&#125;;

Resolvehttps://webpack.js.org/configuration/resolve
/webpack.configmodule.exports = &#123;  resolve: &#123;&#125;,&#125;;

Optimizationhttps://webpack.js.org/configuration/resolve
/webpack.configmodule.exports = &#123;  optimization: &#123;&#125;,&#125;;

Pluginshttps://webpack.js.org/configuration/plugins
/webpack.configmodule.exports = &#123;  plugins: [],&#125;;

DevServerhttps://webpack.js.org/configuration/dev-server
/webpack.configmodule.exports = &#123;  devServer: &#123;&#125;,&#125;;

proxyhttps://webpack.js.org/configuration/dev-server/#devserverproxy
/webpack.configmodule.exports = &#123;  devServer: &#123;    proxy: &#123;      &#x27;/api&#x27;: &#123; // 요청 URL 에 /api 가 있으면        target: &#x27;http://localhost:4000&#x27;, // 4000 프록시 서버에서 요청        // pathRewrite: &#123; &#x27;^/api&#x27;: &#x27;&#x27; &#125;, // URI 를 변경        // secure: false, // https 에서 유효하지 않는 인증서 실행        // changeOrigin: true, // 이름 기반 가상 호스팅에서 호스트 헤더의 출처를 재정의 함      &#125;,    &#125;,    // 여러 경로에 대한 요청    proxy: [      &#123;        context: [&#x27;/api&#x27;, &#x27;/auth&#x27;],        target: &#x27;http://localhost:4000&#x27;,      &#125;    ],    // 루트에 대한 요청은 기본적으로 프록시 되지 않기 때문에 옵션을 추가해야 함    devMiddleware: &#123;      index: false,    &#125;,    proxy: &#123;      context: () =&gt; true,      target: &#x27;http://localhost:4000&#x27;,    &#125;,  &#125;,&#125;;

Cachehttps://webpack.js.org/configuration/cache
/webpack.configmodule.exports = &#123;  cache: &#123;&#125;,&#125;;

Devtoolhttps://webpack.js.org/configuration/devtool
/package.jsonmodule.exports = &#123;  devtool: &#x27;&#x27;,&#125;;

Targethttps://webpack.js.org/configuration/target
/webpack.configmodule.exports = &#123;  target: [],&#125;;

Watch and WatchOptionshttps://webpack.js.org/configuration/watch
/webpack.configmodule.exports = &#123;  watch: true,  watchOptions: &#123;&#125;,&#125;;

Externalshttps://webpack.js.org/configuration/externals
/webpack.configmodule.exports = &#123;  externals: &#123;&#125;,&#125;;

Performancehttps://webpack.js.org/configuration/performance
/webpack.configmodule.exports = &#123;  performance: &#123;&#125;,&#125;;

Nodehttps://webpack.js.org/configuration/node
/webpack.configmodule.exports = &#123;  node: &#123;&#125;,&#125;;

Statshttps://webpack.js.org/configuration/stats
Experimentshttps://webpack.js.org/configuration/experiments
Other optionshttps://webpack.js.org/configuration/other-options
]]></content>
      <categories>
        <category>node</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>node</tag>
        <tag>bundler</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite - Bundler v2.8.4</title>
    <url>/node/vite/</url>
    <content><![CDATA[
  https://vitejs.dev/guide


Setupnpm create vite@latest

package.json&quot;scripts&quot;: &#123;  &quot;start&quot;: &quot;vite&quot;,  &quot;repack&quot;: &quot;vite --force&quot;,  &quot;build&quot;: &quot;vite build&quot;,  &quot;preview&quot;: &quot;vite preview&quot;&#125;,

Config filehttps://vitejs.dev/config/#config-file
Shared optionshttps://vitejs.dev/config/#shared-options
resolve.aliashttps://vitejs.dev/config/#resolve-alias
/vite.config.jsimport path from &#x27;path&#x27;;import &#123; defineConfig &#125; from &#x27;vite&#x27;;export default defineConfig(&#123;  resolve: &#123;    alias: &#123;      &#x27;@&#x27;: path.resolve(__dirname, &#x27;./src/&#x27;),    &#125;,  &#125;,&#125;;

css.modulehttps://vitejs.dev/config/#css-modules
/src/assets/scss/module.scss.color-red &#123;  color: red;&#125;

import &#123; colorRed &#125; from &#x27;./src/assets/scss/module.scss&#x27;;document.getElementById(&#x27;header&#x27;).className = colorRed;

css.preprocessorOptionshttps://vitejs.dev/config/#css-preprocessoroptions
npm install --save-dev sass

/vite.config.jsimport &#123; defineConfig &#125; from &#x27;vite&#x27;;export default defineConfig(&#123;  css: &#123;    preprocessorOptions: &#123;      scss: &#123;        additionalData: &#x27;@import &quot;./src/assets/scss/variables.scss&quot;;&#x27;,      &#125;,    &#125;,  &#125;,&#125;);

Server optionshttps://vitejs.dev/config/#server-options
server.host/vite.config.jsimport &#123; defineConfig &#125; from &#x27;vite&#x27;;export default defineConfig(&#123;  server: &#123;    host: &#x27;0.0.0.0&#x27;,  &#125;,&#125;);


기본적으로 localhost 만 허용하기 때문에 아이피 접속을 허용하려면 server.host 옵션을 추가해야 한다.

server.header/vite.config.jsimport &#123; defineConfig &#125; from &#x27;vite&#x27;;export default defineConfig(&#123;  server: &#123;    headers: &#123;      &#x27;Cross-Origin-Opener-Policy&#x27;: &#x27;same-origin&#x27;,      &#x27;Cross-Origin-Embedder-Policy&#x27;: &#x27;require-corp&#x27;,    &#125;,  &#125;,&#125;);

Build optionshttps://vitejs.dev/config/#build-options
Preview optionshttps://vitejs.dev/config/#preview-options
Dep optimization optionshttps://vitejs.dev/config/#dep-optimization-options
SSR optionshttps://vitejs.dev/config/#ssr-options
Worker optionshttps://vitejs.dev/config/#worker-options
HMRhttps://vitejs.dev/guide/api-hmr.html
Javascripthttps://vitejs.dev/guide/api-javascript.html
Pluginhttps://vitejs.dev/guide/api-plugin.htmlhttps://vitejs.dev/plugins
/vite.config.jsimport &#123; defineConfig &#125; from &#x27;vite&#x27;;import vue from &#x27;@vitejs/plugin-vue&#x27;;export default defineConfig(&#123;  plugins: [    vue(),  ],&#125;);
]]></content>
      <categories>
        <category>node</category>
        <category>vite</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>node</tag>
        <tag>bundler</tag>
      </tags>
  </entry>
  <entry>
    <title>React Lifecycle v18.2.0</title>
    <url>/react/lifecycle/</url>
    <content><![CDATA[
  https://ko.reactjs.org/docs/state-and-lifecycle.html
  https://ko.reactjs.org/docs/react-component.html




Mount
constructor()
static getDerivedStateFromProps()
render()
componentDidMount()

constructorhttps://ko.reactjs.org/docs/react-component.html#constructor
constructor(props) &#123;  super(props);  state = &#123; number: 0 &#125;;&#125;


생성자 메서드로서 컴포넌트가 처음 만들어 질 때 실행된다.기본 state 를 정할 수 있다.

getDerivedStateFromPropshttps://ko.reactjs.org/docs/react-component.html#static-getderivedstatefromprops
static getDerivedStateFromProps(nextProps, prevState) &#123;  if (nextProps.value !== prevState.value) &#123;    return &#123; value: nextProps.value &#125;;  &#125;  return null;&#125;


props 에 있는 값을 state 에 동기화 하는 메서드이다.컴포넌트를 마운트하거나 props 를 변경할 때 호출된다.

renderhttps://ko.reactjs.org/docs/react-component.html#render

UI 를 렌더링 하는 메서드이다.유일한 필수 메서드이며 이 메서드 안에서 절대로 state 값을 변경하거나 브라우저에 접근하면 안된다.

componentDidMounthttps://ko.reactjs.org/docs/react-component.html#componentdidmount
componentDidMount() &#123;  this.interval = window.setInterval(() =&gt; &#123;    this.setState(&#123; number: 10 &#125;);  &#125;, 1000);&#125;


컴포넌트가 만들어지고 첫 렌더링을 다 마친 후 실행된다.다른 자바스크립트 프레임워크를 연동하거나 이벤트 및 setTimeout, setInterval, 등 비동기 작업을 처리한다.DOM 정보를 가져오거나 변화를 줄 때 적절한 위치이다.

Update
static getDerivedStateFromProps()
shouldComponentUpdate()
render()
getSnapshotBeforeUpdate()
componentDidUpdate()


props 또는 state 가 바뀔 때, 부모 컴포넌트가 리렌더링될 때, this.forceUpdate() 메서드로 강제 렌더링할 때 호출한다.

getDerivedStateFromPropsView Mount getDerivedStateFromProps
shouldComponentUpdatehttps://ko.reactjs.org/docs/react-component.html#shouldcomponentupdate
shouldComponentUpdate (nextProps, nextState, nextContext): boolean &#123;  console.log(&#x27;App shouldComponentUpdate : $&#123;JSON.stringify(nextProps)&#125;, $&#123;JSON.stringify(nextState)&#125;&#x27;);  return nextState.number !== 5;&#125;


props 또는 state 가 변경 되었을 때 리렌더링을 할지 말지 정하는 메서드이다.

renderView Mount render
getSnapshotBeforeUpdatehttps://ko.reactjs.org/docs/react-component.html#getsnapshotbeforeupdate
getSnapshotBeforeUpdate (prevProps, prevState) &#123;  if (prevState.array !== this.state.array) &#123;    const &#123; scrollTop, scrollHeight &#125; = this.list;    return &#123; scrollTop, scrollHeight &#125;;  &#125;&#125;


render 메서드를 호출 한 후 컴포넌트 변화를 DOM 에 반영하기 바로 직전에 호출된다.주로 업데이트하기 직전의 값을 참고할 일이 있을 때 활용한다. (스크롤바의 위치 유지할 때 사용)반환하는 값은 componentDidUpdate 에서 세 번째 파라미터인 snapshot 값으로 전달 받는다.

componentDidUpdatehttps://ko.reactjs.org/docs/react-component.html#componentdidupdate
componentDidUpdate(prevProps, prevState, snapshot) &#123;  console.log(&#x27;componentDidUpdate&#x27;, prevProps, prevState, snapshot);&#125;


컴포넌트가 리렌더링을 마친 후 실행된다.getSnapshotBeforeUpdate 에서 반환한 값이 있다면 snapshot 값을 받는다.DOM 정보를 가져오거나 변화를 줄때 적절한 위치이다.

UnmountcomponentWillUnmounthttps://ko.reactjs.org/docs/react-component.html#componentwillunmount
componentWillUnmount() &#123;  clearInterval(this.interval);&#125;


컴포넌트가 DOM 에서 사라진 후 실행된다.componentDidMount 에서 등록한 이벤트 및 setInterval 을 제거한다.

HookuseEffecthttps://en.reactjs.org/docs/hooks-effect.html
useEffect(() =&gt; &#123;  console.log(&#x27;mount&#x27;);&#125;, []);useEffect(() =&gt; &#123;  return () =&gt; &#123;    console.log(&#x27;unmount&#x27;);  &#125;&#125;, []);useEffect(() =&gt; &#123;  console.log(&#x27;data update&#x27;);  return () =&gt; &#123;    console.log(&#x27;data unmount&#x27;);  &#125;&#125;, [data]);useEffect(() =&gt; &#123;  console.log(&#x27;any update&#x27;);&#125;);
]]></content>
      <categories>
        <category>react</category>
        <category>lifecycle</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>lifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>React Props v18.2.0</title>
    <url>/react/props/</url>
    <content><![CDATA[
  https://ko.reactjs.org/docs/typechecking-with-proptypes.html


Function componentimport PropTypes from &#x27;prop-types&#x27;;const Function = (props) =&gt; &#123;  const &#123; name &#125; = props;  return (    &lt;div&gt;&#123;name&#125;&lt;/div&gt;  );&#125;;Function.propTypes = &#123;  name: PropTypes.string,&#125;;Function.defaultProps = &#123;  name: &#x27;&#x27;,&#125;;

Class componentimport &#123; Component &#125; from &#x27;react&#x27;;import PropTypes from &#x27;prop-types&#x27;;class Example extends Component &#123;  static propTypes = &#123;    name: PropTypes.string,  &#125;;  static defaultProps = &#123;    name: &#x27;&#x27;,  &#125;;  render() &#123;    const &#123; name &#125; = this.props;    return (      &lt;div&gt;&#123; name &#125; / &#123; age &#125;&lt;/div&gt;    );  &#125;&#125;
]]></content>
      <categories>
        <category>react</category>
        <category>props</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>React Ref v18.2.0</title>
    <url>/react/ref/</url>
    <content><![CDATA[
  https://ko.reactjs.org/docs/refs-and-the-dom.html


Function componentimport &#123; useRef &#125; from &#x27;react&#x27;;function Example() &#123;  const inputElement = useRef(null);  const focus = () =&gt; &#123;    inputElement.current.focus();  &#125;  return (    &lt;div&gt;      &lt;input ref=&#123; inputElement &#125; /&gt;      &lt;button onClick=&#123; focus &#125;&gt;Button&lt;/button&gt;    &lt;/div&gt;  );&#125;

Class componentimport &#123; Component, createRef &#125; from &#x27;react&#x27;;class Example extends Component &#123;  inputElement = createRef();  focus() &#123;    this.inputElement.current.focus();  &#125;  render() &#123;    return (      &lt;div&gt;        &lt;input ref=&#123; this.inputElement &#125; /&gt;        &lt;button onClick=&#123; this.focus &#125;&gt;Button&lt;/button&gt;      &lt;/div&gt;    );  &#125;&#125;
]]></content>
      <categories>
        <category>react</category>
        <category>ref</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>React Redux v7.2.6</title>
    <url>/react/redux/</url>
    <content><![CDATA[
  https://ko.redux.js.org/introduction/getting-started


Modulesredux (required)https://github.com/reduxjs/redux

상태관리를 위한 자바스크립트 모듈이다.

react-redux (required)https://github.com/reduxjs/react-redux

react 에서 redux 를 쉽게 사용하도록 바인딩 해주는 모듈이다.

redux-actions (recommend)https://github.com/redux-utilities/redux-actions
Beforeconst INCREMENT = &#x27;counter/INCREMENT&#x27;;export const increment = (number) =&gt; (&#123; type: INCREMENT, number &#125;);const initialState = &#123;  count: 0,&#125;;export const reducer = (state = initialState, action) =&gt; &#123;  const &#123; count &#125; = state;  const &#123; number &#125; = action;  switch (action.type) &#123;    case INCREMENT:      return &#123;        ...state,        count: count + number,      &#125;;    default:      return state;  &#125;&#125;;

Afterimport &#123; createAction, handleActions &#125; from &#x27;redux-actions&#x27;;const INCREMENT = &#x27;counter/INCREMENT&#x27;;export const increment = createAction(INCREMENT);const initialState = &#123;  count: 0,&#125;;export default handleActions(&#123;  [INCREMENT]: (state, action) =&gt; &#123;    return &#123;      count: state.count + action.payload,    &#125;;  &#125;,&#125;, initialState);


액션과 리듀서를 간결하게 만들 수 있도록 해주는 모듈이다.

typesafe-actionshttps://github.com/piotrwitek/typesafe-actions

타입스크립트에서 redux-actions 보다 사용성이 좋은 모듈이다.

import &#123; action, ActionType, createReducer &#125; from &#x27;typesafe-actions&#x27;;export const INCREMENT = &#x27;counter/INCREMENT&#x27;;export const increment = () =&gt; action(INCREMENT);export const actionCreator = &#123;  onIncrement,&#125;;export interface CounterState &#123;  count: number;&#125;export type CounterAction = ActionType&lt;typeof actionCreator&gt;;const initialState: CounterState = &#123;  count: 0,&#125;;export default createReducer&lt;CounterState, CounterAction&gt;(initialState, &#123;  [INCREMENT]: (state) =&gt; &#123;    return &#123;      ...state,      counter: state.count + 1,    &#125;;  &#125;,&#125;);

redux-thunkhttps://github.com/reduxjs/redux-thunk

비동기 작업을 처리 할 때 사용하는 미들웨어 모듈이다.

redux-sagahttps://github.com/redux-saga/redux-saga

액션을 모니터링 하면서 특정 액션이 발생하면 특정 작업을 하도록 해주는 미들웨어 모듈이다.

redux-penderhttps://github.com/velopert/redux-pender

프로미스 기반 액션을 관리하기 위한 미들웨어 모듈이다.payload 에 프로미스가 있으면 PENDING, SUCCESS, FAILURE 접미사를 붙여준다.

redux-devtools (recommend)https://github.com/reduxjs/redux-devtools

크롬 개발자도구에서 디버그할 수 있도록 해주는 모듈이다.

redux-loggerhttps://github.com/LogRocket/redux-logger

콘솔에 로그를 표시하는 모듈이다.

Use case 1Setupnpm install --save redux react-redux @redux-devtools/extension

Provider/index.jsimport ReactDOM from &#x27;react-dom&#x27;;import &#123; createStore &#125; from &#x27;redux&#x27;;import &#123; Provider &#125; from &#x27;react-redux&#x27;;import &#123; reducer &#125; from &#x27;./store&#x27;;import &#123; composeWithDevTools &#125; from &#x27;@redux-devtools/extension&#x27;;import CounterContainer from &#x27;./containers/Counter&#x27;;const store = createStore(reducer, composeWithDevTools());ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;)).render(  &lt;Provider store=&#123;store&#125;&gt;    &lt;CounterContainer /&gt;  &lt;/Provider&gt;);

Store/store/index.js// action typesconst INCREMENT = &#x27;INCREMENT&#x27;;const DECREMENT = &#x27;DECREMENT&#x27;;// action creatorsexport const increment = (number) =&gt; (&#123;  type: INCREMENT,  number,&#125;);export const decrement = (number) =&gt; (&#123;  type: DECREMENT,  number,&#125;);// initial stateconst initialState = &#123;  count: 0,&#125;;// reducerexport const reducer = (state = initialState, action) =&gt; &#123;  const &#123; count &#125; = state;  const &#123; number &#125; = action;  switch (action.type) &#123;    case INCREMENT:      return &#123;        ...state,        count: count + number,      &#125;;    case DECREMENT:      return &#123;        ...state,        count: count - number,      &#125;;    default:      return state;  &#125;&#125;;

Container/containers/Counter.jsimport &#123; connect &#125; from &#x27;react-redux&#x27;;import &#123; increment, decrement &#125; from &#x27;../store&#x27;;import Counter from &#x27;../components/Counter&#x27;;const mapStateToProps = (state) =&gt; (&#123;  count: state.count,&#125;);const mapDispatchToProps = (dispatch) =&gt; (&#123;  onIncrement: (number) =&gt; dispatch(increment(number)),  onDecrement: (number) =&gt; dispatch(decrement(number)),&#125;);export default connect(mapStateToProps, mapDispatchToProps)(Counter);

Component/components/Counter.jsimport PropTypes from &#x27;prop-types&#x27;;const Counter = (&#123; count, onIncrement, onDecrement &#125;) =&gt; &#123;  return (    &lt;div&gt;      &lt;div&gt;&#123; count &#125;&lt;/div&gt;      &lt;button onClick=&#123; () =&gt; onIncrement(1) &#125;&gt;Increment&lt;/button&gt;      &lt;button onClick=&#123; () =&gt; onDecrement(1) &#125;&gt;Decrement&lt;/button&gt;    &lt;/div&gt;  );&#125;;Counter.propTypes = &#123;  count: PropTypes.number,  onIncrement: PropTypes.func,  onDecrement: PropTypes.func,&#125;;Counter.defaultProps = &#123;  count: 0,  onIncrement: () =&gt; console.warn(&#x27;onIncrement not defined&#x27;),  onDecrement: () =&gt; console.warn(&#x27;onDecrement not defined&#x27;),&#125;;export default Counter;

Use case 2Setupnpm install --save redux react-redux @redux-devtools/extension redux-actions

Provider/index.jsimport ReactDOM from &#x27;react-dom&#x27;;import &#123; createStore &#125; from &#x27;redux&#x27;;import &#123; Provider &#125; from &#x27;react-redux&#x27;;import store from &#x27;./store&#x27;;import &#123; composeWithDevTools &#125; from &#x27;@redux-devtools/extension&#x27;;import CounterContainer from &#x27;./containers/Counter&#x27;;ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;)).render(  &lt;Provider store=&#123; createStore(store, composeWithDevTools()) &#125;&gt;    &lt;CounterContainer /&gt;  &lt;/Provider&gt;);

Store/store/index.jsimport &#123; combineReducers &#125; from &#x27;redux&#x27;;import counter from &#x27;./counter&#x27;;export default combineReducers(&#123;  counter,&#125;);

/store/counter.jsimport &#123; createAction, handleActions &#125; from &#x27;redux-actions&#x27;;// action typesconst INCREMENT = &#x27;counter/INCREMENT&#x27;;const DECREMENT = &#x27;counter/DECREMENT&#x27;;// action creatorsexport const increment = createAction(INCREMENT);export const decrement = createAction(DECREMENT);// initial stateconst initialState = &#123;  count: 0,&#125;;// reducerexport default handleActions(&#123;  [INCREMENT]: (state, action) =&gt; &#123;    return &#123; count: state.count + action.payload &#125;;  &#125;,  [DECREMENT]: (state, action) =&gt; &#123;    return &#123; count: state.count - action.payload &#125;;  &#125;,&#125;, initialState);

Container/containers/Counter.jsimport &#123; connect &#125; from &#x27;react-redux&#x27;;import &#123; bindActionCreators &#125; from &#x27;redux&#x27;;import * as counterActions from &#x27;../store/counter&#x27;;import CounterComponent from &#x27;../components/Counter&#x27;;const mapStateToProps = (state) =&gt; (&#123;  count: state.counter.count,&#125;);const mapDispatchToProps = (dispatch) =&gt; (&#123;  onIncrement: bindActionCreators(counterActions.increment, dispatch),  onDecrement: bindActionCreators(counterActions.decrement, dispatch),&#125;);export default connect(mapStateToProps, mapDispatchToProps)(CounterComponent);

Component/components/Counter.jsimport PropTypes from &#x27;prop-types&#x27;;const Counter = (&#123; count, onIncrement, onDecrement &#125;) =&gt; &#123;  return (    &lt;div&gt;      &lt;div&gt;&#123; count &#125;&lt;/div&gt;      &lt;button onClick=&#123; () =&gt; onIncrement(1) &#125;&gt;Increment&lt;/button&gt;      &lt;button onClick=&#123; () =&gt; onDecrement(1) &#125;&gt;Decrement&lt;/button&gt;    &lt;/div&gt;  );&#125;;Counter.propTypes = &#123;  count: PropTypes.number,  onIncrement: PropTypes.func,  onDecrement: PropTypes.func,&#125;;Counter.defaultProps = &#123;  count: 0,  onIncrement: () =&gt; console.warn(&#x27;onIncrement not defined&#x27;),  onDecrement: () =&gt; console.warn(&#x27;onDecrement not defined&#x27;),&#125;;export default Counter;

Use case 3Setupnpm install --save redux react-redux @redux-devtools/extension redux-actions redux-logger

Provider/index.jsimport ReactDOM from &#x27;react-dom&#x27;;import &#123; Provider &#125; from &#x27;react-redux&#x27;;import store from &#x27;./store&#x27;;import CounterContainer from &#x27;./containers/Counter&#x27;;ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;)).render(  &lt;Provider store=&#123;store&#125;&gt;    &lt;CounterContainer /&gt;  &lt;/Provider&gt;);

Store/store/index.jsimport &#123; createStore, applyMiddleware, combineReducers &#125; from &#x27;redux&#x27;;import &#123; composeWithDevTools &#125; from &#x27;@redux-devtools/extension&#x27;;import &#123; createLogger &#125; from &#x27;redux-logger&#x27;;import * as modules from &#x27;./modules&#x27;;const reducers = combineReducers(modules);const store = createStore(  reducers,  composeWithDevTools(    applyMiddleware(      createLogger(),    ),  ),);export default store;

/store/modules/index.jsexport &#123; default as counter &#125; from &#x27;./counter&#x27;;

/store/modules/counter.jsimport &#123; createAction, handleActions &#125; from &#x27;redux-actions&#x27;;// action typesconst INCREMENT = &#x27;counter/INCREMENT&#x27;;const DECREMENT = &#x27;counter/DECREMENT&#x27;;// action creatorsexport const increment = createAction(INCREMENT);export const decrement = createAction(DECREMENT);// initial stateconst initialState = &#123;  count: 0,&#125;;// reducerexport default handleActions(&#123;  [INCREMENT]: (state, action) =&gt; &#123;    return &#123; count: state.count + action.payload &#125;;  &#125;,  [DECREMENT]: (state, action) =&gt; &#123;    return &#123; count: state.count - action.payload &#125;;  &#125;,&#125;, initialState);

Container/containers/Counter.jsimport &#123; connect &#125; from &#x27;react-redux&#x27;;import &#123; bindActionCreators &#125; from &#x27;redux&#x27;;import * as counterActions from &#x27;../store/modules/counter&#x27;;import CounterComponent from &#x27;../components/Counter&#x27;;const mapStateToProps = (state) =&gt; (&#123;  count: state.counter.count,&#125;);const mapDispatchToProps = (dispatch) =&gt; (&#123;  onIncrement: bindActionCreators(counterActions.increment, dispatch),  onDecrement: bindActionCreators(counterActions.decrement, dispatch),&#125;);export default connect(mapStateToProps, mapDispatchToProps)(CounterComponent);

Component/components/Counter.jsimport PropTypes from &#x27;prop-types&#x27;;const Counter = (&#123; count, onIncrement, onDecrement &#125;) =&gt; &#123;  return (    &lt;div&gt;      &lt;div&gt;&#123; count &#125;&lt;/div&gt;      &lt;button onClick=&#123; () =&gt; onIncrement(1) &#125;&gt;Increment&lt;/button&gt;      &lt;button onClick=&#123; () =&gt; onDecrement(1) &#125;&gt;Decrement&lt;/button&gt;    &lt;/div&gt;  );&#125;;Counter.propTypes = &#123;  count: PropTypes.number,  onIncrement: PropTypes.func,  onDecrement: PropTypes.func,&#125;;Counter.defaultProps = &#123;  count: 0,  onIncrement: () =&gt; console.warn(&#x27;onIncrement not defined&#x27;),  onDecrement: () =&gt; console.warn(&#x27;onDecrement not defined&#x27;),&#125;;export default Counter;

Use case 4Setupnpm install --save redux react-redux @redux-devtools/extension redux-actions redux-logger immutable

Provider/index.jsimport ReactDOM from &#x27;react-dom&#x27;;import &#123; Provider &#125; from &#x27;react-redux&#x27;;import store from &#x27;./store&#x27;;import CounterContainer from &#x27;./containers/Counter&#x27;;ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;)).render(  &lt;Provider store=&#123;store&#125;&gt;    &lt;CounterContainer /&gt;  &lt;/Provider&gt;);

Store/store/index.jsimport &#123; createStore, applyMiddleware, combineReducers &#125; from &#x27;redux&#x27;;import &#123; composeWithDevTools &#125; from &#x27;@redux-devtools/extension&#x27;;import &#123; createLogger &#125; from &#x27;redux-logger&#x27;;import * as modules from &#x27;./modules&#x27;;const reducers = combineReducers(modules);const store = createStore(  reducers,  composeWithDevTools(    applyMiddleware(      createLogger(),    ),  ),);export default store;

/store/modules/index.jsexport &#123; default as counter &#125; from &#x27;./counter&#x27;;

/store/modules/counter.jsimport &#123; createAction, handleActions &#125; from &#x27;redux-actions&#x27;;import &#123; Map &#125; from &#x27;immutable&#x27;;// action typesconst INCREMENT = &#x27;counter/INCREMENT&#x27;;const DECREMENT = &#x27;counter/DECREMENT&#x27;;// action creatorsexport const increment = createAction(INCREMENT);export const decrement = createAction(DECREMENT);// initial stateconst initialState = Map(&#123;  count: 0,&#125;);// reducerexport default handleActions(&#123;  [INCREMENT]: (state, action) =&gt; state.set(&#x27;count&#x27;, state.get(&#x27;count&#x27;) + action.payload),  [DECREMENT]: (state, action) =&gt; state.set(&#x27;count&#x27;, state.get(&#x27;count&#x27;) - action.payload),&#125;, initialState);

Container/containers/Counter.jsimport &#123; connect &#125; from &#x27;react-redux&#x27;;import &#123; bindActionCreators &#125; from &#x27;redux&#x27;;import * as counterActions from &#x27;../store/modules/counter&#x27;;import CounterComponent from &#x27;../components/Counter&#x27;;const mapStateToProps = (state) =&gt; (&#123;  count: state.counter.get(&#x27;count&#x27;),&#125;);const mapDispatchToProps = (dispatch) =&gt; (&#123;  onIncrement: bindActionCreators(counterActions.increment, dispatch),  onDecrement: bindActionCreators(counterActions.decrement, dispatch),&#125;);export default connect(mapStateToProps, mapDispatchToProps)(CounterComponent);

Component/components/Counter.jsimport PropTypes from &#x27;prop-types&#x27;;const Counter = (&#123; count, onIncrement, onDecrement &#125;) =&gt; &#123;  return (    &lt;div&gt;      &lt;div&gt;&#123; count &#125;&lt;/div&gt;      &lt;button onClick=&#123; () =&gt; onIncrement(1) &#125;&gt;Increment&lt;/button&gt;      &lt;button onClick=&#123; () =&gt; onDecrement(1) &#125;&gt;Decrement&lt;/button&gt;    &lt;/div&gt;  );&#125;;Counter.propTypes = &#123;  count: PropTypes.number,  onIncrement: PropTypes.func,  onDecrement: PropTypes.func,&#125;;Counter.defaultProps = &#123;  count: 0,  onIncrement: () =&gt; console.warn(&#x27;onIncrement not defined&#x27;),  onDecrement: () =&gt; console.warn(&#x27;onDecrement not defined&#x27;),&#125;;export default Counter;

Use case 5Setupnpm install --save redux react-redux @redux-devtools/extension redux-actions redux-logger immutable axios redux-pender

Provider/index.jsimport ReactDOM from &#x27;react-dom&#x27;;import &#123; Provider &#125; from &#x27;react-redux&#x27;;import store from &#x27;./store&#x27;;import PostContainer from &#x27;./containers/Post&#x27;;ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;)).render(  &lt;Provider store=&#123;store&#125;&gt;    &lt;PostContainer /&gt;  &lt;/Provider&gt;);

Store/store/index.jsimport &#123; createStore, applyMiddleware, combineReducers &#125; from &#x27;redux&#x27;;import &#123; composeWithDevTools &#125; from &#x27;@redux-devtools/extension&#x27;;import penderMiddleware from &#x27;redux-pender&#x27;;import &#123; createLogger &#125; from &#x27;redux-logger&#x27;;import * as modules from &#x27;./modules&#x27;;const reducers = combineReducers(modules);const store = createStore(  reducers,  composeWithDevTools(    applyMiddleware(      penderMiddleware(),      createLogger(),    ),  ),);export default store;

/store/modules/index.jsexport &#123; penderReducer as pender &#125; from &#x27;redux-pender&#x27;;export &#123; default as counter &#125; from &#x27;./counter&#x27;;

/store/modules/post.jsimport &#123; createAction, handleActions &#125; from &#x27;redux-actions&#x27;;import &#123; pender &#125; from &#x27;redux-pender&#x27;;import axios from &#x27;axios&#x27;;// action typesconst GET = &#x27;post/GET&#x27;;// action creatorsexport const get = createAction(GET, (id) =&gt; axios.get(`https://jsonplaceholder.typicode.com/posts/$&#123;id&#125;`));// initial stateconst initialState = &#123;  title: &#x27;&#x27;,  body: &#x27;&#x27;,&#125;;// reducerexport default handleActions(&#123;  ...pender(&#123;    type: GET,    onSuccess: (state, action) =&gt; &#123;      const &#123; title, body &#125; = action.payload.data;      return &#123; title, body &#125;;    &#125;,    onCancel: () =&gt; &#123;      return &#123; title: &#x27;Cancel&#x27;, body: &#x27;Cancel&#x27; &#125;;    &#125;  &#125;),&#125;, initialState);

Container/containers/Post.jsimport &#123; connect &#125; from &#x27;react-redux&#x27;;import &#123; bindActionCreators &#125; from &#x27;redux&#x27;;import * as postActions from &#x27;../store/modules/post&#x27;;import PostComponent from &#x27;../components/Post&#x27;;const mapStateToProps = (&#123; post, pender &#125;) =&gt; (&#123;  postStates: post,  loading: pender.pending[&#x27;GET&#x27;],  error: pender.failure[&#x27;GET&#x27;]&#125;);const mapDispatchToProps = (dispatch) =&gt; (&#123;  getPost: bindActionCreators(postActions.get, dispatch),&#125;);export default connect(mapStateToProps, mapDispatchToProps)(PostComponent);

Component/components/Post.jsimport &#123; Component &#125; from &#x27;react&#x27;;import PropTypes from &#x27;prop-types&#x27;;class Post extends Component &#123;  static propTypes = &#123;    postStates: PropTypes.object,    loading: PropTypes.bool,    error: PropTypes.bool,    getPost: PropTypes.func,  &#125;;  state = &#123;    id: 1,  &#125;;  cancelRequest = null;  componentDidMount() &#123;    this.getPost();    window.addEventListener(&#x27;keyup&#x27;, (event) =&gt; &#123;      if (event.key === &#x27;Escape&#x27;) &#123;        this.handleCancel();      &#125;    &#125;);  &#125;  componentDidUpdate(prevProps, prevState) &#123;    if (this.state.id !== prevState.id) &#123;      this.getPost();    &#125;  &#125;  getPost = async () =&gt; &#123;    const &#123; id &#125; = this.state;    const &#123; getPost &#125; = this.props;    try &#123;      const promise = getPost(id);      this.cancelRequest = promise.cancel;      const response = await promise;      console.log(response);    &#125; catch (error) &#123;      console.log(error);    &#125;  &#125;;  handleCancel = () =&gt; &#123;    if (this.cancelRequest) &#123;      this.cancelRequest();      this.cancelRequest = null;    &#125;  &#125;;  render() &#123;    const &#123; id &#125; = this.state;    const &#123; postStates, loading, error &#125; = this.props;    const &#123; title, body &#125; = postStates;    return (      &lt;div&gt;        &lt;button onClick=&#123; () =&gt; &#123; this.setState(&#123; id: id - 1 &#125;); &#125; &#125;&gt;Prev&lt;/button&gt;        &lt;button onClick=&#123; () =&gt; &#123; this.setState(&#123; id: id + 1 &#125;); &#125; &#125;&gt;Next&lt;/button&gt;        &#123; (() =&gt; &#123;          if (loading) return &lt;h2&gt;Loading&lt;/h2&gt;;          if (error) return &lt;h2&gt;Error&lt;/h2&gt;;          return (            &lt;div&gt;              &lt;h2&gt;&#123; title &#125;&lt;/h2&gt;              &lt;p&gt;&#123; body &#125;&lt;/p&gt;            &lt;/div&gt;          );        &#125;)() &#125;      &lt;/div&gt;    );  &#125;&#125;export default Post;

Use case 6Setupnpm install --save redux react-redux redux-actions redux-saga typesafe-actions redux-logger @redux-devtools/extension axios js-cookie

Provider/index.jsimport &#123; StrictMode &#125; from &#x27;react&#x27;;import &#123; createRoot &#125; from &#x27;react-dom/client&#x27;;import &#123; Provider &#125; from &#x27;react-redux&#x27;;import store from &#x27;./store&#x27;;import &#123; setAccessToken &#125; from &#x27;./store/auth&#x27;;import client from &#x27;./axios/client&#x27;;import Cookies from &#x27;js-cookie&#x27;;import App from &#x27;./App&#x27;;const savedToken = Cookies.get(&#x27;accessToken&#x27;);if (savedToken) &#123;  store.dispatch(setAccessToken(savedToken));  client.defaults.headers.common.Authorization = `Bearer $&#123;savedToken&#125;`;&#125;createRoot(document.getElementById(&#x27;root&#x27;)).render(  &lt;StrictMode&gt;    &lt;Provider store=&#123; store &#125;&gt;      &lt;App /&gt;    &lt;/Provider&gt;  &lt;/StrictMode&gt;);

App/App.jsimport SignInContainer from &#x27;./containers/auth/SignIn&#x27;;import PostListContainer from &#x27;./containers/post/List&#x27;;export default function App() &#123;  return (    &lt;div&gt;      &lt;SignInContainer /&gt;      &lt;PostListContainer /&gt;    &lt;/div&gt;  );&#125;

Store/store/index.jsimport &#123; createStore, applyMiddleware, combineReducers &#125; from &#x27;redux&#x27;;import createSagaMiddleware from &#x27;redux-saga&#x27;;import &#123; all &#125; from &#x27;redux-saga/effects&#x27;;import &#123; createLogger &#125; from &#x27;redux-logger&#x27;;import &#123; composeWithDevTools &#125; from &#x27;@redux-devtools/extension&#x27;;import loading from &#x27;./loading&#x27;;import auth, &#123; authSaga &#125; from &#x27;./auth&#x27;;import post, &#123; postSaga &#125; from &#x27;./post&#x27;;const sagaMiddleware = createSagaMiddleware();const store = createStore(  combineReducers(&#123;    loading,    auth,    post,  &#125;),  composeWithDevTools(    applyMiddleware(      sagaMiddleware,      createLogger(),    ),  ),);function* rootSaga() &#123;  yield all([    authSaga(),    postSaga(),  ]);&#125;sagaMiddleware.run(rootSaga);export default store;

/store/loading.jsimport &#123; createAction &#125; from &#x27;redux-actions&#x27;;import &#123; createReducer &#125; from &#x27;typesafe-actions&#x27;;const START_LOADING = &#x27;loading/START_LOADING&#x27;;const END_LOADING = &#x27;loading/END_LOADING&#x27;;export const startLoading = createAction(START_LOADING, (actionType) =&gt; actionType);export const endLoading = createAction(END_LOADING, (actionType) =&gt; actionType);const initialState = &#123;&#125;;const loading = createReducer(initialState, &#123;  [START_LOADING]: (state, action) =&gt; (&#123;    ...state,    [action.payload]: true,  &#125;),  [END_LOADING]: (state, action) =&gt; (&#123;    ...state,    [action.payload]: false,  &#125;),&#125;);export default loading;

/store/auth.jsimport &#123; createAction &#125; from &#x27;redux-actions&#x27;;import &#123; createReducer &#125; from &#x27;typesafe-actions&#x27;;import &#123; takeLatest, call, put &#125; from &#x27;redux-saga/effects&#x27;;import * as api from &#x27;../axios/api&#x27;;import client from &#x27;../axios/client&#x27;;const LOGIN = &#x27;auth/LOGIN&#x27;;const SET_ACCESS_TOKEN = &#x27;auth/SET_ACCESS_TOKEN&#x27;;export const login = createAction(LOGIN, (&#123; userId, userPw &#125;) =&gt; (&#123; userId, userPw &#125;));export const setAccessToken = createAction(SET_ACCESS_TOKEN, (accessToken) =&gt; accessToken);function* loginSaga(action) &#123;  try &#123;    const &#123; userId, userPw &#125; = action.payload;    const response = yield call(api.signIn, userId, userPw);    const &#123; authorization &#125; = response.headers;    const accessToken = authorization.substring(7);    yield put(setAccessToken(accessToken));    client.defaults.headers.common.Authorization = `Bearer $&#123; accessToken &#125;`;  &#125; catch (error) &#123;    console.log(error);  &#125;&#125;export function* authSaga() &#123;  yield takeLatest(LOGIN, loginSaga);&#125;const initialState = &#123;  accessToken: &#x27;&#x27;,&#125;;export default createReducer(initialState, &#123;  [SET_ACCESS_TOKEN]: (state, action) =&gt; (&#123;    ...state,    accessToken: action.payload,  &#125;),&#125;);

/store/post.jsimport &#123; createAction &#125; from &#x27;redux-actions&#x27;;import &#123; createReducer &#125; from &#x27;typesafe-actions&#x27;;import &#123; takeLatest &#125; from &#x27;redux-saga/effects&#x27;;import createRequestSaga from &quot;../axios/createRequestSaga&quot;;import * as api from &#x27;../axios/api&#x27;;export const GET_POST = &#x27;post/GET_POST&#x27;;const GET_POST_SUCCESS = &#x27;post/GET_POST_SUCCESS&#x27;;const GET_POST_FAILURE = &#x27;post/GET_POST_FAILURE&#x27;;export const getPost = createAction(GET_POST);const getPostSaga = createRequestSaga(GET_POST, api.getPost);export function* postSaga() &#123;  yield takeLatest(GET_POST, getPostSaga);&#125;const initialState = &#123;  title: null,  body: null,  error: null,&#125;;const post = createReducer(initialState, &#123;  [GET_POST]: (state) =&gt; (&#123;    ...state,    title: null,    body: null,  &#125;),  [GET_POST_SUCCESS]: (state, action) =&gt; (&#123;    ...state,    title: action.payload.title,    body: action.payload.body,  &#125;),  [GET_POST_FAILURE]: (state, action) =&gt; (&#123;    ...state,    error: action.payload,  &#125;),&#125;);export default post;

Axios/axios/client.jsimport axios from &#x27;axios&#x27;;const client = axios.create();export default client;

/axios/api.jsimport client from &#x27;./client&#x27;;export const signIn = (userId, userPw) =&gt; client.post(`/api/authenticate?username=$&#123; userId &#125;&amp;password=$&#123; userPw &#125;`);export const getPost = (id) =&gt; client.get(`https://jsonplaceholder.typicode.com/posts/$&#123; id &#125;`);

/axios/createRequestSaga.jsimport &#123; createAction &#125; from &#x27;redux-actions&#x27;;import &#123; call, put &#125; from &#x27;redux-saga/effects&#x27;;import &#123; startLoading, endLoading &#125; from &#x27;../store/loading&#x27;;export default function createRequestSaga(type, request) &#123;  const CALL_SUCCESS = `$&#123; type &#125;_SUCCESS`;  const CALL_FAILURE = `$&#123; type &#125;_FAILURE`;    const callSuccess = createAction(CALL_SUCCESS, (data) =&gt; data);  const callFailure = createAction(CALL_FAILURE, (error) =&gt; error);    return function*(action) &#123;    yield put(startLoading(type));    try &#123;      const response  = yield call(request, action.payload);      yield put(callSuccess(response.data));    &#125; catch (error) &#123;      yield put(callFailure(error));    &#125;    yield put(endLoading(type));  &#125;;&#125;

Container/containers/auth/SignIn.jsimport &#123; useEffect &#125; from &#x27;react&#x27;;import &#123; useDispatch, useSelector &#125; from &#x27;react-redux&#x27;;import &#123; login &#125; from &#x27;../../store/auth&#x27;;import AuthSignInComponent from &#x27;../../components/auth/SignIn&#x27;;export default function AuthSignInContainer() &#123;  const dispatch = useDispatch();  const &#123; accessToken &#125; = useSelector((&#123; auth &#125;) =&gt; (&#123;    accessToken: auth.accessToken,  &#125;));  const onSignIn = (userId, userPw) =&gt; &#123;    try &#123;      dispatch(login(&#123; userId, userPw &#125;));    &#125; catch (error) &#123;      console.log(error);    &#125;  &#125;;  useEffect(() =&gt; &#123;    if (accessToken) &#123;      console.log(accessToken);    &#125;  &#125;, [accessToken, dispatch]);  return &lt;AuthSignInComponent onSignIn=&#123; onSignIn &#125; /&gt;;&#125;

/containers/post/List.jsimport &#123; useState, useEffect &#125; from &#x27;react&#x27;;import &#123; useDispatch, useSelector &#125; from &#x27;react-redux&#x27;;import &#123; getPost, GET_POST &#125; from &#x27;../../store/post&#x27;;import PostListComponent from &#x27;../../components/post/List&#x27;;export default function PostListContainer() &#123;  const dispatch = useDispatch();    const [postId, setPostId] = useState(5);    const &#123; post, isLoading &#125; = useSelector((&#123; loading, post &#125;) =&gt; (&#123;    post: &#123;      title: post.title,      body: post.body,    &#125;,    isLoading: loading[GET_POST],  &#125;));    useEffect(() =&gt; &#123;    dispatch(getPost(postId));  &#125;, [dispatch, postId]);    return (    &lt;div&gt;      &lt;PostListComponent isLoading=&#123; isLoading &#125; post=&#123; post &#125; /&gt;      &lt;button onClick=&#123; () =&gt; setPostId(postId - 1) &#125;&gt;Prev&lt;/button&gt;      &lt;button onClick=&#123; () =&gt; setPostId(postId + 1) &#125;&gt;Next&lt;/button&gt;    &lt;/div&gt;  );&#125;

Component/components/auth/SignIn.jsimport &#123; useState, useCallback &#125; from &#x27;react&#x27;;export default function AuthSignInComponent(&#123; onSignIn &#125;) &#123;  const [userId, setUserId] = useState(&#x27;&#x27;);  const [userPw, setUserPw] = useState(&#x27;&#x27;);    const handleChangeUserId = useCallback((event) =&gt; &#123;    setUserId(event.target.value);  &#125;, []);    const handleChangeUserPw = useCallback((event) =&gt; &#123;    setUserPw(event.target.value);  &#125;, []);    const handleSubmit = useCallback((event) =&gt; &#123;    event.preventDefault();      onSignIn(userId, userPw);  &#125;, [userId, userPw, onSignIn]);    return (    &lt;div&gt;      &lt;h2&gt;Auth Sign In&lt;/h2&gt;      &lt;form onSubmit=&#123; handleSubmit &#125;&gt;        &lt;label htmlFor=&quot;userid&quot;&gt;ID&lt;/label&gt;        &lt;input id=&quot;userid&quot; type=&quot;text&quot; value=&#123; userId &#125; onChange=&#123; handleChangeUserId &#125; /&gt;        &lt;label htmlFor=&quot;userpw&quot;&gt;PW&lt;/label&gt;        &lt;input id=&quot;userpw&quot; type=&quot;password&quot; value=&#123; userPw &#125; onChange=&#123; handleChangeUserPw &#125; /&gt;        &lt;button type=&quot;submit&quot;&gt;Sign In&lt;/button&gt;      &lt;/form&gt;    &lt;/div&gt;  );&#125;

/components/post/List.jsexport default function PostListComponent(&#123; isLoading, post &#125;) &#123;  return (    &lt;div&gt;      &lt;h2&gt;Post List&lt;/h2&gt;      &#123; isLoading &amp;&amp; &#x27;Loading...&#x27; &#125;      &#123; !isLoading &amp;&amp; (        &lt;&gt;          &lt;div&gt;&#123; post.title &#125;&lt;/div&gt;          &lt;div&gt;&#123; post.body &#125;&lt;/div&gt;        &lt;/&gt;      ) &#125;    &lt;/div&gt;  );&#125;
]]></content>
      <categories>
        <category>react</category>
        <category>redux</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>state</tag>
      </tags>
  </entry>
  <entry>
    <title>React Rendering v18.2.0</title>
    <url>/react/rendering/</url>
    <content><![CDATA[
  https://ko.reactjs.org/docs/conditional-rendering.html


Conditionalconst Function = () =&gt; &#123;  return boolean ? (&lt;div&gt;abc&lt;/div&gt;) : null;&#125;;

const Function = () =&gt; &#123;  return (    &lt;div&gt;      &lt;div&gt;abc&lt;/div&gt;      &#123; boolean &amp;&amp; &lt;div&gt;def&lt;/div&gt; &#125;    &lt;/div&gt;  );&#125;;

import Component1 from &#x27;./Component1&#x27;;import Component2 from &#x27;./Component2&#x27;;import Component3 from &#x27;./Component3&#x27;;const Function = () =&gt; &#123;  const result = null;  switch(color) &#123;    case &#x27;red&#x27;: result = &lt;Component1 /&gt;; break;    case &#x27;blue&#x27;: result = &lt;Component2 /&gt;; break;    default: result = &lt;Component2 /&gt;;  &#125;  return result;&#125;;

Repeathttps://ko.reactjs.org/docs/lists-and-keys.html
const Function = () =&gt; &#123;  const items = [0, 1].map((item, index) =&gt; (    &lt;li key=&#123; index.toString() &#125;&gt;&#123; item &#125;&lt;/li&gt;  ));  return (    &lt;div&gt;&#123; items &#125;&lt;/div&gt;  );&#125;;

HTML textdangerouslySetInnerHTMLconst Function = () =&gt; &#123;  const tags = &#x27;&lt;b&gt;text&lt;/b&gt;&#x27;;  return (    &lt;div dangerouslySetInnerHTML=&#123;&#123; __html: tags &#125;&#125;&gt;&lt;/div&gt;  );&#125;;

New lineconst Function = () =&gt; &#123;  const tags = &#x27;text\ntext&#x27;;  return (    &lt;div&gt;      &#123; tags.split(&#x27;\n&#x27;).map((line, index) =&gt; (        &lt;span key=&#123; index &#125;&gt;&#123; line &#125;&lt;br /&gt;&lt;/span&gt;      )) &#125;    &lt;/div&gt;  );&#125;;
]]></content>
      <categories>
        <category>react</category>
        <category>rendering</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>React Router v6.2.2</title>
    <url>/react/router/</url>
    <content><![CDATA[
  https://reactrouter.com/docs/en/v6
  https://reach.tech/router


Set routerimport &#123; BrowserRouter, Routes, Route &#125; from &#x27;react-router-dom&#x27;;import App from &#x27;./App&#x27;;ReactDOM.createRoot(document.getElementById(&#x27;root&#x27;)).render(  &lt;BrowserRouter&gt;    &lt;Routes&gt;      &lt;Route path=&quot;/&quot; element=&#123; &lt;Layout /&gt; &#125;&gt;        &lt;Route index element=&#123;&lt;Home /&gt;&#125; /&gt;        &lt;Route path=&quot;about&quot; element=&#123; &lt;About /&gt; &#125; /&gt;        &lt;Route path=&quot;*&quot; element=&#123; &lt;NoMatch /&gt; &#125; /&gt;      &lt;/Route&gt;    &lt;/Routes&gt;  &lt;/BrowserRouter&gt;);

Route menuimport &#123; Link, NavLink, Outlet &#125; from &#x27;react-router-dom&#x27;;const Layout = () =&gt; (  &lt;div&gt;    &lt;ul&gt;      &lt;li&gt;&lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;&lt;/li&gt;      &lt;li&gt;&lt;NavLink to=&quot;/abc&quot;&gt;About&lt;/NavLink&gt;&lt;/li&gt;    &lt;/ul&gt;    &lt;Outlet /&gt;  &lt;/div&gt;);
]]></content>
      <categories>
        <category>react</category>
        <category>router</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>React Setup v18.2.0</title>
    <url>/react/setup/</url>
    <content><![CDATA[
  https://ko.reactjs.org/docs/getting-started.html


SetupUse NPXnpm install -global create-react-appnpx create-react-app project-name

Use CDN&lt;script crossorigin src=&quot;https://unpkg.com/react@17/umd/react.production.min.js&quot;&gt;&lt;/script&gt;&lt;script crossorigin src=&quot;https://unpkg.com/react-dom@17/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;

Proxynpm install --save http-proxy-middleware

/src/setupProxy.jsconst &#123; createProxyMiddleware &#125; = require(&#x27;http-proxy-middleware&#x27;);module.exports = function(app) &#123;  app.use(    &#x27;/api&#x27;,    createProxyMiddleware(&#123;      target: &#x27;http://localhost:4000&#x27;,       changeOrigin: true,      pathRewrite: &#123; &#x27;^/api&#x27;: &#x27;&#x27; &#125;,    &#125;),  );&#125;;


/src/setupProxy.js 파일은 자동으로 로드된다.

Webstorm live templateFunction component
Abbreviation: rfc
Description: Creates a React component function with ES 6 module system

import PropTypes from &#x27;prop-types&#x27;;import classNames from &#x27;classnames/bind&#x27;;import styles from &#x27;./$TM_FILENAME_BASE$.scss&#x27;;const cx = classNames.bind(styles);const $TM_FILENAME_BASE$ = (props) =&gt; &#123;  return (    &lt;div&gt;      $END$    &lt;/div&gt;  );&#125;;$TM_FILENAME_BASE$.propTypes = &#123;  sampleProp: PropTypes.string.isRequired,&#125;;$TM_FILENAME_BASE$.defaultProps = &#123;  sampleProp: &#x27;&#x27;,&#125;;export default $TM_FILENAME_BASE$;

Class component
Abbreviation: rcc
Description: Creates a React component class with ES 6 module system

import &#123; Component &#125; from &#x27;react&#x27;;import PropTypes from &#x27;prop-types&#x27;;import classNames from &#x27;classnames/bind&#x27;;import styles from &#x27;./$TM_FILENAME_BASE$.scss&#x27;;const cx = classNames.bind(styles);class $TM_FILENAME_BASE$ extends Component &#123;  static propTypes = &#123;    sampleProp: PropTypes.string.isRequired,  &#125;;  static defaultProps = &#123;    sampleProp: &#x27;&#x27;,  &#125;;  state = &#123;    sampleState: &#x27;&#x27;,  &#125;;  render() &#123;    return (      &lt;div&gt;        $END$      &lt;/div&gt;    );  &#125;&#125;export default $TM_FILENAME_BASE$;

VS Code extensiongenerate-react-component
Component Template Path: /Program Files/Microsoft VS Code/extension/generate-react-component

/Program Files/Microsoft VS Code/extension/generate-react-component/index.jsexport &#123; default &#125; from &#x27;./__ComponentName__&#x27;;

/Program Files/Microsoft VS Code/extension/generate-react-component/__ComponentName__.jsimport React/* IF class */, &#123; Component &#125;/* ENDIF */ from &#x27;react&#x27;;/* ENDIF */import PropTypes from &#x27;prop-types&#x27;;import classNames from &#x27;classnames/bind&#x27;;import styles from &#x27;./__ComponentName__.scss&#x27;;const cx = classNames.bind(styles);/* IF !class */const __ComponentName__ = (props) =&gt; &#123;  return (    &lt;div className=&#123;cx(&#x27;__ComponentName__&#x27;)&#125;&gt;      __ComponentName__    &lt;/div&gt;  );&#125;;__ComponentName__.propTypes = &#123;  sampleProp: PropTypes.string.isRequired,&#125;;__ComponentName__.defaultProps = &#123;  sampleProp: &#x27;&#x27;,&#125;;/* ENDIF *//* IF class*/class __ComponentName__ extends Component &#123;  static propTypes = &#123;    sampleProp: PropTypes.string.isRequired,  &#125;;  static defaultProps = &#123;    sampleProp: &#x27;&#x27;,  &#125;;  state = &#123;    sampleState: &#x27;&#x27;,  &#125;;  render() &#123;    return (      &lt;div className=&#123;cx(&#x27;__ComponentName__&#x27;)&#125;&gt;        __ComponentName__      &lt;/div&gt;    );  &#125;&#125;/* ENDIF */export default __ComponentName__;

/Program Files/Microsoft VS Code/extension/generate-react-component/__ComponentName__.scss.__ComponentName__ &#123;&#125;
]]></content>
      <categories>
        <category>react</category>
        <category>setup</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>React State v18.2.0</title>
    <url>/react/state/</url>
    <content><![CDATA[
  https://ko.reactjs.org/docs/state-and-lifecycle.html


Function componentimport &#123; useState, useCallback &#125; from &#x27;react&#x27;;export default function ComponentsPostsRegister(&#123; onRegister &#125;) &#123;  const [title, setTitle] = useState(&#x27;&#x27;);  const handleChangeTitle = useCallback((event) =&gt; &#123;    setTitle(event.target.value);  &#125;, []);  return (    &lt;input type=&quot;text&quot; value=&#123; title &#125; onChange=&#123; handleChangeTitle &#125; /&gt;  );&#125;

Class componentimport &#123; Component &#125; from &#x27;react&#x27;;class Example extends Component &#123;  state = &#123;    array: [0, 1],  &#125;;  render() &#123;    const &#123; array &#125; = this.state;    return (      &lt;button onClick=&#123; () =&gt; &#123;        this.setState(&#123;          // array: array.concat([item])          // array: array.splice(startIndex, deleteCount, ...item);          array: [            ...array.slice(0, index),            item,            ...array.slice(index + 1, array.length),          ]        &#125;);      &#125;&gt;Button&lt;/button&gt;    );  &#125;&#125;


concat, splice, slice 메서드를 사용하여 데이터를 변경한다.

]]></content>
      <categories>
        <category>react</category>
        <category>state</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>state</tag>
      </tags>
  </entry>
  <entry>
    <title>Svelte Components v3.49.0</title>
    <url>/svelte/components/</url>
    <content><![CDATA[
  https://svelte.dev/docs





hljs.initHighlightingOnLoad();


ImportChildrenChildren.svelte&lt;div&gt;Children&lt;/div&gt;

ParentParent.svelteimport Children from &#x27;Children.svelte&#x27;;&lt;Children /&gt;

Statehttps://svelte.dev/docs#component-format-script-2-assignments-are-reactive
Primitive value&lt;script&gt;let count = 0; /* 상태 값 */const increment = () =&gt; &#123;  count += 1;&#125;;&lt;/script&gt;&lt;button on:click=&#123; increment &#125;&gt;Click: &#123; count &#125;&lt;/button&gt;

Reference value&lt;script&gt;let list = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];const add = () =&gt; &#123;  /* list.push(&#x27;d&#x27;); // push 만으로는 화면에 갱신하지 않음 */  /* list = list; // 재 할당을 해야 함 */  list = [...list, &#x27;d&#x27;]; /* 전개 연산자 권장 */&#125;;&lt;/script&gt;&lt;ul&gt;  &#123;#each list as item&#125;    &lt;li&gt;&#123; item &#125;&lt;/li&gt;  &#123;/each&#125;&lt;/ul&gt;&lt;button on:click=&#123; add &#125;&gt;Add&lt;/button&gt;

Reactivityhttps://svelte.dev/docs#component-format-script-3-$-marks-a-statement-as-reactive
&lt;script&gt;let count = 0; /* 상태 값 */$: doubled = count * 2; /* $ 는 상태 값을 참조하는 새로운 변수를 만들 때 사용 */$: if (count &gt; 5) &#123; /* 조건식 사용 가능 */  alert(count);&#125;const increment = () =&gt; &#123;  count += 1;&#125;;&lt;/script&gt;&lt;button on:click=&#123; increment &#125;&gt;Click: &#123; count &#125; / &#123; doubled &#125;&lt;/button&gt;

Eventhttps://svelte.dev/docs#template-syntax-component-directives-on-eventname
Type&lt;script&gt;const position = &#123; x: 0, y: 0 &#125;;const handleMouseMove = (event) =&gt; &#123;  position.x = event.clientX;  position.y = event.clientY;&#125;;&lt;/script&gt;&lt;div class=&quot;area&quot; on:mousemove=&#123; handleMouseMove &#125;&gt;  &#123; position.x &#125; / &#123; position.y &#125;&lt;/div&gt;&lt;style lang=&quot;scss&quot;&gt;.area &#123;  width: 100px;  height: 100px;  background-color: #aaa;&#125;&lt;/style&gt;

Modifiers







preventDefault
event.preventDefault() 를 호출. 이벤트가 발생한 태그의 기본 동작을 막음


stopPropagation
event.stopPropagation() 을 호출. 발생한 이벤트가 겹쳐진 상위 요소로 전파되지 않도록 함


passive
터치 혹은 휠 이벤트로 발생하는 스크롤 성능을 향상시킴


capture
버블링 단계가 아닌 캡쳐 단계에서 이벤트 핸들러를 실행함


once
이벤트 핸들러를 단 한 번만 실행


self
event.target 과 이벤트 핸들러를 정의한 요소가 같을 때 이벤트 핸들러를 실행하도록 함


&lt;button on:click|once|preventDefault|...=&#123; handler &#125;&gt;&lt;/button&gt;

Propshttps://svelte.dev/docs#component-format-script-1-export-creates-a-component-prop
ParentParent.svelte&lt;script&gt;import Children from &#x27;Children.svelte&#x27;;let number = 10;const handleClick = () =&gt; &#123;  number += 1;&#125;;&lt;/script&gt;/* &lt;Children number=&#123; number &#125; handleClick=&#123; handleClick &#125; /&gt; *//* 이름과 값이 같으면 단축 가능 */&lt;Children &#123; number &#125; &#123; handleClick &#125; /&gt;

ChildrenChildren.svelte&lt;script&gt;export let number; /* 자바스크립트의 기본 export 가 아님 (svelte 의 고유 문법) */export let handleClick;&lt;/script&gt;&lt;button on:click=&#123; handleClick &#125;&gt;&#123; number &#125;&lt;/button&gt;
]]></content>
      <categories>
        <category>svelte</category>
        <category>components</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Svelte Context API v3.49.0</title>
    <url>/svelte/context-api/</url>
    <content><![CDATA[
  https://svelte.dev/docs





hljs.initHighlightingOnLoad();


Context API
기본적으로 반응적이지 않다.첫 로드 때 받은 값을 변경할 필요가 없거나, 이벤트 핸들러를 전달할 때 유용하다.

setContexthttps://svelte.dev/docs#run-time-svelte-setcontext
&lt;script&gt;import &#123; setContext &#125; from &#x27;svelte&#x27;;setContext(&#x27;answer&#x27;, 42);&lt;/script&gt;

getContexthttps://svelte.dev/docs#run-time-svelte-getcontext
&lt;script&gt;import &#123; getContext &#125; from &#x27;svelte&#x27;;const answer = getContext(&#x27;answer&#x27;);&lt;/script&gt;

hasContexthttps://svelte.dev/docs#run-time-svelte-hascontext
&lt;script&gt;import &#123; hasContext &#125; from &#x27;svelte&#x27;;if (hasContext(&#x27;answer&#x27;)) &#123;  /* do something */&#125;&lt;/script&gt;

getAllContextshttps://svelte.dev/docs#run-time-svelte-getallcontexts
&lt;script&gt;import &#123; getAllContexts &#125; from &#x27;svelte&#x27;;const contexts = getAllContexts();&lt;/script&gt;

dispatchcreateEventDispatcherhttps://svelte.dev/docs#run-time-svelte-createeventdispatcher
&lt;script&gt;import &#123; createEventDispatcher &#125; from &#x27;svelte&#x27;;const dispatch = createEventDispatcher();&lt;/script&gt;&lt;button on:click=&quot;&#123;() =&gt; dispatch(&#x27;notify&#x27;, &#x27;detail value&#x27;)&#125;&quot;&gt;Fire Event&lt;/button&gt;

storehttps://svelte.dev/docs#run-time-svelte-store
writablehttps://svelte.dev/docs#run-time-svelte-store-writable

subscribe 는 컴포넌트에서만 사용 가능하다.

./store.jsimport &#123; writable &#125; from &#x27;svelte/store&#x27;;function createCount() &#123;  const &#123; subscribe, set, update &#125; = writable(0);  const increment = () =&gt; update(count =&gt; count + 1);  const decrement = () =&gt; update(count =&gt; count - 1);  const reset = () =&gt; set(0);  return &#123; subscribe, increment, decrement, reset &#125;;&#125;export const count = createCount();

App.svelte&lt;script&gt;import &#123; count &#125; from &#x27;./store.js&#x27;;&lt;/script&gt;&lt;div&gt;&#123; $count &#125;&lt;/div&gt;&lt;button on:click=&#123; count.increment &#125;&gt;Increment&lt;/button&gt;&lt;button on:click=&#123; count.decrement &#125;&gt;Decrement&lt;/button&gt;&lt;button on:click=&#123; count.reset &#125;&gt;Reset&lt;/button&gt;

readablehttps://svelte.dev/docs#run-time-svelte-store-readable

읽기 전용 스토어를 만든다.set 함수를 통해 값을 초기화 할 수 있다.변경할 일이 없는 API 호출에 사용하는 것을 권장한다.

import &#123; readable &#125; from &#x27;svelte/store&#x27;;export const siteConfig = readable([], set =&gt; &#123;  const response = await fetch(&#x27;&#x27;);  const config = await response.json();  set(config);&#125;);

derivedhttps://svelte.dev/docs#run-time-svelte-store-derived

기존 스토어를 참조하여 새로운 스토어를 만든다.원본 스토어의 변화에 반응하지만, 생성된 스토어의 변화는 원본 스토어에 영향을 주지 않는다.

./store.jsimport &#123; writable, derived &#125; from &#x27;svelte/store&#x27;;...export const doubled = derived(count, $count =&gt; $count * 2);

gethttps://svelte.dev/docs#run-time-svelte-store-get
&lt;script&gt;import &#123; get &#125; from &#x27;svelte/store&#x27;;const value = get(store);&lt;/script&gt;
]]></content>
      <categories>
        <category>svelte</category>
        <category>context-api</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Svelte Router</title>
    <url>/svelte/router/</url>
    <content><![CDATA[
  https://svelte.dev/docs





hljs.initHighlightingOnLoad();


svelte-routinghttps://github.com/EmilTholin/svelte-routing
routifyhttps://github.com/roxiness/routify
svelte-spa-routerhttps://github.com/ItalyPaleAle/svelte-spa-router
tinrohttps://github.com/AlexxNB/tinro
Setupnpm install --save-dev tinro

Simple router&lt;script&gt;import &#123; Route, active &#125; from &#x27;tinro&#x27;;import About from &#x27;./About.svelte&#x27;;&lt;/script&gt;&lt;a href=&quot;/&quot; use:active&gt;Home&lt;/a&gt;&lt;a href=&quot;/about&quot; use:active&gt;About&lt;/a&gt;&lt;Route path=&quot;/about&quot;&gt;&lt;About /&gt;&lt;/Route&gt;&lt;Route path=&quot;/home&quot; redirect=&quot;/&quot;&gt;&lt;/Route&gt;&lt;Route fallback&gt;404&lt;/Route&gt;

Nested router&lt;Route path=&quot;/about/*&quot;&gt;  &lt;About /&gt;  &lt;Route path=&quot;/sub&quot;&gt;    &lt;SubContent /&gt;  &lt;/Route&gt;&lt;/Route&gt;

Meta informationApp.svelte&lt;script&gt;import Meta from &#x27;./components/Meta.svelte&#x27;;&lt;/script&gt;&lt;a href=&quot;/meta/123?text=abc&quot;&gt;Meta&lt;/a&gt;&lt;Route path=&quot;/meta/:id&quot;&gt;&lt;Meta /&gt;&lt;/Route&gt;

Meta.svelte&lt;script&gt;import &#123; meta &#125; from &#x27;tinro&#x27;;const &#123;  breadcrumbs,  from,  match,  params,  pattern,  query,  subscribe,  url,&#125; = meta();const &#123; id &#125; = params;const &#123; text &#125; = query;&lt;/script&gt;&lt;div&gt;&#123; id &#125;&lt;/div&gt;&lt;div&gt;&#123; text &#125;&lt;/div&gt;&lt;div&gt;&#123; match &#125;&lt;/div&gt;&lt;div&gt;&#123; pattern &#125;&lt;/div&gt;&lt;div&gt;&#123; url &#125;&lt;/div&gt;

Programing router&lt;script&gt;import &#123; router &#125; from &#x27;tinro&#x27;;const goHome = () =&gt; router.goto(&#x27;/&#x27;);/* router.location.query.set(&#x27;name1&#x27;, &#x27;aaa&#x27;); *//* router.location.query.set(&#x27;name2&#x27;, &#x27;bbb&#x27;); *//* router.location.query.replace(&#123; a: &#x27;b&#x27; &#125;); *//* router.location.query.clear(); *//* router.location.hash.set(&#x27;xyz&#x27;); *//* router.location.hash.clear(); */&lt;/script&gt;&lt;button on:click=&#123; goHome &#125;&gt;Home&lt;/button&gt;

Lazy loading componentsLazy.svelte&lt;script&gt;export let component;&lt;/script&gt;&#123;#await component.then ? component : component()&#125;  Loading component...&#123;:then Cmp&#125;  &lt;svelte:component this=&#123; Cmp.default &#125; /&gt;&#123;/await&#125;

&lt;script&gt;import Lazy from &#x27;./Lazy.svelte&#x27;;&lt;/script&gt;&lt;Route path=&quot;/lazypage&quot;&gt;  &lt;Lazy component=&#123; () =&gt; import(&#x27;./mypage.svelte&#x27;) &#125; /&gt;  &lt;!-- OR --&gt;  &lt;Lazy component=&#123; import(&#x27;./mypage.svelte&#x27;) &#125; /&gt;&lt;/Route&gt;

TransitionsTransition.svelte&lt;script&gt;import &#123; fade &#125; from &#x27;svelte/transition&#x27;;import &#123; router &#125; from &#x27;tinro&#x27;;&lt;/script&gt;&#123;#key $router.path&#125;  &lt;div in:fade=&quot;&#123;&#123; duration: 500 &#125;&#125;&quot;&gt;    &lt;slot&gt;&lt;/slot&gt;  &lt;/div&gt;&#123;/key&#125;

&lt;Transition&gt;  &lt;Route path=&quot;/&quot;&gt;...&lt;/Route&gt;  &lt;Route path=&quot;/page1&quot;&gt;...&lt;/Route&gt;  &lt;Route path=&quot;/page2&quot;&gt;...&lt;/Route&gt;&lt;/Transition&gt;

Guarded routes&lt;script&gt;import &#123; authToken &#125; from &#x27;./store.js&#x27;;&lt;/script&gt;&#123;#if $authToken &#125;  &lt;Route path=&quot;/profile&quot;&gt;Private page&lt;/Route&gt;&#123;:else&#125;  &lt;Route path=&quot;/profile&quot;&gt;&lt;a href=&quot;/login&quot;&gt;Login&lt;/a&gt;&lt;/Route&gt;&#123;/if&#125;

svelte-stack-routerhttps://github.com/cdellacqua/svelte-stack-router
roots-svelte-routerhttps://github.com/PierBover/roots-svelte-router
]]></content>
      <categories>
        <category>svelte</category>
        <category>router</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Svelte Setup v3.49.0</title>
    <url>/svelte/setup/</url>
    <content><![CDATA[
  https://svelte.dev/docs


SetupUse NPMnpm create vite@latest


Project name: boilerplate-220801
Select a framework: svelte
Select a variant: svelte

Add SCSSnpm install --save-dev sass svelte-preprocess

vite.config.jsimport &#123; defineConfig &#125; from &#x27;vite&#x27;;import &#123; svelte &#125; from &#x27;@sveltejs/vite-plugin-svelte&#x27;;import sveltePreprocess from &#x27;svelte-preprocess&#x27;;export default defineConfig(&#123;  plugins: [    svelte(&#123;      preprocess: sveltePreprocess(),    &#125;),  ],&#125;);
]]></content>
      <categories>
        <category>svelte</category>
        <category>setup</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Svelte Special elements v3.49.0</title>
    <url>/svelte/special-elements/</url>
    <content><![CDATA[
  https://svelte.dev/docs





hljs.initHighlightingOnLoad();


selfhttps://svelte.dev/docs#template-syntax-svelte-self

&lt;svelte:self&gt; 는 자기 자신을 재귀적으로 참조할 때 사용한다.트리뷰와 같이 요소를들 반복해서 참조해야 할 때 사용한다.

&lt;script&gt;import File from &#x27;./File.svelte&#x27;;export let expanded = false;export let name;export let files;&lt;/script&gt;&#123;#if expanded&#125;  &lt;ul&gt;    &#123;#each files as file&#125;      &lt;li&gt;        &#123;#if file.files&#125;          &lt;svelte:self &#123; ...file &#125; /&gt;        &#123;:else&#125;          &lt;File &#123; ...file &#125; /&gt;        &#123;/if&#125;      &lt;/li&gt;    &#123;/each&#125;  &lt;/ul&gt;&#123;/if&#125;

componenthttps://svelte.dev/docs#template-syntax-svelte-component

&lt;svelte:component&gt; 로 구성요소 생성자를 사용하여 구성요소를 동적으로 렌더링한다.속성이 변경되면 구성요소가 삭제되고 재생성된다.

&lt;script&gt;import RedThing from &#x27;./RedThing.svelte&#x27;;import GreenThing from &#x27;./GreenThing.svelte&#x27;;import BlueThing from &#x27;./BlueThing.svelte&#x27;;const options = [  &#123; color: &#x27;red&#x27;, component: RedThing &#125;,  &#123; color: &#x27;green&#x27;, component: GreenThing &#125;,  &#123; color: &#x27;blue&#x27;, component: BlueThing &#125;,];let selected = options[0];&lt;/script&gt;&lt;select bind:value=&#123; selected &#125;&gt;  &#123;#each options as option&#125;    &lt;option value=&#123; option &#125;&gt;&#123; option.color &#125;&lt;/option&gt;  &#123;/each&#125;&lt;/select&gt;&lt;svelte:component this=&#123; selected.component &#125; /&gt;

elementhttps://svelte.dev/docs#template-syntax-svelte-element

&lt;svelte:element&gt; 는 동적으로 지정된 유형의 요소로 렌더링한다.

&lt;script&gt;let tag = &#x27;div&#x27;;export let handleClick;&lt;/script&gt;&lt;svelte:element this=&#123; tag &#125; on:click=&#123; handleClick &#125;&gt;Div tag&lt;/svelte:element&gt;

windowhttps://svelte.dev/docs#template-syntax-svelte-window

&lt;svelte:window&gt; 는 window 객체에 접근할 때 사용한다.

&lt;svelte:window on:event=&#123; handler &#125;/&gt;&lt;svelte:window bild:scrollY=&#123; y &#125; /&gt;

headhttps://svelte.dev/docs#template-syntax-svelte-head

&lt;svelte:head&gt; 는 head 요소에 접근할 때 사용한다.

&lt;svelte:head&gt;  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;&lt;/svelte:head&gt;

bodyhttps://svelte.dev/docs#template-syntax-svelte-body

&lt;svelte:body&gt; 는 body 요소에 접근할 때 사용한다.

&lt;svelte:body on:mousemove=&#123; handleMouseMove &#125; /&gt;

optionshttps://svelte.dev/docs#template-syntax-svelte-options

&lt;svelte:options&gt; 는 컴파일에 대한 사용자 지정 옵션이다.

&lt;svelte:options immutable=&#123; true &#125; /&gt;









immutable
true 일 경우 컴파일러가 동일성을 검사하여 확실히 값이 변경되었을 때만 동작하게 함


accessors
컴포넌트 Props 에 getter, setters 를 추가함


namespace
일반적으로 사용될 네임스페이스


tag
컴파일 시 커스텀 요소의 이름 지정


fragmenthttps://svelte.dev/docs#template-syntax-svelte-fragment

&lt;svelte:fragment&gt; 는 slot 를 사용할 때 불필요한 요소를 생성하지 않도록 한다.

Widget.svelte&lt;div&gt;  &lt;slot name=&quot;header&quot;&gt;No header was provided&lt;/slot&gt;  &lt;p&gt;Some content between header and footer&lt;/p&gt;  &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;&lt;/div&gt;

Parent.svelte&lt;Widget&gt;  &lt;h1 slot=&quot;header&quot;&gt;Header&lt;/h1&gt;  &lt;svelte:fragment slot=&quot;footer&quot;&gt;    &lt;p&gt;All rights reserved.&lt;/p&gt;    &lt;p&gt;Copyright&lt;/p&gt;  &lt;/svelte:fragment&gt;&lt;/Widget&gt;
]]></content>
      <categories>
        <category>svelte</category>
        <category>special-elements</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Svelte Style Effect v3.49.0</title>
    <url>/svelte/style-effect/</url>
    <content><![CDATA[
  https://svelte.dev/docs





hljs.initHighlightingOnLoad();


Classhttps://svelte.dev/docs#template-syntax-element-directives-class-name
&lt;script&gt;let isColor;let isWide;&lt;/script&gt;&lt;input type=&quot;checkbox&quot; bind:checked=&#123; isColor &#125;&gt;Color&lt;input type=&quot;checkbox&quot; bind:checked=&#123; isWide &#125;&gt;Wide&lt;div  class=&quot;box&quot;  class:color=&#123; isColor &#125;  class:wide=&#123; isWide &#125;&gt;&lt;/div&gt;&lt;style lang=&quot;scss&quot;&gt;.box &#123;  width: 100px;  height: 100px;  background-color: #aaa;  &amp;.color &#123;    background-color: red;  &#125;  &amp;.wide &#123;    width: 200px;  &#125;&#125;&lt;/style&gt;

Stylehttps://svelte.dev/docs#template-syntax-element-directives-style-property
&lt;script&gt;let isColor;&lt;/script&gt;&lt;input type=&quot;checkbox&quot; bind:checked=&#123; isColor &#125;&gt;Color&lt;div  style=&quot;width: 100px; height: 100px&quot;  style:width=&quot;200px&quot;  style:background-color=&#123; isColor ? &#x27;red&#x27; : &#x27;black&#x27; &#125;&gt;&lt;/div&gt;

Transitionhttps://svelte.dev/docs#template-syntax-element-directives-transition-fnhttps://svelte.dev/docs#template-syntax-element-directives-transition-fn-transition-parametershttps://svelte.dev/docs#template-syntax-element-directives-transition-fn-custom-transition-functionshttps://svelte.dev/docs#template-syntax-element-directives-transition-fn-transition-eventshttps://svelte.dev/docs#run-time-svelte-transitionhttps://svelte.dev/docs#run-time-svelte-transition-fadehttps://svelte.dev/docs#run-time-svelte-transition-blurhttps://svelte.dev/docs#run-time-svelte-transition-flyhttps://svelte.dev/docs#run-time-svelte-transition-slidehttps://svelte.dev/docs#run-time-svelte-transition-scalehttps://svelte.dev/docs#run-time-svelte-transition-drawhttps://svelte.dev/docs#run-time-svelte-easing
&lt;script&gt;import &#123; fade, blur, fly, slide, scale, draw &#125; from &#x27;svelte/transition&#x27;;import &#123;  backIn, backOut, backInOut,  bounceIn, bounceOut, bounceInOut,  circIn, circOut, circInOut,  cubicIn, cubicOut, cubicInOut,  elasticIn, elasticOut, elasticInOut,  expoIn, expoOut, expoInOut,  quadIn, quadOut, quadInOut,  quartIn, quartOut, quartInOut,  quintIn, quintOut, quintInOut,  sineIn, sineOut, sineInOut,&#125; from &#x27;svelte/easing&#x27;;let visible = false;&lt;/script&gt;&lt;input type=&quot;checkbox&quot; bind:checked=&#123; visible &#125;&gt;Visible&#123;#if visible&#125;&lt;div  transition:fade=&quot;&#123;&#123;    delay: 500,    duration: 1000,    easing: backIn,    css: (t, u) =&gt; &#x27;string&#x27;,    tick: (t, u) =&gt; undefined,    opacity: 100, /* blur, fly, scale */    amount: 5, /* blur */    x: 0, /* fly */    y: 0, /* fly */    start: 0, /* scale */    speed: 1 /* draw */  &#125;&#125;&quot;  on:introstart=&quot;&#123;() =&gt; status = &#x27;intro started&#x27;&#125;&quot;  on:outrostart=&quot;&#123;() =&gt; status = &#x27;outro started&#x27;&#125;&quot;  on:introend=&quot;&#123;() =&gt; status = &#x27;intro ended&#x27;&#125;&quot;  on:outroend=&quot;&#123;() =&gt; status = &#x27;outro ended&#x27;&#125;&quot;&gt;Text&lt;/div&gt;&#123;/if&#125;

in-outhttps://svelte.dev/docs#template-syntax-element-directives-in-fn-out-fn
&lt;script&gt;import &#123; fade, blur &#125; from &#x27;svelte/transition&#x27;;let visible = false;&lt;/script&gt;&lt;input type=&quot;checkbox&quot; bind:checked=&#123; visible &#125;&gt;Visible&#123;#if visible&#125;&lt;div in:fade out:blur&gt;Text&lt;/div&gt;&#123;/if&#125;

https://svelte.dev/docs#run-time-svelte-transition-crossfadehttps://svelte.dev/docs#run-time-svelte-animatehttps://svelte.dev/docs#run-time-svelte-animate-flip
&lt;script&gt;import &#123; crossfade &#125; from &#x27;svelte/transition&#x27;;const [ send, receive ] = crossfade(&#123;&#125;);let left = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];let right = [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;];const move = (item, from, to) =&gt; &#123;  from = from.filter(i =&gt; i !== item);  to = [...to, item];  return [from, to];&#125;;const moveLeft = (item) =&gt; &#123;  [right, left] = move(item, right, left);&#125;;const moveRight = (item) =&gt; &#123;  [left, right] = move(item, left, right);&#125;;&lt;/script&gt;&lt;style&gt;.list &#123;  display: inline-block;  width: 100px;  vertical-align: top;&#125;button &#123;  width: 100%;  background-color: red;&#125;&lt;/style&gt;&lt;div class=&quot;list&quot;&gt;  &#123;#each left as item (item)&#125;    &lt;button      in:receive=&#123;&#123; key: item &#125;&#125;      out:send=&#123;&#123; key: item &#125;&#125;      on:click=&#123; () =&gt; moveRight(item) &#125;      animate:flip    &gt;&#123; item &#125;&lt;/button&gt;  &#123;/each&#125;&lt;/div&gt;&lt;div class=&quot;list&quot;&gt;  &#123;#each right as item (item)&#125;    &lt;button      in:receive=&#123;&#123; key: item &#125;&#125;      out:send=&#123;&#123; key: item &#125;&#125;      on:click=&#123; () =&gt; moveLeft(item) &#125;      animate:flip=&#123;&#123;        delay: 0,        duration: 1000,        easing: null,      &#125;&#125;    &gt;&#123; item &#125;&lt;/button&gt;  &#123;/each&#125;&lt;/div&gt;

motionhttps://svelte.dev/docs#run-time-svelte-motion
tweenedhttps://svelte.dev/docs#run-time-svelte-motion-tweened
&lt;script&gt;import &#123; tweened &#125; from &#x27;svelte/motion&#x27;;const padding = tweened(10, &#123;  delay: 0,  duration: 500,  easing: null,  interpolate: () =&gt; undefined,&#125;);const addPadding = () =&gt; &#123;  $padding += 50;&#125;;&lt;/script&gt;&lt;div on:click=&#123; addPadding &#125; style=&quot;  display: inline-block;  border: 1px solid #333;  padding: &#123; $padding &#125;px;&quot;&gt;Add padding&lt;/div&gt;

springhttps://svelte.dev/docs#run-time-svelte-motion-spring
&lt;script&gt;import &#123; spring &#125; from &#x27;svelte/motion&#x27;;let coords = spring(&#123; x: 50, y: 50 &#125;, &#123;  stiffness: 0.15, /* 0 ~ 1 뻣뻣함 */  damping: 0.8, /* 0 ~ 1 제동 */  precision: 0.01, /* 정밀도 */&#125;);&lt;/script&gt;&lt;style lang=&quot;scss&quot;&gt;svg &#123;  width: 300px;  height: 300px;  background-color: #ccc;  circle &#123;    fill: red;  &#125;&#125;&lt;/style&gt;&lt;svg on:mousemove=&quot;&#123; (event) =&gt; coords.set(&#123; x: event.clientX, y: event.clientY &#125;) &#125;&quot;&gt;  &lt;circle cx=&#123; $coords.x &#125; cy=&#123; $coords.y &#125; r=20 /&gt;&lt;/svg&gt;

actionhttps://svelte.dev/docs#template-syntax-element-directives-use-action
draggable elementdraggable.jsfunction draggable(node, positions) &#123;  let left = positions.x || 0;  let top = positions.y || 0;  let moving = false;  node.style.left = `$&#123; left &#125;px`;  node.style.top = `$&#123; top &#125;px`;  const handleMouseDown = () =&gt; &#123;    moving = true;    window.addEventListener(&#x27;mousemove&#x27;, handleMouseMove);    window.addEventListener(&#x27;mouseup&#x27;, handleMouseUp);  &#125;;  const handleMouseUp = () =&gt; &#123;    moving = false;  &#125;;  const handleMouseMove = (event) =&gt; &#123;    if (moving) &#123;      left += event.movementX;      top += event.movementY;      node.style.left = `$&#123; left &#125;px`;      node.style.top = `$&#123; top &#125;px`;    &#125;  &#125;;  node.addEventListener(&#x27;mousedown&#x27;, handleMouseDown);  return &#123;    destroy() &#123;      node.removeEventListener(&#x27;mousedown&#x27;, handleMouseDown);      node.removeEventListener(&#x27;mousemove&#x27;, handleMouseMove);      node.removeEventListener(&#x27;mouseup&#x27;, handleMouseUp);    &#125;  &#125;&#125;export default draggable;

App.svelte&lt;script&gt;import draggable from &#x27;./script/draggable.js&#x27;;&lt;/script&gt;&lt;div  use:draggable=&#123;&#123; x: 200, y: 200 &#125;&#125;  style=&quot;position: absolute; width: 100px; height: 100px; background-color: red; cursor: move&quot;&gt;&lt;/div&gt;

typewriter elementtypewriter.js// https://github.com/tameemsafi/typewriterjsimport Typewriter from &#x27;typewriter-effect/dist/core&#x27;;function typewriter(node) &#123;  new Typewriter(node, &#123;    strings: node.innerHTML,    autoStart: true,    loop: true,    delay: 100,  &#125;);&#125;export default typewriter;

App.svelte&lt;script&gt;import typewriter from &#x27;./script/typewriter.js&#x27;;&lt;/script&gt;&lt;div use:typewriter&gt;abcdefg hijklmn opqrstu vwxyz&lt;/div&gt;
]]></content>
      <categories>
        <category>svelte</category>
        <category>style-effect</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Svelte Template v3.49.0</title>
    <url>/svelte/template/</url>
    <content><![CDATA[
  https://svelte.dev/docs





hljs.initHighlightingOnLoad();


Conditionalhttps://svelte.dev/docs#template-syntax-if
&#123;#if color === &#x27;red&#x27;&#125;  &lt;div&gt;Red&lt;/div&gt;&#123;:else if color === &#x27;blue&#x27;&#125;  &lt;div&gt;Blue&lt;/div&gt;&#123;:else&#125;  &lt;div&gt;Other&lt;/div&gt;&#123;/if&#125;

Repeathttps://svelte.dev/docs#template-syntax-each
&lt;ul&gt;  &#123;#each items as item, index&#125;    &lt;li&gt;&#123; item.name &#125;&lt;/li&gt;  &#123;:else&#125;    &lt;li&gt;Empty&lt;/li&gt;  &#123;/each&#125;&lt;/ul&gt;

Asynchronoushttps://svelte.dev/docs#template-syntax-await
&lt;script&gt;let page = 1;let limit = 10;$: items = fetch(`https://jsonplaceholder.typicode.com/posts?_page=$&#123; page &#125;&amp;_limit=$&#123; limit &#125;`).then((response) =&gt; response.json());const nextPage = () =&gt; &#123;  page += 1;&#125;;&lt;/script&gt;&lt;h1&gt;Page: &#123; page &#125;&lt;/h1&gt;&#123;#await items&#125;  &lt;div&gt;...loading&lt;/div&gt;&#123;:then items&#125;  &lt;ul&gt;    &#123;#each items as item, index&#125;      &lt;li&gt;[&#123; item.id &#125;] &#123; item.title &#125;&lt;/li&gt;    &#123;/each&#125;  &lt;/ul&gt;&#123;:catch error&#125;  &lt;div&gt;Error&lt;/div&gt;&#123;/await&#125;&lt;button on:click=&#123; nextPage &#125;&gt;Next&lt;/button&gt;

Bindinghttps://svelte.dev/docs#template-syntax-element-directives-bind-property
input&lt;script&gt;let value = &#x27;&#x27;;const clear = () =&gt; &#123;  value = &#x27;&#x27;;&#125;;&lt;/script&gt;&lt;!-- &lt;input type=&quot;text&quot; bind:value=&#123; value &#125; /&gt; --&gt;&lt;input type=&quot;text&quot; bind:value /&gt;&lt;button on:click=&#123; clear &#125;&gt;Clear&lt;/button&gt;&lt;!-- &lt;input type=&quot;checkbox&quot; bind:checked=&#123; false &#125;&gt; --&gt;

radio&lt;script&gt;let selected = 0;&lt;/script&gt;&lt;label&gt;&lt;input type=&quot;radio&quot; bind:group=&#123; selected &#125; value=&#123; 1 &#125; /&gt;One&lt;/label&gt;&lt;label&gt;&lt;input type=&quot;radio&quot; bind:group=&#123; selected &#125; value=&#123; 2 &#125; /&gt;Two&lt;/label&gt;&lt;label&gt;&lt;input type=&quot;radio&quot; bind:group=&#123; selected &#125; value=&#123; 3 &#125; /&gt;Three&lt;/label&gt;

select&lt;script&gt;let todos = [  &#123; id: 1, name: &#x27;one&#x27; &#125;,  &#123; id: 2, name: &#x27;two&#x27; &#125;,  &#123; id: 3, name: &#x27;three&#x27; &#125;,];let selected = &#x27;&#x27;;&lt;/script&gt;&lt;select bind:value=&#123; selected &#125;&gt;  &#123;#each todos as todo&#125;    &lt;option value=&#123; todo.id &#125;&gt;&#123; todo.name &#125;&lt;/option&gt;  &#123;/each&#125;&lt;/select&gt;&lt;div&gt;&#123; selected &#125;&lt;/div&gt;

block&lt;script&gt;let html = &#x27;&lt;div&gt;element&lt;/div&gt;&#x27;;&lt;/script&gt;&lt;div  contenteditable=&quot;true&quot;  bind:innerHTML=&#123; html &#125;  bind:clientWidth /* readonly */  bind:clientHeight /* readonly */  bind:offsetWidth /* readonly */  bind:offsetHeight /* readonly */&gt;&lt;/div&gt;&lt;pre&gt;&#123; html &#125;&lt;/pre&gt;

video&lt;video  src=&#123; clip &#125;  bind:duration /* readonly */  bind:buffered /* readonly */  bind:played /* readonly */  bind:seekable /* readonly */  bind:seeking /* readonly */  bind:ended /* readonly */  bind:currentTime  bind:playbackRate  bind:paused  bind:volume  bind:muted  bind:videoWidth /* readonly */  bind:videoHeight /* readonly */&gt;&lt;/video&gt;

this&lt;script&gt;import &#123; onMount &#125; from &#x27;svelte&#x27;;let canvasElement;onMount(() =&gt; &#123;  const context = canvasElement.getContext(&#x27;2d&#x27;);  console.log(context);&#125;);&lt;/script&gt;&lt;canvas bind:this=&#123; canvasElement &#125;&gt;&lt;/canvas&gt;

Slothttps://svelte.dev/docs#template-syntax-slot
BasicWidget.svelte&lt;div&gt;  &lt;div&gt;000&lt;/div&gt;  &lt;slot name=&quot;aaa&quot;&gt;&lt;/slot&gt;  &#123;#if $$slots.bbb&#125;    &lt;div&gt;333&lt;/div&gt;    &lt;slot name=&quot;bbb&quot;&gt;&lt;/slot&gt;  &#123;/if&#125;&lt;/div&gt;

Parent.svelte&lt;Widget&gt;  &lt;svelte:fragment slot=&quot;aaa&quot;&gt;    &lt;div&gt;111&lt;/div&gt;    &lt;div&gt;222&lt;/div&gt;  &lt;/svelte:fragment&gt;  &lt;div slot=&quot;bbb&quot;&gt;    &lt;div&gt;111&lt;/div&gt;    &lt;div&gt;222&lt;/div&gt;  &lt;/div&gt;&lt;/Widget&gt;

Result&lt;div&gt;  &lt;div&gt;000&lt;/div&gt;  &lt;div&gt;111&lt;/div&gt;  &lt;div&gt;222&lt;/div&gt;  &lt;div&gt;333&lt;/div&gt;  &lt;div slot=&quot;bbb&quot;&gt;    &lt;div&gt;111&lt;/div&gt;    &lt;div&gt;222&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;

propsWidget.svelte&lt;script&gt;export let items;&lt;/script&gt;&lt;ul&gt;  &#123;#each items as item&#125;    &lt;li&gt;      &lt;!-- &lt;slot prop=&#123; item &#125;&gt;&lt;/slot&gt; --&gt;      &lt;slot name=&quot;item&quot; &#123; item &#125;&gt;&lt;/slot&gt;    &lt;/li&gt;  &#123;/each&#125;&lt;/ul&gt;

Parent.svelte&lt;!-- &lt;Widget items=&#123; [1, 2, 3] &#125; let:prop=&#123; thing &#125;&gt;  &lt;div&gt;&#123; thing &#125;&lt;/div&gt;&lt;/Widget&gt; --&gt;&lt;Widget items=&#123; [1, 2, 3] &#125;&gt;  &lt;div slot=&quot;item&quot; let:item&gt;&#123; item &#125;&lt;/div&gt;&lt;/Widget&gt;

Result&lt;ul&gt;  &lt;li&gt;&lt;div&gt;1&lt;/div&gt;&lt;/li&gt;  &lt;li&gt;&lt;div&gt;2&lt;/div&gt;&lt;/li&gt;  &lt;li&gt;&lt;div&gt;3&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;

LifecycleonMounthttps://svelte.dev/docs#run-time-svelte-onmount
import &#123; onMount &#125; from &#x27;svelte&#x27;;onMount(() =&gt; &#123;  console.log(&#x27;the component has mounted&#x27;);&#125;);

beforeUpdatehttps://svelte.dev/docs#run-time-svelte-beforeupdate
import &#123; beforeUpdate &#125; from &#x27;svelte&#x27;;beforeUpdate(() =&gt; &#123;  console.log(&#x27;the component is about to update&#x27;);&#125;);

afterUpdatehttps://svelte.dev/docs#run-time-svelte-afterupdate
import &#123; afterUpdate &#125; from &#x27;svelte&#x27;;afterUpdate(() =&gt; &#123;  console.log(&#x27;the component just updated&#x27;);&#125;);

onDestroyhttps://svelte.dev/docs#run-time-svelte-ondestroy
import &#123; onDestroy &#125; from &#x27;svelte&#x27;;onDestroy(() =&gt; &#123;  console.log(&#x27;the component is being destroyed&#x27;);&#125;);

tickhttps://svelte.dev/docs#run-time-svelte-tick
&lt;script&gt;import &#123; tick &#125; from &#x27;svelte&#x27;;let targetElement;let a = 1;let b = 2;const handleUpdate = async () =&gt; &#123;  a = 2;  b = 3;  console.log(targetElement.textContent); /* 1 + 2 = 3 */  await tick(); /* 돔 업데이트 후 다음 실행 */  console.log(targetElement.textContent); /* 2 + 3 = 5 */&#125;;&lt;/script&gt;&lt;div bind:this=&#123; targetElement &#125;&gt;&#123; a &#125; + &#123; b &#125; = &#123; a + b &#125;&lt;/div&gt;&lt;button on:click=&#123; handleUpdate &#125;&gt;Update&lt;/button&gt;
]]></content>
      <categories>
        <category>svelte</category>
        <category>template</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Internet Information Services</title>
    <url>/server/iis/</url>
    <content><![CDATA[
  https://docs.microsoft.com/en-us/iis/configuration


Setup
Microsoft Visual C++ 2012 Redistributable Package 가 필요하다

Program and feature settings


Windows 기능 켜기&#x2F;끄기
인터넷 정보 서비스
웹 관리 도구
IIS 관리 콘솔


World Wide Web 서비스
보안
요청 필터링


응용 프로그램 개발 기능
ASP, CGI, ISAPI 필터, ISAPI 확장


일반적인 HTTP 기능
HTTP 리디렉션
HTTP 오류
기본문서
디렉토리 검색
정적 콘텐츠











IIS manager settings


처리기 매핑
모듈 매핑 추가…
요청 경로: *.php
모듈: FastCgiModule
실행 파일: php-cgi.exe
이름: PHP FastCGI







Secure
AD 서비스에 의한 사용자 인증
IP 주소에 의거한 패킷 필터링
NTFS 보안 등의 보안 기능
인터넷 도메인 이름을 이용해 웹 서버상의 컨텐츠에 대한 사용 승인과 거부 관리
SSL (Secure Sockets Layer) 과 같은 프로토콜이 사용하는 퍼블릭키 보안 기능

ErrorHTTP Error 503. The service is unavailable.


응용 프로그램 풀 고급 설정
큐 길이: 5000
시작 모드: AlwaysRunning
프로세스 모델
ID: ApplicationPoolIdentity
사용자 프로필 로드: False








웹사이트의 너무 많은 요청으로 인해 큐가 꽉 차거나 서버가 오버로드되는 것을 막기 위해, IIS 의 응용프로그램 큐의 길이를 제한하기 때문에 발생한다.

An error occurred on the server when processing the URL. Please contact the system administrator. If you are the system administrator please click here to find out more about this error.


IIS 관리자 ASP 설정
디버깅 속성
브라우저에 오류 전송: True







Active server pages error (ASP 0126), Unacceptable parent path (ASP 0131)


IIS 관리자 APS 설정 적용
동작
부모 경로 사용: True







Allow external local IP access


제어판 설정
Windows 방화벽 고급 설정
인바운드 규칙
새 규칙…
미리 정의됨: World Wide Web 서비스(HTTP)
World Wide Web 서비스: HTTP 트래픽 인













Keep set portscommon.aspgsServerName = Request.ServerVariables(&quot;SERVER_NAME&quot;) &amp;&quot;:8001&quot;
]]></content>
      <categories>
        <category>server</category>
        <category>iis</category>
      </categories>
  </entry>
  <entry>
    <title>heroku</title>
    <url>/server/heroku/</url>
    <content><![CDATA[
  https://www.heroku.com
  https://devcenter.heroku.com/articles/getting-started-with-nodejs


Setupheroku loginEmail: gronkout@gmail.comPassword: ****heroku create// https://limitless-mesa-38233.herokuapp.com/ | https://git.heroku.com/limitless-mesa-38233.gitgit initgit remote add heroku https://git.heroku.com/limitless-mesa-38233.githeroku config:set NPM_CONFIG_PRODUCTION=falseheroku config:set HOST=0.0.0.0heroku config:set NODE_ENV=productiongit add .git commit -m &quot;init&quot;git push heroku master

package.json&quot;scripts&quot;: &#123;  &quot;heroku-postbuild&quot;: &quot;npm run build&quot;&#125;

Command







heroku login
로그인


heroku logout
로그아웃


heroku create
랜덤한 저장소 생성 (random.herokuapp.com)


heroku create [unique]
유일한 이름으로 저장소 생성 (unique.herokuapp.com)


heroku apps
전체 앱 목록


heroku config:set 환경변수_KEY=환경변수_VALUE
환경변수 입력


heroku config
모든 환경변수 출력


heroku config:get 환경변수_KEY
하나의 환경변수 출력


heroku config:unset 환경변수_KEY
하나의 환경변수 제거


heroku logs
콘솔 로그


heroku logs --tail
콘솔 로그 감시


]]></content>
      <categories>
        <category>server</category>
        <category>heroku</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa server</title>
    <url>/server/koa/</url>
    <content><![CDATA[
  https://koajs.com


Setupnpm install --save koa

Add Routernpm install --save koa-router

const Koa = require(&#x27;koa&#x27;);const Router = require(&#x27;koa-router&#x27;);const app = new Koa();const router = new Router();// 라우터 설정router.get(&#x27;/&#x27;, (ctx) =&gt; &#123;  ctx.body = &#x27;home!&#x27;;&#125;);// http://localhost:4000/about/abcrouter.get(&#x27;/about/:name?&#x27;, (ctx) =&gt; &#123;  const &#123; name &#125; = ctx.params;  ctx.body = `about! $&#123;name&#125;`;&#125;);// http://localhost:4000/posts?id=3router.get(&#x27;/posts&#x27;, (ctx) =&gt; &#123;  const &#123; id &#125; = ctx.query;  ctx.body = `posts! $&#123;id&#125;`;&#125;);// app 인스턴스에 라우터 적용app.use(router.routes()).use(router.allowedMethods());app.listen(4000, () =&gt; &#123;  console.log(&#x27;listening to port 4000&#x27;);&#125;);

Change API modulesrc/index.jsconst Koa = require(&#x27;koa&#x27;);const Router = require(&#x27;koa-router&#x27;);const api = require(&#x27;./api&#x27;);const app = new Koa();const router = new Router();// 라우터 설정router.use(&#x27;/api&#x27;, api.routes());// app 인스턴스에 라우터 적용app.use(router.routes()).use(router.allowedMethods());app.listen(4000, () =&gt; &#123;  console.log(&#x27;listening to port 4000&#x27;);&#125;);

src/api/index.jsconst Router = require(&#x27;koa-router&#x27;);const posts = require(&#x27;./posts&#x27;);const api = new Router();api.use(&#x27;/posts&#x27;, posts.routes());module.exports = api;

src/api/posts/index.jsconst Router = require(&#x27;koa-router&#x27;);const posts = new Router();const printInfo = (ctx) =&gt; &#123;  ctx.body = &#123;    method: ctx.method,    path: ctx.path,    params: ctx.params,  &#125;;&#125;;posts.get(&#x27;/&#x27;, printInfo);posts.post(&#x27;/&#x27;, printInfo);posts.get(&#x27;/:id&#x27;, printInfo);posts.patch(&#x27;/:id&#x27;, printInfo);posts.put(&#x27;/:id&#x27;, printInfo);posts.delete(&#x27;/:id&#x27;, printInfo);module.exports = posts;

Add BodyParsernpm install --save koa-bodyparser

src/index.jsconst Koa = require(&#x27;koa&#x27;);const Router = require(&#x27;koa-router&#x27;);const bodyParser = require(&#x27;koa-bodyparser&#x27;);const api = require(&#x27;./api&#x27;);const app = new Koa();const router = new Router();router.use(&#x27;/api&#x27;, api.routes());app.use(bodyParser());app.use(router.routes()).use(router.allowedMethods());app.listen(4000, () =&gt; &#123;  console.log(&#x27;listening to port 4000&#x27;);&#125;);

src/api/posts/index.jsconst Router = require(&#x27;koa-router&#x27;);const postsCtrl = require(&#x27;./posts.ctrl&#x27;);const posts = new Router();posts.get(&#x27;/&#x27;, postsCtrl.list);posts.post(&#x27;/&#x27;, postsCtrl.write);posts.get(&#x27;/:id&#x27;, postsCtrl.read);posts.patch(&#x27;/:id&#x27;, postsCtrl.update);posts.put(&#x27;/:id&#x27;, postsCtrl.replace);posts.delete(&#x27;/:id&#x27;, postsCtrl.remove);module.exports = posts;

src/api/posts/posts.ctrl.jslet postId = 2; // id 초기값const posts = [  &#123; id: 1, title: &#x27;제목 1&#x27;, body: &#x27;내용 1&#x27; &#125;,  &#123; id: 2, title: &#x27;제목 2&#x27;, body: &#x27;내용 2&#x27; &#125;,];// 포스트 목록 조회 GET /api/postsexports.list = (ctx) =&gt; &#123;  ctx.body = posts;&#125;;// 포스트 작성 POST /api/posts &#123; title, body &#125;exports.write = (ctx) =&gt; &#123;  const &#123; title, body &#125; = ctx.request.body;  const post = &#123; id: ++postId, title, body &#125;;  posts.push(post);  ctx.body = post;&#125;;// 특정 포스트 조회 GET /api/posts/:idexports.read = (ctx) =&gt; &#123;  const &#123; id &#125; = ctx.params;  // 파라미터로 받은 스트링과 비교하기 위해 데이터의 id 값을 스트링으로 변환  const post = posts.find(p =&gt; p.id.toString() === id);  // 포스트 없을 때 오류 처리  if (!post) &#123;    ctx.status = 404;    ctx.body = &#123; message: &#x27;포스트가 존재하지 않습니다.&#x27; &#125;;    return;  &#125;  ctx.body = post;&#125;;// 특정 포스트 수정(특정 필드 변경) PATCH /api/posts/:id &#123; title, body &#125;exports.update = (ctx) =&gt; &#123;  const &#123; id &#125; = ctx.params;  const index = posts.findIndex(p =&gt; p.id.toString() === id);  if (index === -1) &#123;    ctx.status = 404;    ctx.body = &#123; message: &#x27;포스트가 존재하지 않습니다.&#x27; &#125;;    return;  &#125;  posts[index] = &#123;    ...posts[index],    ...ctx.request.body,  &#125;;  ctx.body = posts[index];&#125;;// 특정 포스트 수정(전체 변경) PUT /api/posts/:id 모든 필드의 데이터가 있는지 검증이 필요함! &#123; title, body &#125;exports.replace = (ctx) =&gt; &#123;  const &#123; id &#125; = ctx.params;  const index = posts.findIndex(p =&gt; p.id.toString() === id);  if (index === -1) &#123;    ctx.status = 404;    ctx.body = &#123; message: &#x27;포스트가 존재하지 않습니다.&#x27; &#125;;    return;  &#125;  posts[index] = &#123;    id,    ...ctx.request.body,  &#125;;  ctx.body = posts[index];&#125;;// 특정 포스트 제거 DELETE /api/posts/:idexports.remove = (ctx) =&gt; &#123;  const &#123; id &#125; = ctx.params;  const index = posts.findIndex(p =&gt; p.id.toString() === id);  if (index === -1) &#123;    ctx.status = 404;    ctx.body = &#123; message: &#x27;포스트가 존재하지 않습니다.&#x27; &#125;;    return;  &#125;  posts.splice(index, 1);  ctx.status = 204; // No Content&#125;;
]]></content>
      <categories>
        <category>server</category>
        <category>koa</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>NginX server</title>
    <url>/server/nginx/</url>
    <content><![CDATA[
  https://nginx.org/en


SetupStable versionNon-Sucking Service Manager
Nginx\conf\nginx.confserver &#123;  listen 1000; // 포트  server_name localhost; // IP  root C:/Workspace; // 루트 경로  location / &#123;    index index.html index.htm index.php; // 인덱스 파일    autoindex on; // 자동 인덱스  &#125;&#125;

ModulesPCREftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre

NginX 는 Perl5 에서 사용하는 정규표현식 라이브러리인 PCRE 를 사용한다.

opensslhttps://www.openssl.org/source

https 모듈인 HttpSslModule 을 사용하기 위해서는 openssl 이 필요하다.

zlibhttp://zlib.net

ngx_http_gzip_module 모듈을 사용하기 위해서는 zlib 라이브러리가 필요하다.

]]></content>
      <categories>
        <category>server</category>
        <category>nginx</category>
      </categories>
  </entry>
  <entry>
    <title>Server Status code</title>
    <url>/server/status/</url>
    <content><![CDATA[
  https://developer.mozilla.org/ko/docs/Web/HTTP/Status


100 Continue이 임시적인 응답은 지금까지의 상태가 괜찮으며 클라이언트가 계속해서 요청을 하거나 이미 요청을 완료한 경우에는 무시해도 되는 것을 알려준다.
101 Switching Protocol이 코드는 클라이언트가 보낸 Upgrade 요청 헤더에 대한 응답에 들어가며 서버에서 프로토콜을 변경 할 것임을 알려준다.
102 Processing이 코드는 서버가 요청을 수신하였으며 이를 처리하고 있지만, 아직 제대로 된 응답을 알려줄 수 없음을 알려준다.
103 Early Hints이 상태 코드는 주로 Link 헤더와 함께 사용되어 서버가 응답을 준비하는 동안 사용자 에이전트가 (user agent) 사전 로딩 (preloading) 을 시작 할 수 있도록 한다.
200 OK요청이 성공적으로 되었다.성공의 의미는 HTTP 메소드에 따라 달라진다.








GET
리소스를 불러와서 메시지 바디에 전송되었음


HEAD
개체 해더가 메시지 바디에 있음


PUT &#x2F; POST
수행 결과에 대한 리소스가 메시지 바디에 전송되었음


TRACE
메시지 바디는 서버에서 수신한 요청 메시지를 포함하고 있음


201 Created요청이 성공적이었으며 그 결과로 새로운 리소스가 생성되었다.이 응답은 일반적으로 POST 요청 또는 일부 PUT 요청 이후에 따라온다.
202 Accepted요청을 수신하였지만 그에 응하여 행동 할 수 없다.이 응답은 요청 처리에 대한 결과를 이후에 HTTP 로 비동기 응답을 보내는 것에 대해서 명확하게 명시하지 않는다.이 것은 다른 프로세스에서 처리 또는 서버가 요청을 다루고 있거나 배치 프로세스를 하고 있는 경우를 위해 만들어졌다.
203 Non-Authoritative Information이 응답 코드는 돌려받은 메타 정보 세트가 오리진 서버의 것과 일치하지 않지만 로컬이나 서드 파티 복사본에서 모아졌음을 의미한다.이러한 조건에서는 이 응답이 아니라 200 OK 응답을 반드시 우선된다.
204 No Content요청에 대해서 보내줄 수 있는 콘텐츠가 없지만, 헤더는 의미있을 수 있다.사용자-에이전트는 리소스가 캐시된 헤더를 새로운 것으로 업데이트 할 수 있다.
205 Reset Content이 응답 코드는 요청을 완수한 이후에 사용자 에이전트에게 이 요청을 보낸 문서 뷰를 리셋하라고 알려준다.
206 Partial Content이 응답 코드는 클라이언트에서 복수의 스트림을 분할 다운로드를 하고자 범위 헤더를 전송했기 때문에 사용된다.
207 Multi-Status멀티-상태 응답은 여러 리소스가 여러 상태 코드인 상황이 적절한 경우에 해당되는 정보를 전달한다.
208 Multi-Statuspropstat (property 와 status 의 합성어) 응답 속성으로 동일 컬렉션으로 바인드된 복수의 내부 멤버를 반복적으로 열거하는 것을 피하기 위해 사용된다.
226 IM Used (HTTP Delta encoding)서버가 GET 요청에 대한 리소스의 의무를 다 했고, 그리고 응답이 하나 또는 그 이상의 인스턴스 조작이 현재 인스턴스에 적용이 되었음을 알려준다.
300 Multiple Choice요청에 대해서 하나 이상의 응답이 가능하다.사용자 에이전트 또는 사용자는 그중에 하나를 반드시 선택해야 한다.응답 중 하나를 선택하는 방법에 대한 표준화 된 방법은 존재하지 않다.
301 Moved Permanently이 응답 코드는 요청한 리소스의 URI 가 변경되었음을 의미한다.새로운 URI 가 응답에서 아마도 주어질 수 있다.
302 Found이 응답 코드는 요청한 리소스의 URI 가 일시적으로 변경되었음을 의미한다.새롭게 변경된 URI 는 나중에 만들어질 수 있다.그러므로, 클라이언트는 향후의 요청도 반드시 동일한 URI로 해야한다.
303 See Other클라이언트가 요청한 리소스를 다른 URI 에서 GET 요청을 통해 얻어야 할 때, 서버가 클라이언트로 직접 보내는 응답이다.
304 Not Modified이 것은 캐시를 목적으로 사용된다.이 것은 클라이언트에게 응답이 수정되지 않았음을 알려주며, 그러므로 클라이언트는 계속해서 응답의 캐시된 버전을 사용 할 수 있다.
305 Use Proxy이전 버전의 HTTP 기술 사양에서 정의되었으며, 요청한 응답은 반드시 프록시를 통해서 접속해야 하는 것을 알려준다.이 것은 프록시의 in-band 설정에 대한 보안상의 걱정으로 인하여 사라져가고 있다.
306 unused이 응답 코드는 더이상 사용되지 않으며, 현재는 추후 사용을 위해 예약되어 있다.이 것은 HTTP 1.1 기술사양 이전 버전에서 사용되었다.
307 Temporary Redirect클라리언트가 요청한 리소스가 다른 URI 에 있으며, 이전 요청과 동일한 메소드를 사용하여 요청해야 할 때, 서버가 클라이언트에 이 응답을 직접 보낸다.이 것은 302 Found HTTP 응답 코드와 동일한 의미를 가지고 있으며, 사용자 에이전트가 반드시 사용된 HTTP 메소드를 변경하지 말아야 하는 점만 다르다.만약 첫 요청에 POST 가 사용되었다면, 두번째 요청도 반드시 POST 를 사용해야 한다.
308 Permanent Redirect이 것은 리소스가 이제 HTTP 응답 헤더의 Location 에 명시된 영구히 다른 URI 에 위치하고 있음을 의미한다.이 것은 301 Moved Permanently HTTP 응답 코드와 동일한  의미를 가지고 있으며, 사용자 에이전트가 반드시 HTTP 메소드를 변경하지 말아야 하는 점만 다르다.만약 첫 요청에 POST 가 사용되었다면, 두번째 요청도 반드시 POST 를 사용해야 한다.
400 Bad Request이 응답은 잘못된 문법으로 인하여 서버가 요청을 이해 할 수 없음을 의미한다.
401 Unauthorized비록 HTTP 표준에서는 “미승인(unauthorized)”를 명확히 하고 있지만, 의미상 이 응답은 “비인증(unauthenticated)”을 의미한다.클라이언트는 요청한 응답을 받기 위해서는 반드시 스스로를 인증해야 한다.
402 Payment Required이 응답 코드는 나중에 사용될 것을 대비해 예약되었다.첫 목표로는 디지털 결제 시스템에 사용하기 위하여 만들어졌지만 지금 사용되고 있지는 않다.
403 Forbidden클라이언트는 콘텐츠에 접근 할 권리를 가지고 있지 않다.예를들어 그들은 미승인이어서 서버는 거절을 위한 적절한 응답을 보낸다.401 과 다른 점은 서버가 클라이언트가 누구인지 알고 있다.
404 Not Found서버는 요청받은 리소스를 찾을 수 없다.브라우저에서는 알려지지 않은 URL 을 의미한다.이 것은 API 에서 종점은 적절하지만 리소스 자체는 존재하지 않음을 의미 할 수도 있다.서버들은 인증받지 않은 클라이언트로부터 리소스를 숨기기 위하여 이 응답을 403 대신에 전송 할 수도 있다.이 응답 코드는 웹에서 반복적으로 발생하기 때문에 가장 유명 할지도 모른다.
405 Method Not Allowed요청한 메소드는 서버에서 알고 있지만, 제거되었고 사용할 수 없다.예를 들어, 어떤 API 에서 리소스를 삭제하는 것을 금지할 수 있다.필수적인 메소드인 GET 과 HEAD 는 제거될 수 없으며 이 에러 코드를 리턴할 수 없다.
406 Not Acceptable이 응답은 서버가 서버 주도 콘텐츠 협상 을 수행한 이후, 사용자 에이전트에서 정해준 규격에 따른 어떠한 콘텐츠도 찾지 않았을 때, 웹서버가 보낸다.
407 Proxy Authentication Required이 것은 401 과 비슷하지만 프록시에 의해 완료된 인증이 필요하다.
408 Request Timeout이 응답은 요청을 한지 시간이 오래된 연결에 일부 서버가 전송하며, 어떨 때에는 이전에 클라이언트로부터 어떠한 요청이 없었다고 하더라도 보내지기도 한다.이 것은 서버가 사용되지 않는 연결을 끊고 싶어한다는 것을 의미한다.이 응답은 특정 몇몇 브라우저에서 빈번하게 보이는데, Chrome, Firefox 27+, 또는 IE 9 와 같은 웹서핑 속도를 올리기 위해 HTTP 사전 연결 메카니즘을 사용하는 브라우저들이 해당된다.또한 일부 서버는 이 메시지를 보내지 않고 연결을 끊어버리기도 한다.
409 Conflict이 응답은 요청이 현재 서버의 상태와 충돌될 때 보낸다.
410 Gone이 응답은 요청한 콘텐츠가 서버에서 영구적으로 삭제되었으며, 전달해 줄 수 있는 주소 역시 존재하지 않을 때 보낸다.클라이언트가 그들의 캐쉬와 리소스에 대한 링크를 지우기를 기대한다.HTTP 기술 사양은 이 상태 코드가 “일시적인, 홍보용 서비스”에 사용되기를 기대한다.API 는 알려진 리소스가 이 상태 코드와 함께 삭제되었다고 강요해서는 안된다.
411 Length Required서버에서 필요로 하는 Content-Length 헤더 필드가 정의되지 않은 요청이 들어왔기 때문에 서버가 요청을 거절한다.
412 Precondition Failed클라이언트의 헤더에 있는 전제조건은 서버의 전제조건에 적절하지 않다.
413 Payload Too Large요청 엔티티는 서버에서 정의한 한계보다 크다.서버는 연결을 끊거나 혹은 Retry-After 헤더 필드로 돌려보낼 것이다.
414 URI Too Long클라이언트가 요청한 URI 는 서버에서 처리하지 않기로 한 길이보다 길다.
415 Unsupported Media Type요청한 미디어 포맷은 서버에서 지원하지 않는다, 서버는 해당 요청을 거절할 것이다.
416 Requested Range Not SatisfiableRange 헤더 필드에 요청한 지정 범위를 만족시킬 수 없다.범위가 타겟 URI 데이터의 크기를 벗어났을 가능성이 있다.
417 Expectation Failed이 응답 코드는 Expect 요청 헤더 필드로 요청한 예상이 서버에서는 적당하지 않음을 알려준다.
418 I’m a teapot서버는 커피를 찻 주전자에 끓이는 것을 거절한다.
421 Misdirected Request서버로 유도된 요청은 응답을 생성할 수 없다.이 것은 서버에서 요청 URI 와 연결된 스킴과 권한을 구성하여 응답을 생성할 수 없을 때 보내진다.
422 Unprocessable Entity요청은 잘 만들어졌지만, 문법 오류로 인하여 따를 수 없다.
423 Locked리소스는 접근하는 것이 잠겨있다.
424 Failed Dependency이전 요청이 실패하였기 때문에 지금의 요청도 실패하였다.
426 Upgrade Required서버는 지금의 프로토콜을 사용하여 요청을 처리하는 것을 거절하였지만, 클라이언트가 다른 프로토콜로 업그레이드를 하면 처리를 할지도 모른다.서버는 Upgrade 헤더와 필요로 하는 프로토콜을 알려주기 위해 426 응답에 보낸다.
428 Precondition Required오리진 서버는 요청이 조건적이어야 한다.클라이언트가 리소스를 GET 해서, 수정하고, 그리고 PUT 으로 서버에 돌려놓는 동안 서드파티가 서버의 상태를 수정하여 발생하는 충돌인 ‘업데이트 상실’을 예방하기 위한 목적이다.
429 Too Many Requests사용자가 지정된 시간에 너무 많은 요청을 보냈다.
431 Request Header Fields Too Large요청한 헤더 필드가 너무 크기 때문에 서버는 요청을 처리하지 않을 것이다.요청은 크기를 줄인 다음에 다시 전송해야 한다.
451 Unavailable For Legal Reasons사용자가 요청한 것은 정부에 의해 검열된 웹 페이지와 같은 불법적인 리소스이다.
500 Internal Server Error서버가 처리 방법을 모르는 상황이 발생했다.서버는 아직 처리 방법을 알 수 없다.
501 Not Implemented요청 방법은 서버에서 지원되지 않으므로 처리할 수 없다.서버가 지원해야 하는 유일한 방법은 GET 과 HEAD 이다.이 코드는 반환하면 안된다.
502 Bad Gateway이 오류 응답은 서버가 요청을 처리하는 데 필요한 응답을 얻기 위해 게이트웨이로 작업하는 동안 잘못된 응답을 수신했음을 의미한다.
503 Service Unavailable서버가 요청을 처리할 준비가 되지 않았다.일반적인 원인은 유지보수를 위해 작동이 중단되거나 과부하가 걸렸을 때이다.이 응답과 함께 문제를 설명하는 사용자 친화적인 페이지가 전송되어야 한다는 점에 유의해야 한다.이 응답은 임시 조건에 사용되어야 하며, HTTP 헤더는 가능하면 서비스를 복구하기 전 예상 시간을 포함해야 한다.웹마스터는 또한 이러한 일시적인 조건 응답을 캐시하지 않아야 하므로 이 응답과 함께 전송되는 캐싱 관련 헤더에 대해서도 주의해야 한다.
504 Gateway Timeout이 오류 응답은 서버가 게이트웨이 역할을 하고 있으며 적시에 응답을 받을 수 없을 때 주어진다.
505 HTTP Version Not Supported요청에 사용된 HTTP 버전은 서버에서 지원되지 않는다.
506 Variant Also Negotiates서버에 내부 구성 오류가 있다.즉, 요청을 위한 투명한 컨텐츠 협상이 순환 참조로 이어진다.
507 Insufficient Storage서버에 내부 구성 오류가 있다.즉, 선택한 가변 리소스는 투명한 콘텐츠 협상에 참여하도록 구성되므로 협상 프로세스의 적절한 종료 지점이 아니다.
508 Loop Detected서버가 요청을 처리하는 동안 무한 루프를 감지했다.
510 Not Extended서버가 요청을 이행하려면 요청에 대한 추가 확장이 필요하다.
511 Network Authentication Required511 상태 코드는 클라이언트가 네트워크 액세스를 얻기 위해 인증을 받아야 할 필요가 있음을 나타낸다.
]]></content>
      <categories>
        <category>server</category>
        <category>status</category>
      </categories>
  </entry>
  <entry>
    <title>Typescript Asynchronous v4.6.2</title>
    <url>/typescript/asynchronous/</url>
    <content><![CDATA[Promisefunction p(): Promise&lt;void&gt; &#123;  return new Promise&lt;void&gt;(    (resolve: () =&gt; void, reject: () =&gt; void) =&gt; &#123;      setTimeout(() =&gt; &#123;        resolve();      &#125;, 1000);    &#125;  );&#125;p().then(() =&gt; &#123;  console.log(&#x27;done&#x27;);&#125;);

Errorfunction e(): Promise&lt;void&gt; &#123;  return new Promise&lt;void&gt;(    (resolve: () =&gt; void, reject: () =&gt; void) =&gt; &#123;      reject();    &#125;  );&#125;e().then(() =&gt; &#123;  console.log(&#x27;no error&#x27;);&#125;).catch(() =&gt; &#123;  console.log(&#x27;an error occurred&#x27;);&#125;);

Return valueinterface IMessage &#123;  id: number;  message: string;&#125;function s(): Promise&lt;IMessage&gt; &#123;  return new Promise&lt;IMessage&gt;(    (resolve: (str: IMessage) =&gt; void, reject: (str: IMessage) =&gt; void) =&gt; &#123;      setTimeout(() =&gt; &#123;        resolve(&#123; id: 1, message:&#x27;text&#x27; &#125;);      &#125;, 1000);    &#125;  );&#125;s().then((obj: IMessage) =&gt; &#123;  console.log(obj.id, obj.message);&#125;);

async &#x2F; awaitfunction d(): Promise&lt;void&gt; &#123;  return new Promise&lt;void&gt;(    (resolve: () =&gt; void, reject: () =&gt; void) =&gt; &#123;      setTimeout(() =&gt; &#123;        console.log(0);        resolve();      &#125;, 1000);    &#125;  );&#125;async function fn() &#123;  console.log(1);  await d();  console.log(2);&#125;fn(); // 1 0 2

Errorfunction e(): Promise&lt;string&gt; &#123;  return new Promise&lt;string&gt;(    (resolve: (message: string) =&gt; void, reject: (message: string) =&gt; void) =&gt; &#123;      setTimeout(() =&gt; &#123;        reject(&#x27;error&#x27;);      &#125;, 1000);    &#125;  );&#125;async function fn() &#123;  console.log(1);  try &#123;    await e();  &#125; catch (error) &#123;    console.log(error);  &#125;  console.log(2);&#125;fn(); // 1 &quot;error&quot; 2

Return valuefunction s(): Promise&lt;string&gt; &#123;  return new Promise&lt;string&gt;(    (resolve: (message: string) =&gt; void, reject: (message: string) =&gt; void) =&gt; &#123;      setTimeout(() =&gt; &#123;        resolve(&#x27;text&#x27;);      &#125;, 1000);    &#125;  );&#125;async function fn() &#123;  let message: string = await s();  console.log(message);&#125;fn(); // &quot;text&quot;
]]></content>
      <categories>
        <category>typescript</category>
        <category>asynchronous</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript Classes v4.6.2</title>
    <url>/typescript/classes/</url>
    <content><![CDATA[
  https://www.typescriptlang.org/docs/handbook/2/classes.html
  https://joshua1988.github.io/ts/guide/classes.html


implementsinterface IPrint &#123;  print(): void;&#125;function printClass(instance: IPrint) &#123;  instance.print();&#125;class A implements IPrint &#123;  print(): void &#123;    console.log(&#x27;A&#x27;);  &#125;&#125;let a: A = new A();printClass(a);

extendsclass Book &#123;  name: string;  author: string;  constructor(name: string, author: string) &#123;    this.name = name;    this.author = author;  &#125;  info(input: string = &#x27;Initial&#x27;): void &#123;    console.log(input, this.name, this.author);  &#125;&#125;class EBook extends Book &#123;  type: string;  constructor(name: string, author: string, type: string) &#123;    super(name, author); // 상위 클래스 생성자 호출    this.type = type;  &#125;  // 상위 클래스 메서드 오버라이드  info(): void &#123;    super.info(); // 상위 클래스 매서드 호출    console.log(this.name, this.author, this.type);  &#125;&#125;// IS-A relationship 에 의한 상위 클래스 타입 사용let book: Book = new EBook(&#x27;name&#x27;, &#x27;author&#x27;, &#x27;type&#x27;);

Access modifierclass Book &#123;  protected name: string;  public constructor(name: string, private _author: string) &#123;    this.name = name;  &#125;  public info(): void &#123;    console.log(this.name, this._author);  &#125;  get author(): string &#123;    return this._author;  &#125;  set author(value: string) &#123;    this._author = value;  &#125;&#125;class EBook extends Book &#123;  private type: string;  public constructor(name: string, author: string, type: string) &#123;    super(name, author);    this.type = type;  &#125;  public info(): void &#123;    console.log(this.name, this.author, this.type);  &#125;&#125;let book:Book = new EBook(&#x27;name&#x27;, &#x27;author&#x27;, &#x27;type&#x27;);book.info();book.author = &#x27;new author&#x27;;book.author; // &quot;new author&quot;









public
접근 제한이 없어서 클래스 외부에서 자유롭게 접근이 가능


protected
클래스 외부에서 접근할 수 없음 (단, 상속 받은 하위 클래스에서는 접근이 가능)


private
클래스 외부에서 접근할 수 없음 (상속 받은 하위 클래스에서도 접근이 불가능)


Readonly propertyclass Book &#123;  public readonly name: string;  constructor(name: string) &#123;    this.name = name;  &#125;&#125;let book: Book = new Book(&#x27;name&#x27;); // 반드시 처음 값을 지정해야 함book.name = &#x27;new name&#x27;; // error

class Book &#123;  constructor(readonly name: string) &#123;    this.name = name;  &#125;&#125;

Static function &#x2F; propertyclass Book &#123;  public name: string;  static count: number; // 인스턴스끼리 값을 공유 함  constructor(name: string) &#123;    this.name = name;    Book.count++;  &#125;  static info(): void &#123;    console.log(&#x27;static&#x27;);  &#125;&#125;let book1: Book = new Book(&#x27;name1&#x27;);let book2: Book = new Book(&#x27;name2&#x27;);Book.info; // &quot;static&quot;Book.count; // 2

NameSpacenamespace NameSpace &#123;  class A &#123;&#125;  export class B &#123;&#125;&#125;let a = new NameSpace.A(); // errorlet b = new NameSpace.B();

Abstract classabstract class Book &#123;  public name: string;  constructor(name: string) &#123;    this.name = name;  &#125;  abstract info (): void; // 상속받는 클래스는 info 메서드를 구현해야 함&#125;class EBook extends Book &#123;  info(): void &#123;    console.log(this.name);  &#125;&#125;let book: Book = new EBook(&#x27;name&#x27;);book.info();


하나 이상의 abstract 메서드를 가지고 있는 class 를 의미한다.메서드의 선언만을 가지고 있기 때문에 직접적인 객체생성을 할 수 없다.상속을 이용해 하위 클래스에서 abstract 메서드를 오버라이딩해서 사용해야 한다.

Interfaceclass Book &#123;  name: string;&#125;interface EBook extends Book &#123;  author: string;&#125;let book: EBook = &#123;  name: &#x27;파우스트&#x27;,  author: &#x27;괴테&#x27;&#125;;
]]></content>
      <categories>
        <category>typescript</category>
        <category>classes</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript Decorators v4.6.2</title>
    <url>/typescript/decorators/</url>
    <content><![CDATA[
  https://www.typescriptlang.org/docs/handbook/decorators.html


Basic decoratorfunction decorator(constructor: Function) &#123;  console.log(&#x27;decorator&#x27;);&#125;@decoratorclass A &#123;&#125;// &quot;decorator&quot;let a1 = new A();let a2 = new A();


클래스 정의에 프로그래밍적으로 검사하는 방법을 제공하거나 특정 동작을 추가할 수도 있다.C# 에서는 어트리뷰트, Java 에서는 어노테이션이라고 한다.아무리 많은 인스턴스를 만들어도 데코레이터 함수는 클래스를 정의할 때 한번만 호출된다.

Multi decoratorsfunction decorator1(constructor: Function) &#123;  console.log(&#x27;decorator1&#x27;);&#125;function decorator2(constructor: Function) &#123;  console.log(&#x27;decorator2&#x27;);&#125;@decorator1@decorator2class A &#123;&#125;// &quot;decorator2&quot;// &quot;decorator1&quot;


코드에 표시되는 순서대로 평가되지만, 적용한 순서와 반대로 호출된다.

Decorator factoryfunction decorator(name: string) &#123;  return function(constructor: Function) &#123;    console.log(name);  &#125;&#125;@decorator(&#x27;text&#x27;)class A &#123;&#125;// &quot;text&quot;


인자를 받게 하려면 데코레이터 팩토리를 사용해야 한다.

Class parameterfunction decorator(constructor: Function) &#123;  // constructor 의 name 속성은 ES 6 기능이기 때문에 any 타입으로 형변환 해야 함  console.log(constructor, (&lt;any&gt;constructor).name);  constructor.prototype.test = 123;&#125;@decoratorclass A &#123;&#125;// function A() &#123;&#125;, Alet a = new A();(&lt;any&gt;a).test; // 123


1 개의 인자 (클래스 프로토타입) 로 호출한다.

Class propertyfunction decorator(target: any, propertyKey: number) &#123;  console.log(target, target.constructor, target.constructor.name);  console.log(propertyKey);&#125;class A &#123;  @decorator  age: number;&#125;// [object Object], function A() &#123;&#125;, A// age


클래스 속성에 사용하는 데코레이터 함수로 2 개의 인자 (클래스 프로토타입, 속성 이름) 로 호출한다.클래스 인스턴스에 특정 속성이 선언됐는지 확인하는 기능을 제공한다.

Static propertyfunction decorator(target: any, propertyKey: number) &#123;  if (typeof(target) === &#x27;function&#x27;) &#123;    console.log(target, target.constructor, target.name);  &#125; else &#123;    console.log(target, target.constructor, target.constructor.name);  &#125;  console.log(propertyKey);&#125;class A &#123;  @decorator  static age: number;&#125;

Methodfunction decorator(target: any, methodName: string, descriptor?: PropertyDescriptor) &#123;  let original = target[methodName];  let audit = function() &#123;    console.log(&#x27;override&#x27;, methodName);    original.apply(this, arguments);  &#125;;  target[methodName] = audit;&#125;class A &#123;  @decorator  print(text: string) &#123;    console.log(text);  &#125;&#125;let a = new A();a.print(&#x27;text&#x27;);// &quot;override&quot;, print// &quot;text&quot;


3 개의 인자 (클래스 프로토타입, 메서드 이름, 메서드 설명자) 로 호출한다.세번째 인자인 메서드 설명자는 ES 5 이상에서 컴파일할 때만 값이 들어간다.어떤 이벤트 기록을 만들어 메서드가 호출될 때마다 콘솔에 메세지를 기록하고 싶다면 메서드 데코레이터를 적용하기 좋은 상황이다.

Method parameterfunction decorator(target: any, methodName: string, parameterIndex: number) &#123;  console.log(target, methodName, parameterIndex);&#125;class A &#123;  print(@decorator text: string) &#123;&#125;&#125;// [object Object], print, 0


특정 메서드의 인자를 꾸밀 때 사용한다.

Decorator metadatafunction decorator(target: any, methodName: string, parameterIndex: number) &#123;&#125;class A &#123;  print(@decorator a: number, b: string, c: boolean): number &#123;    return 10;  &#125;&#125;


데코레이터에 전달되는 정보를 보충하기 위해 클래스 정의에서 생성되는 메타 데이터이다.

ExamplesUse decorator metadatanpm install reflect-metadatanpm install @types/reflect-metadata

import &#x27;reflect-metadata&#x27;;function decorator(target: any, methodName: string, parameterIndex: number) &#123;  let designType = Reflect.getMetadata(&#x27;design:type&#x27;, target, methodName);  console.log(designType);  let designParamTypes = Reflect.getMetadata(&#x27;design:paramtypes&#x27;, target, methodName);  console.log(designParamTypes);  let designReturnType = Reflect.getMetadata(&#x27;design:returntype&#x27;, target, methodName);  console.log(designReturnType);&#125;


데코레이터에 추가 정보를 사용하려면 외부 라이브러리인 reflect-metadata 를 사용한다.

]]></content>
      <categories>
        <category>typescript</category>
        <category>decorators</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript Functions v4.6.2</title>
    <url>/typescript/functions/</url>
    <content><![CDATA[
  https://www.typescriptlang.org/docs/handbook/2/functions.html
  https://joshua1988.github.io/ts/guide/functions.html


Object parameter// 오브젝트 타입을 직접 입력하는 것보다 별칭 또는 인터페이스를 사용하면 중복 코드를 줄일 수 있음function addTodo(todo: &#123; id: number; title: string; done: boolean &#125;): void &#123;  todoList.push(todo);&#125;

Return typefunction fn(a: number): string &#123;  return a.toString();&#125;const fn = (a: number, b: number): number =&gt; &#123;  return a + b;&#125;;

Optional parametersfunction fn(a: string, b?: string) &#123;  return a + b;&#125;;fn(&#x27;text&#x27;); // &quot;textundefined&quot;


함수 정의에서 인자의 마지막에만 사용할 수 있으며, 개수는 상관 없다.

Default parametersfunction fn(a: string, b: string = &#x27;!&#x27;) &#123;  return a + b;&#125;;fn(&#x27;text&#x27;); // &quot;text!&quot;

Rest parametersfunction fn(a: string, b: number, ...argArray: number[]) &#123;  console.log(a, b);  if (argArray.length &gt; 0) &#123;    for (let i = 0; i &lt; argArray.length; i++) &#123;      console.log(argArray[i]);    &#125;  &#125;&#125;

Callback, Signaturefunction callback(text) &#123;  console.log(`callback: $&#123;text&#125;`);&#125;;function fn(text, callback) &#123;  console.log(`fn: $&#123;text&#125;`);  if (typeof callback === &#x27;function&#x27;) &#123;    callback(text);  &#125;&#125;fn(&#x27;text&#x27;, callback);

function callback(text: string): void &#123;  console.log(`callback: $&#123;text&#125;`);&#125;;function fn(text: string, callback: (text: string) =&gt; void) &#123;  console.log(`fn: $&#123;text&#125;`);  callback(text);&#125;fn(&#x27;text&#x27;, callback);

Overloadingfunction fn(a: string, b: string): string;function fn(a: number, b: number): number;function fn(a: any, b: any): any &#123;  return a + b;&#125;
]]></content>
      <categories>
        <category>typescript</category>
        <category>functions</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript Generics v4.6.2</title>
    <url>/typescript/generics/</url>
    <content><![CDATA[
  https://www.typescriptlang.org/docs/handbook/2/generics.html
  https://joshua1988.github.io/ts/guide/generics.html


Basicfunction fn&lt;T&gt;(text: T): T &#123;  return text;&#125;const str = fn&lt;string&gt;(&#x27;abc&#x27;);const num = fn&lt;number&gt;(10);const bol = fn&lt;boolean&gt;(true);

class A&lt;T&gt; &#123;  concat(arr: Array&lt;T&gt;): string &#123;    let str = &#x27;&#x27;;    for (let i = 0; i &lt; arr.length; i++) &#123;      if (i &gt; 0) str += &#x27;,&#x27;;      str += arr[i].toString();    &#125;    return str;  &#125;&#125;let str = new A&lt;string&gt;();let num = new A&lt;number&gt;();let a: string[] = [&#x27;a&#x27;, &#x27;b&#x27;];let b: number[] = [1, 2];str.concat(a);str.concat(b); // errornum.concat(a); // errornum.concat(b);


함수를 호출하는 시점에 타입을 결정한다.모든 타입의 객체를 다루면서도 객체 타입 무결성을 유지하는 코드를 작성하는 방법이다.

T typeclass A&lt;T&gt; &#123;  concat(arr: Array&lt;T&gt;): string &#123;    let str = &#x27;&#x27;;    for (let i = 0; i &lt; arr.length; i++) &#123;      if (i &gt; 0) str += &#x27;,&#x27;;      str += arr[i].toString();    &#125;    return str;  &#125;&#125;class B &#123;  private _name: string;  constructor(num: number) &#123;    this._name = num + &#x27;!&#x27;;  &#125;  toString(): string &#123; // 오버라이드    return this._name;  &#125;&#125;let arr: B[] = [new B(1), new B(2)];let test = new A&lt;B&gt;(); // &quot;1!&quot;, &quot;2!&quot;

Generic interfaceenum Gender &#123;  Man,  Woman&#125;interface IPerson &#123;  getName(): string;  getGender(): Gender;&#125;abstract class Person implements IPerson &#123;  protected _name: string;  protected _gender: Gender;  getName() &#123;    return this._name;  &#125;  getGender() &#123;    return this._gender;  &#125;&#125;class Man extends Person &#123;  constructor() &#123;    super();    this._name = &#x27;xy&#x27;;    this._gender = Gender.Man;  &#125;&#125;class Woman extends Person &#123;  constructor() &#123;    super();    this._name = &#x27;xx&#x27;;    this._gender = Gender.Woman;  &#125;&#125;interface IPersonInfo&lt;T extends IPerson&gt; &#123;  print(arg: T);  isMan(arg: T);&#125;class PersonInfo&lt;T extends IPerson&gt; implements IPersonInfo&lt;T&gt; &#123;  print(arg: T) &#123;    console.log(arg.getName(), this.isMan(arg));  &#125;  isMan(arg: T): string &#123;    if (arg.getGender() == Gender.Man) &#123;      return &#x27;Man&#x27;;    &#125; else &#123;      return &#x27;Woman&#x27;;    &#125;  &#125;&#125;let info = new PersonInfo();info.print(new Man()); // &quot;xy Man&quot;info.print(new Woman()); // &quot;xx Woman&quot;

Create objectclass A &#123;  a: number;&#125;class B &#123;  b: string;&#125;class G&lt;T&gt; &#123;  create(arg: &#123;new(): T&#125;): T &#123;    return new arg();  &#125;&#125;let a = new G&lt;A&gt;();let a1: A = a.create(A);let b = new G&lt;B&gt;();let b1: B = b.create(B);
]]></content>
      <categories>
        <category>typescript</category>
        <category>generics</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript Interfaces v4.6.2</title>
    <url>/typescript/interfaces/</url>
    <content><![CDATA[
  https://www.typescriptlang.org/docs/handbook/2/objects.html
  https://joshua1988.github.io/ts/guide/interfaces.html
  https://joshua1988.github.io/ts/guide/type-alias.html


Basic
객체가 구현해야 하는 속성과 메서드를 정의해 사용자 타입을 만드는 방법이다.타입 별칭과 인터페이스의 가장 큰 차이점은 확장 가능 여부이다. (타입 별칭은 확장이 안됨)TypeScript 에서 interface 는 새로운 데이터 타입을 만드는 추상 데이터 타입 (abstract data type) 으로 사용이 되며 일반 변수, 함수, 클래스의 type check 를 위해 사용된다.interface 를 이용하여 타입을 선언하면 interface 안에 명시된 property 의 선언과 method 의 구현이 강제되기 때문에 프로그래밍의 일관성을 확보할 수 있다.일반적으로 I 를 접두어로 사용하여 작성한다.

Optional propertiesinterface IBook &#123;  name: string;  author?: string;&#125;let book: IBook = &#123;  name: &#x27;name&#x27;,  author: &#x27;author&#x27;&#125;;

Readonly propertiesinterface IPoint &#123;  readonly x: number;   y: number;&#125;let point: Point = &#123; x: 10, y: 20 &#125;;point.x = 30; // error

let array: number[] = [1, 2, 3];let roa: ReadonlyArray&lt;number&gt; = array;roa[0] = 5; // errorroa.push(10); // errorarray = roa; // errorarray = roa as number[]; // 가능


const 와 비슷한 역할로 한번 설정되면 값을 변경할 수 없다.

Function parametersinterface IBook &#123;  name: string;  author?: string;&#125;let book: IBook = &#123;  name: &#x27;name&#x27;,  author: &#x27;author&#x27;&#125;;let dock = &#123;  name: &#x27;name&#x27;,  author: &#x27;author&#x27;,  price: 3000&#125;;function info(book: IBook): void &#123;  console.log(book.name, book.author);&#125;info(book);info(dock); // 덕타이핑 지원으로 에러가 나지 않음

Function typesinterface IFn &#123;  (name: string, age: number): void;&#125;let fn: IFn = function(name: string, age: number): void &#123;  console.log(name, age);&#125;;

Indexable Typeslet object = &#123;  name: &#x27;name&#x27;,  age: 10&#125;;let keys = Object.keys(object);for (let i = 0; i &lt; keys.length; i++) &#123;  console.log(object[keys[i]]); // 에러&#125;


object[keys[i]] 부분에서 에러가 발생한다.인덱스 시그니처를 이용하지 않았기 때문에 프로퍼티에 접근할 때 어떤 타입인지를 확인할 수 없어서 묵시적으로 any 타입을 이용하게 된다.tsconfig.json 파일의 &quot;noImplicitAny&quot;: true 옵션을 false 로 변경해서 해결 할 수 있으나 권장하지 않는다.인터페이스를 이용하여 인덱스 시그니처를 설정해 타입을 명시적으로 알려주는 방법을 권장한다.

interface IObject &#123;  [idx: string]: string | number;  [index: number]: string | number;  name: string;  age: number;&#125;let object: IObject = &#123;  name: &#x27;name&#x27;,  age: 10&#125;;let keys = Object.keys(object);for (let i = 0; i &lt; keys.length; i++) &#123;  console.log(object[keys[i]]); // &#x27;name&#x27; 10&#125;

Dictionary patterninterface StringRegex &#123;  [key: string]: RegExp;&#125;let obj: StringRegex = &#123;  cssFile: /\.css$/,  jsFile: /\.js$/,&#125;

constructor interfaceinterface IPersonConstructor &#123;  new (name: string, age: number): Person;&#125;class Person &#123;  name: string;  age: number;  constructor(name: string, age: number) &#123;    this.name = name;    this.age = age;  &#125;&#125;const PersonFactory = &#123;  getInstance: function(construct: IPersonConstructor, name: string, age: number) &#123;    return new construct(name, age);  &#125;&#125;;let person = PersonFactory.getInstance(Person, &#x27;abc&#x27;, 30);

interface extendsinterface IShape &#123;  color: string;&#125;interface IStroke &#123;  width: number;&#125;interface ISquare extends IShape, IStroke &#123;  size: number;&#125;let square = &lt;ISquare&gt;&#123;&#125;; // Type assertionssquare.color = &#x27;red&#x27;;square.size = 10;square.width = 3;
]]></content>
      <categories>
        <category>typescript</category>
        <category>interfaces</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript Setup v4.6.2</title>
    <url>/typescript/setup/</url>
    <content><![CDATA[
  https://www.typescriptlang.org/ko/docs/handbook/integrating-with-build-tools.html
  https://www.typescriptlang.org/ko/play


SetupGlobalnpm install -global typescripttsc -vtsc hello.ts

Localnpm install --save-dev typescriptnpx tsc

tsc CLI optionshttps://www.typescriptlang.org/ko/docs/handbook/compiler-options.html
tsconfighttps://www.typescriptlang.org/tsconfig
tsc --init

tsconfig.json&#123;  &quot;compilerOptions&quot;: &#123;    /* Visit https://aka.ms/tsconfig.json to read more about this file */    /* Projects */    // &quot;incremental&quot;: true,                              /* Enable incremental compilation */    // &quot;composite&quot;: true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */    // &quot;tsBuildInfoFile&quot;: &quot;./&quot;,                          /* Specify the folder for .tsbuildinfo incremental compilation files. */    // &quot;disableSourceOfProjectReferenceRedirect&quot;: true,  /* Disable preferring source files instead of declaration files when referencing composite projects */    // &quot;disableSolutionSearching&quot;: true,                 /* Opt a project out of multi-project reference checking when editing. */    // &quot;disableReferencedProjectLoad&quot;: true,             /* Reduce the number of projects loaded automatically by TypeScript. */    /* Language and Environment */    &quot;target&quot;: &quot;es2016&quot;,                                  /* 어느 버전의 자바스크립트로 컴파일 할 것인지 설정 */    // &quot;lib&quot;: [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */    // &quot;jsx&quot;: &quot;preserve&quot;,                                /* Specify what JSX code is generated. */    // &quot;experimentalDecorators&quot;: true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */    // &quot;emitDecoratorMetadata&quot;: true,                    /* Emit design-type metadata for decorated declarations in source files. */    // &quot;jsxFactory&quot;: &quot;&quot;,                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. &#x27;React.createElement&#x27; or &#x27;h&#x27; */    // &quot;jsxFragmentFactory&quot;: &quot;&quot;,                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. &#x27;React.Fragment&#x27; or &#x27;Fragment&#x27;. */    // &quot;jsxImportSource&quot;: &quot;&quot;,                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */    // &quot;reactNamespace&quot;: &quot;&quot;,                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */    // &quot;noLib&quot;: true,                                    /* Disable including any library files, including the default lib.d.ts. */    // &quot;useDefineForClassFields&quot;: true,                  /* Emit ECMAScript-standard-compliant class fields. */    /* Modules */    &quot;module&quot;: &quot;commonjs&quot;,                                /* Specify what module code is generated. */    // &quot;rootDir&quot;: &quot;./&quot;,                                  /* Specify the root folder within your source files. */    // &quot;moduleResolution&quot;: &quot;node&quot;,                       /* Specify how TypeScript looks up a file from a given module specifier. */    // &quot;baseUrl&quot;: &quot;./&quot;,                                  /* Specify the base directory to resolve non-relative module names. */    // &quot;paths&quot;: &#123;&#125;,                                      /* Specify a set of entries that re-map imports to additional lookup locations. */    // &quot;rootDirs&quot;: [],                                   /* Allow multiple folders to be treated as one when resolving modules. */    // &quot;typeRoots&quot;: [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */    // &quot;types&quot;: [],                                      /* Specify type package names to be included without being referenced in a source file. */    // &quot;allowUmdGlobalAccess&quot;: true,                     /* Allow accessing UMD globals from modules. */    // &quot;resolveJsonModule&quot;: true,                        /* Enable importing .json files */    // &quot;noResolve&quot;: true,                                /* Disallow `import`s, `require`s or `&lt;reference&gt;`s from expanding the number of files TypeScript should add to a project. */    /* JavaScript Support */    // &quot;allowJs&quot;: true,                                  /* 프로젝트 안에서 자바스크립트 확장자 파일 사용을 허용 */    // &quot;checkJs&quot;: true,                                  /* Enable error reporting in type-checked JavaScript files. */    // &quot;maxNodeModuleJsDepth&quot;: 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */    /* Emit */    // &quot;declaration&quot;: true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */    // &quot;declarationMap&quot;: true,                           /* Create sourcemaps for d.ts files. */    // &quot;emitDeclarationOnly&quot;: true,                      /* Only output d.ts files and not JavaScript files. */    // &quot;sourceMap&quot;: true,                                /* 디버깅에 사용하는 소스맵 파일 생성 여부 */    // &quot;outFile&quot;: &quot;./&quot;,                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */    // &quot;outDir&quot;: &quot;./&quot;,                                   /* Specify an output folder for all emitted files. */    // &quot;removeComments&quot;: true,                           /* Disable emitting comments. */    // &quot;noEmit&quot;: true,                                   /* Disable emitting files from a compilation. */    // &quot;importHelpers&quot;: true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */    // &quot;importsNotUsedAsValues&quot;: &quot;remove&quot;,               /* Specify emit/checking behavior for imports that are only used for types */    // &quot;downlevelIteration&quot;: true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */    // &quot;sourceRoot&quot;: &quot;&quot;,                                 /* Specify the root path for debuggers to find the reference source code. */    // &quot;mapRoot&quot;: &quot;&quot;,                                    /* Specify the location where debugger should locate map files instead of generated locations. */    // &quot;inlineSourceMap&quot;: true,                          /* Include sourcemap files inside the emitted JavaScript. */    // &quot;inlineSources&quot;: true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */    // &quot;emitBOM&quot;: true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */    // &quot;newLine&quot;: &quot;crlf&quot;,                                /* Set the newline character for emitting files. */    // &quot;stripInternal&quot;: true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */    // &quot;noEmitHelpers&quot;: true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */    // &quot;noEmitOnError&quot;: true,                            /* Disable emitting files if any type checking errors are reported. */    // &quot;preserveConstEnums&quot;: true,                       /* Disable erasing `const enum` declarations in generated code. */    // &quot;declarationDir&quot;: &quot;./&quot;,                           /* Specify the output directory for generated declaration files. */    // &quot;preserveValueImports&quot;: true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */    /* Interop Constraints */    // &quot;isolatedModules&quot;: true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */    // &quot;allowSyntheticDefaultImports&quot;: true,             /* Allow &#x27;import x from y&#x27; when a module doesn&#x27;t have a default export. */    &quot;esModuleInterop&quot;: true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */    // &quot;preserveSymlinks&quot;: true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */    &quot;forceConsistentCasingInFileNames&quot;: true,            /* Ensure that casing is correct in imports. */    /* Type Checking */    &quot;strict&quot;: true,                                      /* Enable all strict type-checking options. */    // &quot;noImplicitAny&quot;: true,                            /* 모든 변수의 타입을 강제할지 여부 */    // &quot;strictNullChecks&quot;: true,                         /* null 과 undefined 값을 적용할 때 엄격하게 적용함 */    // &quot;strictFunctionTypes&quot;: true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */    // &quot;strictBindCallApply&quot;: true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */    // &quot;strictPropertyInitialization&quot;: true,             /* Check for class properties that are declared but not set in the constructor. */    // &quot;noImplicitThis&quot;: true,                           /* Enable error reporting when `this` is given the type `any`. */    // &quot;useUnknownInCatchVariables&quot;: true,               /* Type catch clause variables as &#x27;unknown&#x27; instead of &#x27;any&#x27;. */    // &quot;alwaysStrict&quot;: true,                             /* Ensure &#x27;use strict&#x27; is always emitted. */    // &quot;noUnusedLocals&quot;: true,                           /* Enable error reporting when a local variables aren&#x27;t read. */    // &quot;noUnusedParameters&quot;: true,                       /* Raise an error when a function parameter isn&#x27;t read */    // &quot;exactOptionalPropertyTypes&quot;: true,               /* Interpret optional property types as written, rather than adding &#x27;undefined&#x27;. */    // &quot;noImplicitReturns&quot;: true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */    // &quot;noFallthroughCasesInSwitch&quot;: true,               /* Enable error reporting for fallthrough cases in switch statements. */    // &quot;noUncheckedIndexedAccess&quot;: true,                 /* Include &#x27;undefined&#x27; in index signature results */    // &quot;noImplicitOverride&quot;: true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */    // &quot;noPropertyAccessFromIndexSignature&quot;: true,       /* Enforces using indexed accessors for keys declared using an indexed type */    // &quot;allowUnusedLabels&quot;: true,                        /* Disable error reporting for unused labels. */    // &quot;allowUnreachableCode&quot;: true,                     /* Disable error reporting for unreachable code. */    /* Completeness */    // &quot;skipDefaultLibCheck&quot;: true,                      /* Skip type checking .d.ts files that are included with TypeScript. */    &quot;skipLibCheck&quot;: true                                 /* Skip type checking all .d.ts files. */  &#125;  // &quot;include&quot;: [&quot;./src/**/*]&#125;

tslinthttps://palantir.github.io/tslint
npm install -global tslinttslint --init

tsconfig.json&#123;  &quot;defaultSeverity&quot;: &quot;error&quot;,  &quot;extends&quot;: [    &quot;tslint:recommended&quot;  ],  &quot;jsRules&quot;: &#123;&#125;,  &quot;rules&quot;: &#123;    &quot;no-console&quot;: false // 콘솔 로그를 사용할 수 있도록 규칙 추가  &#125;,  &quot;rulesDirectory&quot;: []&#125;
]]></content>
      <categories>
        <category>typescript</category>
        <category>setup</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript Types v4.6.2</title>
    <url>/typescript/types/</url>
    <content><![CDATA[
  https://www.typescriptlang.org/ko/docs/handbook/2/basic-types.html
  https://www.typescriptlang.org/ko/docs/handbook/2/everyday-types.html
  https://joshua1988.github.io/ts/guide/basic-types.html


Typesbooleanlet bool: boolean = false;

numberlet num: number = 1;


정수와 실수를 구분하지 않고 모두 실수이다.

stringlet str: string = &#x27;text&#x27;;

Arraylet numberArray: number [] = [1, 2, 3];let stringArray: string[] = [&#x27;a&#x27;, &#x27;b&#x27;];

// Array Interface 와 generic 을 이용let numberArray: Array&lt;number&gt; = [1, 2, 3];let stringArray: Array&lt;string&gt; = [&#x27;a&#x27;, &#x27;b&#x27;];

Tuplelet tuple: [string, number]; // 개수에 제한은 없지만 string 과 number 만 넣을 수 있음tuple = [&#x27;text&#x27;, 1];tuple[3] = &#x27;text&#x27;; // Error, Property &#x27;3&#x27; does not exist on type


배열의 길이가 고정되고 각 요소의 타입이 지정되어 있는 배열 형식을 의미한다.정의하지 않은 타입 또는 정의되지 않은 인덱스로 접근할 경우 오류가 발생한다.

objectlet obj: object = &#123;&#125;;let person: &#123; name: string, age: number &#125; = &#123;  name: &#x27;abc&#x27;,  age: 20,&#125;;

enumhttps://joshua1988.github.io/ts/guide/enums.html
enum Color &#123; Red, Green, Blue &#125;let color: Color = Color.Red;color; // 0

// Red 의 값을 1 로 설정하면 그 다음 원소들은 1 부터 1 씩 증가enum Color &#123; Red = 1, Green, Blue = 4 &#125;let color: Color = Color.Green;color; // 2color = Color.Blue;color; // 4

enum Color &#123; Red = 1, Green, Blue &#125;let color: string = Color.Green; // error: 문자 타입에 숫자는 들어갈 수 없음let color: string = Color[3]; // 배열의 인덱스로 동작하여 가능 (Blue 대입)color; // Blue

// 2.4 버전 이후 문자열 사용 가능enum Color &#123; Red = &#x27;red&#x27;, Green = &#x27;green&#x27;, Blue = &#x27;blue&#x27; &#125;

// 상수 열거형은 성능상의 이유로 도입되었고, 클로저 정의를 포함하지 않음// 열거형의 내부 문자열값을 참조할 수 없음const enum Color &#123; Red, Green, Blue &#125;let color: Color = Color.Red;`color is $&#123;color&#125;`; // color is Color.Red`$&#123;Color[0]&#125;`; // error`$&#123;Color[&#x27;Red&#x27;]&#125;`; // 가능


다른 언어에서 흔하게 쓰이는 타입으로 특정 값 (상수) 들의 집합을 의미한다.

anylet anyValue: any = 1;let anyArray: any[] = [100, &#x27;Hello&#x27;, true];let anyObject: any = &#123; a: 1, b: &#x27;text&#x27; &#125;;anyObject = &#123; a: true &#125;;


데이터 타입을 결정할 수 없는 경우에 사용한다.찾기 어려운 오류가 쉽게 발생하므로 사용을 지양한다.

voidlet a: void;function fn(name: string): void &#123;  console.log(name);&#125;


변수에는 undefined 와 null 만 할당하고, 함수에는 반환 값을 설정할 수 없는 타입이다.

Unionhttps://joshua1988.github.io/ts/guide/operator.html
let union: string | number;union = &#x27;text&#x27;; // 문자 가능union = 1; // 숫자 가능

interface Person &#123;  name: string;  age: number;&#125;interface Developer &#123;  name: string;  skill: string;&#125;function fn(user: Person | Developer) &#123;  user.name;  user.age; // error  user.skill; // error&#125;// Person 또는 Develop 객체fn(&#123; name: &#x27;abc&#x27;, age: 20 &#125;);fn(&#123; name: &#x27;abc&#x27;, skill: &#x27;def&#x27; &#125;);

function fn(a: string | number, b: string | number): string | number &#123;  if (typeof a === &#x27;string&#x27;) &#123;    return a + b;  &#125;  if (typeof b === &#x27;number&#x27; &amp;&amp; typeof b === &#x27;number&#x27;) &#123;    return a + b;  &#125;  return a.toString() + b.toString();&#125;

// 타입 별칭 (자주 사용하는 공용체 타입에 쉽고 직관적인 이름을 사용)type StringOrNumber = string | number;let a: StringOrNumber;type CallbackWithString = (string) =&gt; void;function fn(callback: CallbackWithString) &#123;  callback(&#x27;text&#x27;);&#125;


2 개 이상의 타입을 조합하는 표현식이다.2 개 이상의 인터페이스의 공통 된 속성만 허용한다.

Intersectioninterface Person &#123;  name: string;  age: number;&#125;interface Developer &#123;  name: string;  skill: string;&#125;function fn(user: Person &amp; Developer) &#123;  user.name;  user.age;  user.skill;&#125;// Person 이면서 Develop 인 객체fn(&#123; name: &#x27;abc&#x27;, age: 20, skill: &#x27;def&#x27; &#125;);


2 개 이상의 인터페이스의 속성을 모두 허용한다.

null &amp; undefinedlet a: string = &#x27;text&#x27;;let b: void;let c: null;let d: undefined;

tsconfig.json 에서 &quot;strictNullChecks&quot;: true 설정a = null; // 불가능a = undefined; // 불가능b = null; // 불가능b = undefined; // 가능c = null; // 가능c = undefined; // 불가능d = null; // 불가능d = undefined; // 가능

tsconfig.json 에서 &quot;strictNullChecks&quot;: false 설정a = null; // 가능a = undefined; // 가능b = null; // 가능b = undefined; // 가능c = null; // 가능c = undefined; // 가능d = null; // 가능d = undefined; // 가능

neverfunction neverEnd(): never &#123;  while (true) &#123;&#125;&#125;function error(message: string): never &#123;  throw new Error(message);&#125;error(&#x27;Something Wrong!!&#x27;);


함수의 끝에 절대 도달하지 않는다는 의미를 지닌 타입이다.일반적으로 에러 함수의 리턴 타입으로 사용한다.

Explicit type conversionlet obj = &lt;any&gt;&#123; a: 1, b: &#x27;text&#x27; &#125;;obj = &#123; a: true &#125;;let str: any = &#x27;text&#x27;;let num: number = (&lt;string&gt;str).length; // algle-bracket syntax 이용num = (str as string).length; // as syntax 이용(&lt;number&gt;str).toFixed(); // runtime errorlet div = document.querySelector(&#x27;div&#x27;) as HTMLDivElement;
]]></content>
      <categories>
        <category>typescript</category>
        <category>types</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Debug</title>
    <url>/web/debug/</url>
    <content><![CDATA[Chrome developer toolshttps://developer.chrome.com/docs/devtools
Mobile debughttps://developer.chrome.com/docs/devtools/remote-debugging
Check mobile screen on PC

모바일 디바이스를 USB 케이블로 연결한다.
chrome://inspect/#devices 에서 디바이스가 나오지 않을 경우 USB 연결 방식이 MIDI 디바이스 연결에 체크가 되어 있는지 확인한다.
연결이 될때가 있고 안될때가 있어서 계속 바꿔가면서 확인이 필요하다.
SM-G935S #CE02160261C8C50A04 와 같이 디바이스가 연결되면 inspect 링크를 눌러서 개발자도구에서 확인이 가능하다.


Check PC localhost on mobile

chrome://inspect/#devices 에서 Port forwarding 을 선택하여 Port forwarding settings 창을 연다.
Port: 3000, IP adress and port: localhost:3000 을 입력하고 Enable port forwarding 을 체크한다.
chrome://inspect/#devices 탭을 닫으면 연결이 종료되므로 주의한다.


Fiddlerhttps://www.telerik.com/fiddler
FiltersSites


Filters
Use Filters
Show only Internet Host
Show only the following Hosts: *.naver.com




Actions
Run Filterset now





Files


Filters
Use Filters
Show only if URL contains: regex:(png|gif|jpg|bmp)




Actions
Run Filterset now





Rulesstatic function OnBeforeRequest(oSession: Session) &#123;  if (oSession.HostnameIs(&quot;www.naver.com&quot;)) &#123; // 변경할 도메인    oSession.hostname=&quot;www.google.com&quot;; // 변경된 도메인  &#125;&#125;


Rules 의 Customize Rules... 에 내용을 추가한다.

]]></content>
      <categories>
        <category>web</category>
        <category>debug</category>
      </categories>
      <tags>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>Web HTTP Request</title>
    <url>/web/http-request/</url>
    <content><![CDATA[HTTP headerhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers
AuthenticationWWW-Authenticatehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate

리소스에 대한 접근을 하는데 사용되어야하는 인증 메소드를 정의한다.

Authorizationhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization
Authorization: &quot;[Basic | Bearer | Digest | HOBA | Mutual | AWS4-HMAC-SHA256] &lt;credentials&gt;&quot;


서버와함께 유저 에이전트를 인증하기 위한 자격 증명을 포함한다.

Proxy-Authenticatehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Proxy-Authenticate

프록시 서버 뒤에 있는 리소스에 접근하는데 사용되어야하는 인증 메소드를 정의한다.

Proxy-Authorizationhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Proxy-Authorization

프록시 서버와 함께 유저 에이전트를 인증하기 위한 자격 증명을 포함한다.

CachingAgehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Age

객체가 프록시 캐시에 있었던 초 단위의 시간이다.

Cache-Controlhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control

요청과 응답 모두에서의 캐싱 메커니즘을 명시하는 지시문이다.

Clear-Site-Datahttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Clear-Site-Data

요청하는 웹사이트에 관련된 탐색 데이터 (쿠키, 저장소, 캐시) 를 제거한다.

Expireshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires

응답이 만료되었다고 고려되는 날짜 &#x2F; 시간이다.

Pragmahttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Pragma

요청-응답 체인을 따라 어디든 다양한 영향을 줄 수 있는 구현-관련 헤더이다.Cache-Control 헤더가 존재하지 않는 HTTP/1.0 캐시와의 하위 호환성을 위해 사용된다.

Client hintsAccept-CHhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-CH
Sec-CH-UAhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA
Sec-CH-UA-Archhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Arch
Sec-CH-UA-Bitnesshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Bitness
Sec-CH-UA-Full-Version-Listhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Full-Version-List
Sec-CH-UA-Mobilehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Mobile
Sec-CH-UA-Modelhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Model
Sec-CH-UA-Platformhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Platform
Sec-CH-UA-Platform-Versionhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-CH-UA-Platform-Version
Downlinkhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Downlink
ECThttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ECT
RTThttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/RTT
Save-Datahttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Save-Data
ConditionalsLast-Modifiedhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified
ETaghttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag
If-Matchhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match
If-None-Matchhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match
If-Modified-Sincehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since
If-Unmodified-Sincehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Unmodified-Since
Varyhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary
Connection managementConnectionhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection

현재 트랜잭션이 끝난후에 네트워크 연결을 열린 상태로 둘지 여부를 제어한다.

Keep-Alivehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Keep-Alive

지속적인 연결이 열린 상태로 유지할 기간을 제어한다.

Content negotiationAccepthttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept
Accept-Encodinghttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding
Accept-Languagehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language
ControlsExpecthttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect
Cookiehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cookie

도메인당 20 개까지만 생성할 수 있으며, 한 파일에 4096byte 까지만 저장하도록 권고하고 있다.HTTP 헤더에 포함해 전송하기 때문에 불필요하게 네트워크 자원을 낭비하게 된다.문자열 형태로 저장되어 로드할 때 부수적인 연산이 필요하다.

Set-Cookiehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie

&lt;cookie-name&gt;=&lt;cookie-value&gt;쿠키 이름과 해당 값을 정의한다.


Expires=&lt;date&gt;쿠키의 최대 수명을 정의한다.클라이언트 시간을 기준으로 한다.


Max-Age=&lt;number&gt;쿠키가 만료될 때까지의 시간을 나타낸다.0 또는 음수일 경우 즉시 만료시킨다.Expires 보다 우선순위가 높다.


Domain=&lt;domain-value&gt;쿠키가 전송 될 호스트를 정의한다.값 지정 (google.com) 시 하위 도메인 (mail.google.com) 이 포함된다.생략 시 하위 도메인을 포함하지 않는다.


Path=&lt;path-value&gt;쿠키가 전송 될 하위 경로를 정의한다.


SecureHTTPS 요청일 경우에만 쿠키를 전송한다.


HttpOnlydocument.cookie API 를 통해 접근할 수 없다.서버에 전송하는 용도로만 사용할 수 있다.


SameSite=&lt;samesite-value&gt;Strict: 동일한 사이트 요청에만 쿠키를 전송한다.Lax: 웹 페이지 이동 시 (a, link, form) 쿠키를 전송한다. (SameSite 기본 동작)None: 교차 사이트에도 쿠키를 전송한다. Secure 와 함께 설정해야 한다.


  javascript-web-api document


CORS - Requesthttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#the_http_request_headers
Originhttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#originhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin
Access-Control-Request-Methodhttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#access-control-request-methodhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Request-Method

어떤 HTTP 메서드를 사용할지 서버에게 알려준다.

Access-Control-Request-Headershttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#access-control-request-headershttps://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types

요청 시 헤더를 설정한다.

CORS - Responsehttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#the_http_response_headers
Access-Control-Allow-Originhttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#access-control-allow-originhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin

응답이 공유될 수 있는지를 나타낸다.

Access-Control-Expose-Headershttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#access-control-expose-headershttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers

헤더의 이름을 나열하여 어떤 헤더가 응답의 일부로 노출될 수 있는지를 나타낸다.

Access-Control-Max-Agehttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#access-control-max-agehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age

요청 결과를 캐시할 수 있는 시간을 나타낸다.

Access-Control-Allow-Credentialshttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#access-control-allow-credentialshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials

credentials 플래그가 true 일 때 요청에 대한 응답을 표시할 수 있는지를 나타낸다.

Access-Control-Allow-Methodshttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#access-control-allow-methodshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods

리소스에 접근할 때 허용되는 메서드를 지정한다.

Access-Control-Allow-Headershttps://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#access-control-allow-headershttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers

요청 시 사용할 수 있는 헤더를 보여준다.

Timing-Allow-Originhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Timing-Allow-Origin
DownloadsContent-Dispositionhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
Message body informationContent-Lengthhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length
Content-Typehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type
Content-Encodinghttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
Content-Languagehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Language
Content-Locationhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Location
ProxiesForwardedhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Forwarded
Viahttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Via
RedirectsLocationhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Location

페이지를 리다이렉트 할 URL 을 나타낸다.

Request contextFromhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/From
Hosthttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host
Refererhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer
Referrer-Policyhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
User-Agenthttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent
Response contextAllowhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Allow

지원되는 HTTP 요청 메소드를 나열한다.

Serverhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server
Range requestsAccept-Rangeshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Ranges
Rangehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range
If-Rangehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Range
Content-Rangehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range
SecurityCross-Origin-Embedder-Policy (COEP)https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy
Cross-Origin-Opener-Policy (COOP)https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
Cross-Origin-Resource-Policy (CORP)https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy
Content-Security-Policy (CSP)https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
Content-Security-Policy-Report-Onlyhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only
Expect-CThttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT
Feature-Policyhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
Strict-Transport-Security (HSTS)https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
Upgrade-Insecure-Requestshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade-Insecure-Requests
X-Content-Type-Optionshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
X-Frame-Options (XFO)https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
X-XSS-Protectionhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
HTTP Public Key Pinning (HPKP)Public-Key-Pinshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Public-Key-Pins
Public-Key-Pins-Report-Onlyhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Public-Key-Pins-Report-Only
Fetch metadata request headersSec-Fetch-Sitehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Site
Sec-Fetch-Modehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Mode
Sec-Fetch-Userhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-User
Sec-Fetch-Desthttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Dest
Transfer codingTransfer-Encodinghttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding
TEhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/TE
Trailerhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Trailer
WebSocketsSec-WebSocket-Accepthttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-WebSocket-Accept
OtherAlt-Svchttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Alt-Svc
Datehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date
Large-Allocationhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Large-Allocation
Linkhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link
Retry-Afterhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After
Server-Timinghttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Server-Timing
SourceMaphttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/SourceMap
Upgradehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade
X-DNS-Prefetch-Controlhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control
HTTP request methodshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
GEThttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET
HEADhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD
POSThttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST

URL 에 하위 리소스를 생성한다.요청 시 마다 새로운 리소스가 생성된다.멱등하지 않다. 요청을 모두 수행한다.

POST /post

PUThttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT

클라이언트가 알고 있는 URL 에서 리소스를 생성하거나 교체한다.요청 시 마다 같은 리소스를 반환한다.멱등하다. 요청이 많아도 결과가 달라지지 않는다.변경되지 않는 정보도 모두 보내야 한다.자원의 전부를 수정할 때 사용한다.

PUT /post/&#123;postname&#125;

DELETEhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE
CONNECThttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT
OPTIONShttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS
TRACEhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/TRACE
PATCHhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH

변경되지 않는 정보는 보내지 않아도 된다.자원의 일부를 수정할 때 사용한다.

Rest API
Representational State Transfer 의 약자로 자원 (Resource: URI), 행위 (Verb: HTTP Method), 표현 (Representations) 으로 구성된다.

List get
[GET] /post (리스트 읽기)

Item create
[POST | PUT] /post (아이템 생성)

Item read
Read [GET] /post/:id (아이템 읽기)

Item update
[PUT | PATCH] /post/:id (아이템 수정)

Item delete
[DELETE] /post/:id (아이템 삭제)

IntelliJ IDEA http clienthttps://www.jetbrains.com/help/idea/http-client-in-product-code-editor.htmlhttps://resttesttest.com

Postman 을 사용하지 않고 IDE 자체적으로 API 테스트 가능하다.코드 자동완성, 하이라이팅을 지원한다.Git 을 통해 공유가 가능하다.Controller 를 기반으로 .http 자동 생성 기능을 지원한다.

Environment variables&#123;  &quot;local&quot;: &#123;    &quot;apiAddress&quot; : &quot;http://localhost&quot;,    &quot;username&quot; : &quot;abc&quot;,    &quot;password&quot; : &quot;123&quot;  &#125;,  &quot;dev&quot;: &#123;    &quot;apiAddress&quot; : &quot;http://dev.example.com&quot;,    &quot;username&quot; : &quot;abc&quot;,    &quot;password&quot; : &quot;123&quot;  &#125;&#125;


New &gt; HTTP Request 에서 파일을 생성한다.

GETBasicGET https://httpbin.org/ip

ParametersGET https://httpbin.org/get?show_env=1

HeadersGET https://httpbin.org/ipAccept: application/json

CookiesGET https://httpbin.orgCookie: key=value

EnvironmentsGET &#123; &#123;host&#125; &#125;/get?show_env=&#123; &#123;show_env&#125; &#125;Accept: application/json

VariablesGET http://httpbin.org/anything?id=&#123; &#123;$uuid&#125; &#125;&amp;ts=&#123; &#123;$timestamp&#125; &#125;

No redirect# @no-redirectGET http://httpbin.org/status/301

POSTBasicPOST https://httpbin.org/post

ParametersPOST https://httpbin.org/postContent-Type: application/x-www-form-urlencodedid=999&amp;value=content

JSON dataPOST https://httpbin.org/postContent-Type: application/json&#123;  &quot;id&quot;: 999,  &quot;value&quot;: &quot;content&quot;&#125;

JSON filePOST https://httpbin.org/postContent-Type: application/json&lt; ./filename.json

DataPOST https://httpbin.org/postContent-Type: multipart/form-data; boundary=WebAppBoundary--WebAppBoundaryContent-Disposition: form-data; name=&quot;element-name&quot;Content-Type: text/plainName--WebAppBoundaryContent-Disposition: form-data; name=&quot;data&quot;; filename=&quot;data.json&quot;Content-Type: application/json&lt; ./request-form-data.json--WebAppBoundary--

VariablesPOST https://httpbin.org/postContent-Type: application/json&#123;  &quot;id&quot;: &#123; &#123;$uuid&#125; &#125;,  &quot;price&quot;: &#123; &#123;$randomInt&#125; &#125;,  &quot;ts&quot;: &#123; &#123;$timestamp&#125; &#125;,  &quot;value&quot;: &quot;content&quot;&#125;

Authorization 1BasicGET https://httpbin.org/basic-auth/user/passwdAuthorization: Basic user passwd

VariablesGET https://httpbin.org/basic-auth/user/passwdAuthorization: Basic &#123; &#123;username&#125; &#125; &#123; &#123;password&#125; &#125;

DigestGET https://httpbin.org/digest-auth/realm/user/passwdAuthorization: Digest user passwd

Digest variablesGET https://httpbin.org/digest-auth/realm/user/passwdAuthorization: Digest &#123; &#123;username&#125; &#125; &#123; &#123;password&#125; &#125;

Authorization 2BasicPOST http://dev.adauth.korea.ncsoft.corp/api/session/loginContent-Type: application/json&#123;  &quot;account&quot;: &quot;id&quot;,  &quot;password&quot;: &quot;pw&quot;&#125;&#123;%// .idea/httpRequests/http-client.cookies 에 쿠키가 자동으로 저장됨client.log(response.headers.valueOf(&quot;Set-Cookie&quot;).split(&#x27;AdAuthSid=&#x27;)[1].split(&#x27;;&#x27;)[0]);client.global.set(&quot;AdAuthSid&quot;, response.headers.valueOf(&quot;Set-Cookie&quot;).split(&#x27;AdAuthSid=&#x27;)[1].split(&#x27;;&#x27;)[0]); // 글로벌 변수에 쿠키값 저장%&#125;

UseGET http://opdev-contents.korea.ncsoft.corp/api/serviceCookie: AdAuthSid=&#123; &#123;AdAuthSid&#125; &#125; // 글로벌 변수에 저장한 쿠키 사용

Logclient.log();


Console 탭에 출력되는 것이 아니고 Response Handler 탭에 출력 된다.

Cookie// .idea/httpRequests/http-client.cookies# domain path name value datenaver.com  /	cookieName	cookieValue	-1


요청한 내역 및 생성한 쿠키는 .idea/httpRequests/ 폴더에 자동 생성 및 저장된다.

]]></content>
      <categories>
        <category>web</category>
        <category>http-request</category>
      </categories>
      <tags>
        <tag>http-request</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Optimization</title>
    <url>/web/optimization/</url>
    <content><![CDATA[
  https://developer.mozilla.org/en-US/docs/Web/Performance


Navigation and resource timingshttps://developer.mozilla.org/en-US/docs/Web/Performance/Navigation_and_resource_timings
Service
Prompt for unload
사용자가 웹 서비스를 이용하다 다른 주소로 이동할 때 브라우저가 제일 먼저 실행하는 단계이다.페이지에 할당된 메모리가 해제된다.메모리 가비지 컬렉션 기능이 제대로 동작하지 않으면 응답없음 상태가 발생한다.beforunload 이벤트를 활용하여 메모리 해제를 담당하는 모듈을 따로 만들수 있다.

Redirect
Redirect
사용자가 요청한 URL 에서 다른 URL 로 다시 보내는 단계이다.리다이렉트 시 / 를 주소 끝에 꼭 붙여주어야 한다.메타 태그를 이용하여 리다이렉트를 하게되면 불필요한 서버통신이 발생해 응답속도가 느려진다.mod_alias 모듈 또는 mod_rewrite 모듈을 사용하여 서버 사이드 설정으로 리다이렉트를 권장한다.

Application
App cache
브라우저의 캐시에 데이터가 있는지 확인하는 단계이다.









Last-Modified
서버에서 저장하고 있는 마지막 수정 날짜


If-Modified-Since
브라우저에서 저장하고 있는 마지막 수정 날짜


Expires
만료 날짜 (deprecated)


Cache-Control
Expires 정보의 한계를 극복하기 위해 HTTP / 1.1 에서 소개된 캐시 설정 추가 정보


max-age
캐싱할 시간을 초단위까지 정할 수 있음, HTTP / 1.1 을 지원하지 않는 브라우저는 동작하지 않기때문에 Expires 설정과 동시에 해야 함


Network
DNS, TCP, Request, Response
브라우저가 네트워크와 통신해서 웹 페이지와 구성요소를 다운로드 하는 단계이다.









Blocked
브라우저에서 리소스를 호출하기 전에 소요되는 대기시간


DNS
호스트이름으로 IP 주소를 조회한 시간


TCP
웹서버와의 TCP 연결을 생성하는 데 필요한 시간


Request
웹서버와 TCP 연결이 이뤄지면 원하는 정보를 서버에 보내는 시간


Wait
웹서버에서 보내는 응답 메시지를 받기까지의 대기 시간


Response
서버에서 보내는 응답 메시지를 받는 시간


TTFB
서버가 해당 요소의 첫번째 바이트 정보를 브라우저에 보내는데 걸리는 시간


Cache Read
사용자 PC에 저장돼 있는 캐시를 읽어 오는데 걸리는 시간


Browser
Processing, onload
다운로드한 웹 페이지와 구성요소로 웹 페이지를 한 화면에 그리는 단계이다.DOMContentLoaded 이벤트는 이미지나 다른 요소를 다운로드 하는 것과 관계없이 DOM 이 로드되고 난 직후에 발생한다.onLoad 이벤트는 모든 이미지, 스타일시트, 자바스크립트 등이 모두 다운로드 될 때 발생한다.

Browser Rendering1. Parsing
HTML 문서를 파싱하여 Content tree 에서 태그를 DOM (Document Object Model) 노드로 변환하고, 외부 CSS 파일을 포함하여 스타일 요소로 CSSOM (CSS Object Model) 을 만든다.

2. Render tree
문서 파싱에서 얻은 스타일 정보와 HTML 표시 규칙을 가지고 렌더트리를 생성한다.렌더트리는 색상과 면적과 같은 시각적 속성 정보를 가지고 있다.
&lt;head&gt; 와 같은 비시각적 요소들은 제외한다.display: none; 이 할당된 요소는 제외한다.visibility: hidden; 은 포함한다.하나의 사각형으로 표현하기 어려운 DOM 요소는 여러개의 렌더러로 구성한다.한줄에 충분히 표시할 수 없는 문장의 경우, 여러줄로 변경될 때 각 줄은 새로운 렌더러로 추가한다.인라인과 블럭이 섞인 경우, 인라인을 감싸기 위한 익명 블럭 렌더러가 추가적으로 생성한다.position: absolute; 혹은 position: fixed; 인 요소들은 흐름에서 벗어나 트리의 다른 곳에 배치된다.

3. Reflow (Layout)
생성된 렌더트리를 기반으로 각 노드가 화면에 정확한 위치에 표시되도록 배치하는 과정이다.
최상위 렌더러의 위치는 0, 0 으로 결정되며, 뷰포트 (브라우저 창에서 보이는 영역 크기) 만큼의 면적을 갖는다.HTML 문서의 &lt;html&gt; 요소에 해당하는 최상위 렌더로로부터 계층적으로 배치된다.
배치는 화면의 왼쪽에서 오른쪽, 그리고 위에서 아래 순으로 이루어진다.배치가 순차적으로 진행될 때 나중에 등장하는 요소는 앞서 등장한 요소의 위치나 크기에 영향을 미치지 않는다.배치의 종류에는 전역 배치 (Global reflows) 와 점증 배치 (Incremental reflows) 가 있다.전역 배치는 전체 렌더러를 다시 배치할 필요가 있을 때 수행하며, 점증 배치는 작은 변경이 있을 때 전체를 다시 배치하지 않기 위한 최적화 기법이다.

4. Repaint
리플로우로 배치된 노드들을 가로지르며 그리는 과정으로 opacity, visibility, outline, background-color 와 같이 시각적 속성에 해당하는 정보를 입힌다.배경색, 배경이미지, 테두리, 자식, 아웃라인 순으로 진행된다.

Rendering CSS


Attributes
Rendering process



display
layout


position
layout


top, bottom, left, right
layout


overflow
layout


box-sizing
layout


float, clear
layout


margin, padding
layout


border, border-width, border-color
layout


width, height
layout


min(max)-width, min(max)-height
layout


list-style
layout


vertical-align
layout


background-color
layout


font, font-family, font-size, font-weight
layout


text-overflow, text-align, text-shadow, text-transform, text-indent
layout


word-wrap
layout


white-space
layout


line-height
layout


letter-spacing
layout


appearance
layout


content
layout


zoom
layout


border-style, border-radius
paint


background, background-image, background-position, background-size, background-repeat
paint


box-shadow
paint


outline
paint


color
paint


text-decoration
paint


visibility
paint


z-index
composite


transform
composite


opacity
composite


user-select
composite


cursor
composite


Javascript performance


Slow
Fast



생성자를 사용한 문자열 생성var string = new String()
리터럴을 사용한 문자열 생성var str = &#39;&#39;


생성자를 사용한 오브젝트 생성var object = new Object()
리터럴을 사용한 오브젝트 생성var object = &#123;&#125;


생성자를 사용한 배열 생성var array = new Array()
리터럴을 사용한 배열 생성var array = []


메서드를 사용한 데이터 할당array.push(i)
접근자를 사용한 데이터 할당array[i] = i


괄호 연산자를 이용한 데이터 할당object[&#39;a&#39;] = 1
닷연산자를 이용한 데이터 할당object.a = 1


연산자를 사용한 문자열 조합+=
메서드를 사용한 문자열 조합Array.join()


Optimization
HTTP 요청 최소화 (다운로드 해야 하는 구성요소의 개수를 줄이는 것은 가장 효과가 크고 중요한 최적화 방법)
해더에 만료 날짜 추가 (mod_expires 모듈을 사용하여 설정)
자바스크립트 파일 통합 및 압축 (deflate 보다는 gzip 을 권장함)
HTML 태그의 개수 및 중첩을 줄임
CSS 선택자의 중첩을 줄이고 불필요한 선택자는 제거함 (마지막 선택자는 상세히 기술)
변경이 잦은 애니메이션 요소는 position 을 absoulte 또는 fixed 로 설정하여 전체 노드에서 분리
동일한 요소에 스타일 변경은 가급적 한번에 묶어서 처리
인라인 스타일은 추가 리플로우를 발생시키므로 사용을 지양
복잡한 구조의 돔 추가시 DOM Fragment 를 사용하여 완성 후 document 에는 마지막으로 append 함
테이블 구현시 table-layout: fixed; 속성을 추가

div#id &#123;&#125; /* div 는 불필요함 #id 만 사용 */div &gt; .class &#123;&#125; /* div &gt; p.class 와 같이 마지막 선택자를 상세히 기술하면 성능에 유리함 */


렌더링 엔진은 보다 나은 사용자 경험을 위해 위의 과정을 순차적으로 수행하지 않고 점진적으로 수행한다. 문서 파싱이 끝날때까지 기다리지 않고, 수행되는대로 배치와 그리기 과정을 동시에 수행하도록 되어 있다.단, table의 경우는 기본적으로 점진적 렌더링이 적용되지 않는다.table-layout: fixed;속성이 있을 경우에만 점진적 렌더링이 적용되므로 추가하는 것이 좋다.

Image optimizationhttps://www.optimizeimages.com/tool
]]></content>
      <categories>
        <category>web</category>
        <category>optimization</category>
      </categories>
      <tags>
        <tag>optimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Application API v3.2.31</title>
    <url>/vue/application/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/api/application-api.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


componenthttps://v3.ko.vuejs.org/api/application-api.html#component
app.component(&#x27;component&#x27;, &#123;&#125;); /* 전역 컴포넌트 등록 */const Component = app.component(&#x27;component&#x27;); /* 전역 컴포넌트 반환 */

confighttps://v3.ko.vuejs.org/api/application-config.html
app.config(&#123;  /* 컴포넌트 렌더 함수와 감시자(watcher) 중에 포착되지 않은 에러에 대한 핸들러를 할당 */  errorHandler(error, instance, info) &#123;&#125;,  /* 런타임 Vue 경고에 대한 커스텀 핸들러를 할당 (only development) */  warnHandler(message, instance, trace) &#123;&#125;,  /* 애플리케이션 내의 모든 컴포넌트 인스턴스에서 접근할 수 있는 전역 속성을 추가 */  /* (키가 충돌하는 경우 컴포넌트의 속성이 우선 적용) */  globalProperties: &#123; key: &#x27;value&#x27; &#125;,  /* Vue 외부에서 정의된 커스텀 엘리먼트를 인식하는 방법을 지정 (웹 컴포넌트 API 사용) */  isCustomElement(tag) &#123;    return tag.startsWith(&#x27;ion-&#x27;);  &#125;,  /* 커스텀 옵션에 대한 병합 전략을 정의 */  optionMergeStrategies: &#123;    hello: (parent, child, vm) =&gt; `Hello, $&#123;child&#125;`,  &#125;,  /* vue-devtools performance 패널에서 컴포넌트 초기화, 컴파일, 렌더링 및 패치 성능 추적을 사용 */  performance: true,&#125;);

directivehttps://v3.ko.vuejs.org/api/application-api.html#directive
app.directive(&#x27;my-directive&#x27;, &#123;&#125;); /* 전역 디렉티브 등록 */const directive = app.directive(&#x27;directive&#x27;); /* 전역 디렉티브 반환 */


  vue options


mixinhttps://v3.ko.vuejs.org/api/application-api.html#mixin
app.mixin(&#123;&#125;); /* 전역 믹스인 등록 */


  vue options


mounthttps://v3.ko.vuejs.org/api/application-api.html#mount
app.mount(&#x27;#app&#x27;); /* 루트 컴포넌트의 템플릿을 렌더링 후 마운트 */

providehttps://v3.ko.vuejs.org/api/application-api.html#provide
app.provide(&#x27;key&#x27;, &#123; text: &#x27;abc&#x27; &#125;); /* 애플리케이션 내의 모든 컴포넌트에 주입할 수 있는 값을 설정 */


  vue options


unmounthttps://v3.ko.vuejs.org/api/application-api.html#unmount
app.unmount(&#x27;#app&#x27;); /* 루트 컴포넌트 마운트 해제 */

usehttps://v3.ko.vuejs.org/api/application-api.html#use
import Plugin from &#x27;./plugins/Plugin&#x27;;app.use(Plugin); /* 플러그인 사용 */

versionhttps://v3.ko.vuejs.org/api/application-api.html#version
console.log(app.version);
]]></content>
      <categories>
        <category>vue</category>
        <category>application</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Built-ins v3.2.31</title>
    <url>/vue/built-ins/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/api/built-in-components.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


componenthttps://v3.ko.vuejs.org/guide/component-dynamic-async.html
&lt;component :is=&quot;componentId&quot;&gt;&lt;/component&gt;

transitionhttps://v3.ko.vuejs.org/ko-KR/guide/transitions-enterleave.html
Single element&lt;template&gt;  &lt;button @click=&quot;show = !show&quot;&gt;Toggle&lt;/button&gt;  &lt;transition name=&quot;fade&quot;&gt;    &lt;div v-if=&quot;show&quot;&gt;text&lt;/div&gt;  &lt;/transition&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      show: true,    &#125;;  &#125;,&#125;;&lt;/script&gt;&lt;style&gt;.fade-enter-active, .fade-leave-active &#123;  transition: opacity 0.5s ease;&#125;.fade-enter-from, .fade-leave-to &#123;  opacity: 0;&#125;&lt;/style&gt;









name-enter
요소가 삽입되기 전에 적용되며 한프레임 후에 제거


name-enter-active
요소가 삽입되기 전에 적용되며 전환 애니메이션이 완료되면 제거


name-enter-to
요소가 삽입된 후 전환 애니메이션이 완료되는 한 프레임 후에 제거


name-leave
요소가 사라지기 전에 적용되며 한 프레임 후에 제거


name-leave-active
요소가 사라지기 전에 적용되며 전환 애니메이션이 완료되면 제거


name-leave-to
요소가 제거되고 전환 애니메이션이 완료되는 한 프레임 후에 제거


Same element&lt;template&gt;  &lt;transition name=&quot;fade&quot; mode=&quot;out-in&quot;&gt;    &lt;!-- 같은 태그일경우 Vue 에서 자동 캐시가 발생하므로, key 속성을 이용해 다른 요소임을 알림 --&gt;    &lt;button v-if=&quot;off&quot; @click=&quot;off = !off&quot; :key=&quot;off&quot;&gt;off&lt;/button&gt;    &lt;button v-if=&quot;!off&quot; @click=&quot;off = !off&quot; :key=&quot;on&quot;&gt;on&lt;/button&gt;  &lt;/transition&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      off: true,    &#125;;  &#125;,&#125;;&lt;/script&gt;&lt;style&gt;.fade-enter-active, .fade-leave-active &#123;  transition: opacity 0.5s;&#125;.fade-enter, .fade-leave-to &#123;  opacity: 0;&#125;&lt;/style&gt;









in-out
먼저 새로운 요소가 전환되고, 완료되면 현재 요소가 전환


out-in
먼저 현재 요소가 전환되고, 완료되면 새로운 요소가 전환


Animation&lt;template&gt;  &lt;button @click=&quot;show = !show&quot;&gt;토글&lt;/button&gt;  &lt;!-- appear 속성 추가시 최초 렌더링에도 애니메이션 효과 적용 --&gt;  &lt;transition name=&quot;bounce&quot; appear&gt;    &lt;div v-if=&quot;show&quot;&gt;텍스트&lt;/div&gt;  &lt;/transition&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      show: true,    &#125;;  &#125;,&#125;;&lt;/script&gt;&lt;style&gt;.bounce-enter-active &#123;  animation: bounce 0.5s;&#125;.bounce-leave-active &#123;  animation: bounce 0.5s reverse;&#125;@keyframes bounce &#123;  0% &#123; transform: scale(0); &#125;  50% &#123; transform: scale(1.2); &#125;  100% &#123; transform: scale(1); &#125;&#125;&lt;/style&gt;

transition-grouphttps://v3.ko.vuejs.org/ko-KR/guide/transitions-list.html
&lt;transition-group tag=&quot;ul&quot; name=&quot;slide&quot;&gt;  &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;    &#123;&#123; item.text &#125;&#125;  &lt;/li&gt;&lt;/transition-group&gt;

keep-alivehttps://v3.ko.vuejs.org/guide/component-dynamic-async.html
&lt;keep-alive&gt;  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;&lt;/keep-alive&gt;

slothttps://v3.ko.vuejs.org/guide/component-slots.html
&lt;slot name=&quot;slotName&quot;&gt;&lt;/slot&gt;

teleporthttps://v3.ko.vuejs.org/guide/teleport.html
&lt;template&gt;  &lt;button @click=&quot;visible = true&quot;&gt;Open&lt;/button&gt;  &lt;teleport to=&quot;#id&quot;&gt;    &lt;div v-if=&quot;visible&quot;&gt;      &lt;div&gt;Modal&lt;/div&gt;      &lt;button @click=&quot;visible = false&quot;&gt;Close&lt;/button&gt;    &lt;/div&gt;  &lt;/teleport&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      visible: false,    &#125;;  &#125;,&#125;;&lt;/script&gt;


to 에 지정한 위치로 요소를 이동시킨다.#app 외부로도 이동할 수 있다.

]]></content>
      <categories>
        <category>vue</category>
        <category>built-ins</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Composition API v3.2.31</title>
    <url>/vue/composition/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/api/composition-api.html
  https://v3.ko.vuejs.org/guide/composition-api-setup.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


Only javascriptimport &#123; h, ref, reactive, getCurrentInstance &#125; from &#x27;vue&#x27;;export default &#123;  setup(props, &#123; attrs, slots, emit, expose &#125;) &#123;    /* Reactivity */    const number = ref(0);    const object = reactive(&#123; title: &#x27;abc&#x27; &#125;);    /* 내부 컴포넌트 인스턴스에 접근할 수 있음 */    const internalInstance = getCurrentInstance();    console.log(internalInstance.appContext.config.globalProperties);    return () =&gt; h(&#x27;div&#x27;, [number.value, object.title]);  &#125;,&#125;;

SFC setup&lt;template&gt;  &lt;MyComponent /&gt;  &lt;div v-my-directive&gt;&lt;/div&gt;  &lt;button ref=&quot;buttonRef&quot; @click=&quot;increment&quot;&gt;&#123;&#123; number &#125;&#125; &#123;&#123; object.title &#125;&#125;&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import &#123;  ref,  reactive,  onBeforeMount,  onMounted,  onBeforeUpdate,  onUpdated,  onBeforeUnmount,  onUnmounted,  onErrorCaptured,  onRenderTracked,  onRenderTriggered,&#125; from &#x27;vue&#x27;;import MyComponent from &#x27;@/components/MyComponent&#x27;;export default &#123;  props: &#123;    message: &#123;      type: String,    &#125;,  &#125;,  setup(props, &#123; attrs, slots, emit, expose &#125;) &#123;    /* Directive */    const vMyDirective = &#123;&#125;;    /* Reactivity */    const buttonRef = ref(null); /* Vue 3 ref */    const number = ref(0);    const object = reactive(&#123; title: &#x27;abc&#x27; &#125;);    /* Lifecycle */    onBeforeMount(() =&gt; &#123; console.log(&#x27;beforeMount&#x27;); &#125;);    onMounted(() =&gt; &#123; console.log(&#x27;mounted&#x27;); &#125;);    onBeforeUpdate(() =&gt; &#123; console.log(&#x27;beforeUpdate&#x27;); &#125;);    onUpdated(() =&gt; &#123; console.log(&#x27;updated&#x27;); &#125;);    onBeforeUnmount(() =&gt; &#123; console.log(&#x27;beforeUnmount&#x27;); &#125;);    onUnmounted(() =&gt; &#123; console.log(&#x27;unmounted&#x27;); &#125;);    /* Methods */    const increment = () =&gt; &#123;      number.value++;    &#125;;    return &#123;      vMyDirective,      number,      object,      increment,    &#125;;  &#125;,&#125;;&lt;/script&gt;

SFC script setuphttps://vuejs.org/api/sfc-script-setup.html
&lt;template&gt;  &lt;MyComponent /&gt;  &lt;div v-my-directive&gt;&lt;/div&gt;  &lt;button ref=&quot;buttonRef&quot; @click=&quot;increment&quot;&gt;&#123;&#123; number &#125;&#125; &#123;&#123; object.title &#125;&#125;&lt;/button&gt;&lt;/template&gt;&lt;script setup&gt;import &#123;  getCurrentInstance,  inject,  ref,  reactive,  useSlots,  useAttrs,  /* defineProps, setup 내에서 임포트할 필요 없음 */  /* defineEmits, setup 내에서 임포트할 필요 없음 */  defineExpose,  onBeforeMount,  onMounted,  onBeforeUpdate,  onUpdated,  onBeforeUnmount,  onUnmounted,  onErrorCaptured,  onRenderTracked,  onRenderTriggered,&#125; from &#x27;vue&#x27;;import MyComponent from &#x27;@/components/MyComponent&#x27;;/* 좋은 방법이 아님 (main.js 에서 app.provide() 를 이용하는 것을 권장)const app = getCurrentInstance();console.log(app.appContext.config.globalProperties);*//* Inject */const emitter  = inject(&#x27;emitter&#x27;);/* Props */const props = defineProps(&#123; message: String &#125;);/* Attrs */const attrs = useAttrs();/* Slots */const slots = useSlots();/* Emits */const emits = defineEmits([&#x27;change&#x27;, &#x27;delete&#x27;]);/* expose *//* 노출할 속성을 정할 수 있음 */defineExpose(&#123; number &#125;);/* Directive */const vMyDirective = &#123;&#125;;/* Reactivity */const buttonRef = ref(null); /* Vue 3 ref */const number = ref(0);const object = reactive(&#123; title: &#x27;abc&#x27; &#125;);/* Lifecycle */onBeforeMount(() =&gt; &#123; console.log(&#x27;beforeMount&#x27;); &#125;);onMounted(() =&gt; &#123; console.log(&#x27;mounted&#x27;); &#125;);onBeforeUpdate(() =&gt; &#123; console.log(&#x27;beforeUpdate&#x27;); &#125;);onUpdated(() =&gt; &#123; console.log(&#x27;updated&#x27;); &#125;);onBeforeUnmount(() =&gt; &#123; console.log(&#x27;beforeUnmount&#x27;); &#125;);onUnmounted(() =&gt; &#123; console.log(&#x27;unmounted&#x27;); &#125;);/* Methods */const increment = () =&gt; &#123;  number.value++;&#125;;&lt;/script&gt;
]]></content>
      <categories>
        <category>vue</category>
        <category>composition</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Data v3.2.31</title>
    <url>/vue/data/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/api/options-data.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


datahttps://v3.ko.vuejs.org/api/options-data.html#data
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  data() &#123;    return &#123;      key: &#x27;value&#x27;,    &#125;;  &#125;,&#125;);

propshttps://v3.ko.vuejs.org/guide/component-props.html
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  props: &#123;    user: &#123;      type: Object,      default() &#123;        return &#123;          name: &#x27;&#x27;,          age: 0,        &#125;;      &#125;,      required: true,      validator(value) &#123;        if (value &gt; 0) &#123;          return true;        &#125;        return false;      &#125;,    &#125;,  &#125;,&#125;);

const props = defineProps(&#123;  user: &#123;    type: Object,    default() &#123;      return &#123;        name: &#x27;&#x27;,        age: 0,      &#125;;    &#125;,    required: true,    validator(value) &#123;      if (value &gt; 0) &#123;        return true;      &#125;      return false;    &#125;,  &#125;,&#125;);

computedhttps://v3.ko.vuejs.org/guide/computed.html
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  data() &#123;    return &#123;      number: 0,    &#125;;  &#125;,  computed: &#123;    plus() &#123;      return this.number + 1;    &#125;,    minus: &#123;      get() &#123;        return this.number - 1;      &#125;,      set(value) &#123;        this.number = this.number - value;      &#125;,    &#125;,  &#125;,&#125;);

import &#123; createApp &#125; from &#x27;vue&#x27;;import _ from &#x27;lodash&#x27;; /* https://lodash.com */const app = createApp(&#123;  data() &#123;    return &#123;      list: [        &#123; id: 2, name: &#x27;a&#x27; &#125;,        &#123; id: 3, name: &#x27;b&#x27; &#125;,        &#123; id: 1, name: &#x27;b&#x27; &#125;,      ],    &#125;;  &#125;,  computed: &#123;    orderedList() &#123;      return _.orderBy(this.list, [&#x27;name&#x27;, &#x27;id&#x27;], [&#x27;asc&#x27;, &#x27;desc&#x27;]);    &#125;,  &#125;,&#125;);


인자를 받지 않는다.재 호출 시 결과 값이 변하지 않으면 재 실행하지 않고 캐시를 사용한다.

methodshttps://v3.ko.vuejs.org/api/options-data.html#methods
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  methods: &#123;    output(text) &#123;      console.log(text);    &#125;,  &#125;,&#125;);


인자를 받을 수 있다.재 호출 시 결과 값이 같아도 재 실행한다.

watchhttps://v3.ko.vuejs.org/api/instance-methods.html#watch
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  data() &#123;    return &#123;      user: &#123;        name: &#x27;abc&#x27;,        age: 20,      &#125;,    &#125;;  &#125;,  watch: &#123;    user: &#123;      immediate: true,      deep: true,      handler(value, oldValue) &#123;        console.log(value, oldValue);      &#125;,    &#125;,  &#125;,&#125;);

emitshttps://v3.ko.vuejs.org/api/options-data.html#emits
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  emits: &#123;    emitTest(payload) &#123;      console.log(payload);    &#125;,  &#125;,  created() &#123;    this.$emit(&#x27;emitTest&#x27;, &#123; a: 1, b: 2 &#125;);  &#125;&#125;);
]]></content>
      <categories>
        <category>vue</category>
        <category>data</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Directives v3.2.31</title>
    <url>/vue/directives/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/api/directives.html
  https://v3.ko.vuejs.org/guide/template-syntax.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


v-texthttps://v3.ko.vuejs.org/api/directives.html#v-text
&lt;div v-text=&quot;message&quot; /&gt;&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;

v-htmlhttps://v3.ko.vuejs.org/api/directives.html#v-html
&lt;div v-html=&quot;message&quot; /&gt;

v-showhttps://v3.ko.vuejs.org/guide/conditional.html#v-show
&lt;div v-show=&quot;boolean&quot; /&gt;

v-ifhttps://v3.ko.vuejs.org/guide/conditional.html#v-if
&lt;div v-if=&quot;boolean&quot; /&gt;

v-elsehttps://v3.ko.vuejs.org/guide/conditional.html#v-else
&lt;div v-else /&gt;

v-else-ifhttps://v3.ko.vuejs.org/guide/conditional.html#v-else-if
&lt;div v-if=&quot;type === &#x27;A&#x27;&quot; /&gt;&lt;div v-else-if=&quot;type === &#x27;B&#x27;&quot; /&gt;&lt;div v-else /&gt;

v-forhttps://v3.ko.vuejs.org/guide/list.html
&lt;div v-for=&quot;(item, index) in list&quot; :key=&quot;item.id&quot;&gt;  &#123;&#123; item.text &#125;&#125;&lt;/div&gt;

&lt;div v-for=&quot;(value, key, index) in object&quot; :key=&quot;item.id&quot;&gt;  &#123;&#123; item.text &#125;&#125;&lt;/div&gt;

&lt;dl&gt;  &lt;template v-for=&quot;item in list&quot;&gt;    &lt;dt :key=&quot;`dt-$&#123;item.id&#125;`&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/dt&gt;    &lt;dd :key=&quot;`dd-$&#123;item.id&#125;`&quot;&gt;&#123;&#123; item.description &#125;&#125;&lt;/dd&gt;  &lt;/template&gt;&lt;/dl&gt;


v-if 와 v-for 가 동시에 존재할 경우 우선순위는 v-for 가 높기 때문에 반복하면서 조건을 체크할 수 있다.반대로, 조건에 따라서 반복을 제어하려면 상위 요소에 v-if 를 적용한다.

v-onhttps://v3.ko.vuejs.org/guide/events.html
&lt;button v-on:click=&quot;method&quot;&gt;Button&lt;/button&gt;&lt;button @click=&quot;method(&#x27;abc&#x27;, $event)&quot;&gt;Button&lt;/button&gt;&lt;input @keyup.enter=&quot;onEnter&quot; /&gt;&lt;button v-on=&quot;&#123; mousedown: onMouseDown, mouseup: onMouseUp &#125;&quot;&gt;&lt;/button&gt;









stop
event.stopPropagation() 메서드를 호출


prevent
event.preventDefault() 메서드를 호출


capture
이벤트 리스너에 캡쳐모드를 추가


self
해당 엘리먼트에서 이벤트가 전달된 경우에만 동작


&#123; keyAlias &#125;
특정 키에 대해서만 동작


once
한번만 핸들러가 동작


left
마우스 왼쪽 버튼 이벤트에만 핸들러 동작


right
마우스 오른쪽 버튼 이벤트에만 핸들러 동작


middle
마우스 가운데 버튼 이벤트에만 핸들러 동작


passive
&#123; passive: true &#125; 속성을 DOM 이벤트에 추가


v-bindhttps://v3.ko.vuejs.org/api/directives.html#v-bind
&lt;img v-bind:width=&quot;imageWidth&quot; /&gt;&lt;Component :prop=&quot;value&quot; /&gt;&lt;ChildComponent v-bind=&quot;$props&quot; /&gt;&lt;svg :view-box.camel=&quot;viewBox&quot; /&gt;&lt;div v-bind=&quot;&#123; id: someProp, &#x27;other-attr&#x27;: otherProp &#125;&quot; /&gt;

class&lt;div class=&quot;a&quot; :class=&quot;&#123; &#x27;b&#x27;: true &#125;&quot; /&gt;

style&lt;div :style=&quot;&#123; &#x27;font-size&#x27;: `$&#123;14&#125;px` &#125;&quot; /&gt;

data&lt;template&gt;  &lt;div class=&quot;area&quot; :data-active=&quot;active&quot;&gt;Text&lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;;const active = ref(true);&lt;/script&gt;&lt;style lang=&quot;scss&quot;&gt;.area &#123;  color: blue;  &amp;[data-active=true] &#123;    color: red;  &#125;&#125;&lt;/style&gt;

v-modelhttps://v3.ko.vuejs.org/guide/forms.html
input text&lt;input type=&quot;text&quot; v-model=&quot;text&quot; /&gt;&lt;input type=&quot;text&quot; v-model.lazy=&quot;text&quot; /&gt;&lt;input type=&quot;text&quot; :value=&quot;text&quot; @input=&quot;text = ($event) =&gt; $event.target.value&quot;&gt;

textarea&lt;textarea v-model.trim=&quot;text&quot;&gt;&lt;/textarea&gt;&lt;div style=&quot;white-space: pre-line;&quot;&gt;&#123;&#123; text &#125;&#125;&lt;/div&gt;

checkbox&lt;input type=&quot;checkbox&quot; v-model=&quot;checked&quot; /&gt;&lt;input type=&quot;checkbox&quot; value=&quot;a&quot; v-model=&quot;checked&quot; /&gt;&lt;input type=&quot;checkbox&quot; value=&quot;b&quot; v-model=&quot;checked&quot; /&gt;&lt;input type=&quot;checkbox&quot; v-model=&quot;toggle&quot; :true-value=&quot;true-text&quot; :false-value=&quot;false-text&quot;&gt;

radio&lt;input type=&quot;radio&quot; name=&quot;one&quot; value=&quot;a&quot; v-model=&quot;picked&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;one&quot; value=&quot;b&quot; v-model=&quot;picked&quot;&gt;&lt;input type=&quot;radio&quot; v-model=&quot;pick&quot; :value=&quot;text&quot;&gt;

select&lt;select v-model=&quot;selected&quot;&gt;  &lt;option disabled value=&quot;&quot;&gt;a&lt;/option&gt;  &lt;option&gt;b&lt;/option&gt;&lt;/select&gt;&lt;select v-model=&quot;selected&quot;&gt;  &lt;option v-for=&quot;(option, index) in options&quot; :value=&quot;option.value&quot; :key=&quot;index&quot;&gt;    &#123;&#123; option.text &#125;&#125;  &lt;/option&gt;&lt;/select&gt;









lazy
input 대신에 change 이벤트를 수신


number
유효한 입력 문자열을 숫자로 캐스팅


trim
입력값을 트림 (trim) 처리


Component two-way bindingParent&lt;template&gt;  &lt;!-- &lt;Input :value=&quot;text&quot; @update:value=&quot;updateValue&quot; /&gt; --&gt;  &lt;!-- &lt;Input v-model:value=&quot;text&quot; /&gt; --&gt;  &lt;Input v-model=&quot;text&quot; /&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;;import Input from &#x27;./Input.vue&#x27;;const text = ref(&#x27;abc&#x27;);/* const updateValue = (value) =&gt; &#123;  text.value = value;&#125;; */&lt;/script&gt;

Child&lt;template&gt;  &lt;input    :value=&quot;props.value&quot;    &lt;!-- @input=&quot;emits(&#x27;update:value&#x27;, event.target.value)&quot; --&gt;    @input=&quot;emits(&#x27;update:modelValue&#x27;, event.target.value)&quot;  /&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;;const props = defineProps(&#123;  /* value: String, */  modelValue: String,&#125;);const emits = defineEmits([  /* &#x27;update:value&#x27;, */  &#x27;update:modelValue&#x27;,]);&lt;/script&gt;


컴포넌트를 호출할 때 v-model:속성 으로 props 를 지정하고컴포넌트에서는 update:속성 으로 emit 하면 주석 처리된 부분을 생략할 수 있다.여러개의 모델을 바인딩하려면 v-mode:속성 으로 사용할 수 있지만1 개의 모델만 바인딩 할 때는 modelValue 로 속성 이름을 사용하는 것이 규칙이다.

v-slothttps://v3.ko.vuejs.org/guide/component-slots.html
&lt;!-- 이름있는 슬롯 (Named slots) --&gt;&lt;base-layout&gt;  &lt;template v-slot:header&gt;    Header content  &lt;/template&gt;  &lt;!-- v-slot: 를 # 으로 간소화 가능 --&gt;  &lt;template #default&gt;    Default slot content  &lt;/template&gt;  &lt;template v-slot:footer&gt;    Footer content  &lt;/template&gt;&lt;/base-layout&gt;&lt;!-- 이름있는 슬롯 (Named slot) 에서 props 를 받는 경우 --&gt;&lt;infinite-scroll&gt;  &lt;template v-slot:item=&quot;slotProps&quot;&gt;    &lt;div class=&quot;item&quot;&gt;      &#123;&#123; slotProps.item.text &#125;&#125;    &lt;/div&gt;  &lt;/template&gt;&lt;/infinite-scroll&gt;&lt;!-- 기본 슬롯 (default slot) 에서 props 를 받는경우 (구조분해할당) --&gt;&lt;mouse-position v-slot=&quot;&#123; x, y &#125;&quot;&gt;  Mouse position: &#123;&#123; x &#125;&#125;, &#123;&#123; y &#125;&#125;&lt;/mouse-position&gt;

Noname slot&lt;template&gt;  &lt;Component&gt;    &lt;div&gt;new text&lt;/div&gt;  &lt;/Component&gt;&lt;/template&gt;&lt;script&gt;app.component(&#x27;Component&#x27;, &#123;  template: `    &lt;div&gt;      &lt;h1&gt;title&lt;/h1&gt;      &lt;slot&gt;        &lt;div&gt;default text&lt;/div&gt;      &lt;/slot&gt;    &lt;/div&gt;  `,&#125;);&lt;/script&gt;

Named slot&lt;template&gt;  &lt;Component&gt;    &lt;div&gt;new text&lt;/div&gt;    &lt;div slot=&quot;footer&quot;&gt;footer text&lt;/div&gt;  &lt;/Component&gt;&lt;/template&gt;&lt;script&gt;app.component(&#x27;Component&#x27;, &#123;  template: `    &lt;div&gt;      &lt;h1&gt;title&lt;/h1&gt;      &lt;slot&gt;        &lt;div&gt;default text&lt;/div&gt;      &lt;/slot&gt;      &lt;footer&gt;        &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;      &lt;/footer&gt;    &lt;/div&gt;  `,&#125;);&lt;/script&gt;

Scoped slot&lt;template&gt;  &lt;Component&gt;    &lt;template scope=&quot;props&quot;&gt;      &lt;li&gt;&#123; &#123; props.text &#125; &#125; / &#123; &#123; props.number &#125; &#125;&lt;/li&gt;    &lt;/template&gt;  &lt;/Component&gt;&lt;/template&gt;&lt;script&gt;app.component(&#x27;Component&#x27;, &#123;  data() &#123;    return &#123;      list: [        &#123; text: &#x27;abc&#x27;, number: 10 &#125;,        &#123; text: &#x27;def&#x27;, number: 20 &#125;,      ],    &#125;;  &#125;,  template: `    &lt;ul&gt;      &lt;slot v-for=&quot;item in list&quot; :text=&quot;item.text&quot; :number=&quot;item.number&quot; /&gt;    &lt;/ul&gt;  `,&#125;);&lt;/script&gt;

v-prehttps://v3.ko.vuejs.org/api/directives.html#v-pre
&lt;div v-pre&gt;&#123;&#123; this will not be compiled &#125;&#125;&lt;/div&gt;

v-cloakhttps://v3.ko.vuejs.org/api/directives.html#v-cloak
&lt;template&gt;  &lt;div v-cloak&gt;    &#123;&#123; message &#125;&#125;  &lt;/div&gt;&lt;/template&gt;&lt;style&gt;[v-cloak] &#123;  display: none; /* 컴파일이 완료될 때까지 표시되지 않음 */&#125;&lt;/style&gt;


컴포넌트 인스턴스가 컴파일을 완료할때 까지 엘리먼트에 남아 있다.

v-oncehttps://v3.ko.vuejs.org/api/directives.html#v-once
&lt;div v-once&gt;This will never change: &#123;&#123; message &#125;&#125;&lt;/div&gt;&lt;Component v-once /&gt;

v-ishttps://v3.ko.vuejs.org/api/directives.html#v-is
Item.vue&lt;template&gt;  &lt;component :is=&quot;tag&quot; class=&quot;item&quot;&gt;    &lt;sapn class=&quot;text&quot;&gt;Text&lt;/span&gt;  &lt;/component&gt;&lt;/template&gt;&lt;script setup&gt;const props = defineProps(&#123;  tag: &#123; type: String, default: &#x27;li&#x27; &#125;,&#125;);&lt;/script&gt;

List.vue&lt;template&gt;  &lt;ul class=&quot;list&quot;&gt;    &lt;Item v-for=&quot;index of [0, 1, 2]&quot; :key=&quot;index&quot; tag=&quot;li&quot; /&gt;  &lt;/ul&gt;&lt;/template&gt;
]]></content>
      <categories>
        <category>vue</category>
        <category>directives</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Emit v3.2.31</title>
    <url>/vue/emit/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/guide/component-custom-events.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


Emit parent methodVue 2Parent&lt;Example @customEvent=&quot;(payload) =&gt; &#123; console.log(payload.a); &#125;&quot;/&gt;

Children&lt;button @click=&quot;$emit(&#x27;customEvent&#x27;, &#123; a: 10 &#125;)&quot;&gt;Test&lt;/button&gt;

Vue 3Parent&lt;Example @customEvent=&quot;(payload) =&gt; &#123; console.log(payload.a); &#125;&quot;/&gt;

Children&lt;template&gt;  &lt;button @click=&quot;emit(&#x27;customEvent&#x27;, &#123; a: 10 &#125;)&quot;&gt;Test&lt;/button&gt;&lt;/template&gt;&lt;script setup&gt;const emit = defineEmits([&#x27;customEvent&#x27;]);&lt;/script&gt;

Event busVue 2main.jsVue.prototype.$eventBus = new Vue();

Component 1export default &#123;  created() &#123;    /* 글로벌 이벤트 생성 */    this.$eventBus.$on(&#x27;event-name&#x27;, (value) =&gt; &#123;      console.log(value.a);    &#125;);  &#125;,  beforeDestroy() &#123;    /* 글로벌 이벤트 제거 */    this.$eventBus.$off(&#x27;event-name&#x27;);  &#125;,&#125;;

Component 2export default &#123;  method: &#123;    run() &#123;      /* 글로벌 이벤트 전파 */      this.$eventBus.$emit(&#x27;event-name&#x27;, &#123; a: 10 &#125;);    &#125;,  &#125;,&#125;;

Vue 3Use mitthttps://github.com/developit/mitt
npm install --save mitt

main.jsimport mitt from &#x27;mitt&#x27;;app.config.globalProperties.emitter = mitt();app.provide(&#x27;emitter&#x27;, app.config.globalProperties.emitter);

Component 1import &#123; inject, onBeforeMount, onUnmounted &#125; from &#x27;vue&#x27;;const emitter = inject(&#x27;emitter&#x27;);const onEmitter = (event) =&gt; &#123;  console.log(&#x27;event-name&#x27;, event.a);&#125;;onBeforeMount(() =&gt; &#123;  /* 글로벌 이벤트 생성 */  emitter.on(&#x27;event-name&#x27;, onEmitter);&#125;);onUnmounted(() =&gt; &#123;  /* 글로벌 이벤트 제거 */  emitter.off(&#x27;event-name&#x27;, onEmitter);&#125;);

Component 2import &#123; inject &#125; from &#x27;vue&#x27;;const emitter = inject(&#x27;emitter&#x27;);/* 글로벌 이벤트 전파 */emitter.emit(&#x27;event-name&#x27;, &#123; a: 10 &#125;);

Use custom event bus./plugins/EventBus.jsclass Event &#123;  constructor() &#123;    this.events = &#123;&#125;;  &#125;  $on(name, callback) &#123;    this.events[name] = this.events[name] || [];    this.events[name].push(callback);  &#125;  $off(name, callback) &#123;    if (this.events[name]) &#123;      for (let i = 0; i &lt; this.events[name].length; i++) &#123;        if (this.events[name][i] === callback) &#123;          this.events[name].splice(i, 1);          break;        &#125;      &#125;    &#125;  &#125;  $emit(name, data) &#123;    if (this.events[name]) &#123;      this.events[name].forEach((callback) =&gt; &#123;        callback(data);      &#125;);    &#125;  &#125;&#125;export default new Event();

main.jsimport $eventBus from &#x27;./plugins/EventBus.js&#x27;;app.config.globalProperties.$eventBus = $eventBus;app.provide(&#x27;$eventBus&#x27;, app.config.globalProperties.$eventBus);

Component 1import &#123; inject, onBeforeMount, onUnmounted &#125; from &#x27;vue&#x27;;const $eventBus = inject(&#x27;$eventBus&#x27;);const onEvent = (event) =&gt; &#123;  console.log(&#x27;event-name&#x27;, event.a);&#125;;onBeforeMount(() =&gt; &#123;  /* 글로벌 이벤트 생성 */  $eventBus.$on(&#x27;event-name&#x27;, onEvent);&#125;);onUnmounted(() =&gt; &#123;  /* 글로벌 이벤트 제거 */  $eventBus.$off(&#x27;event-name&#x27;, onEvent);&#125;);

Component 2import &#123; inject &#125; from &#x27;vue&#x27;;const $eventBus = inject(&#x27;$eventBus&#x27;);/* 글로벌 이벤트 전파 */$eventBus.$emit(&#x27;event-name&#x27;, &#123; a: 10 &#125;);
]]></content>
      <categories>
        <category>vue</category>
        <category>emit</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Global API v3.2.31</title>
    <url>/vue/global/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/api/global-api.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


createApphttps://v3.ko.vuejs.org/api/global-api.html#createapp
import &#123; createApp &#125; from &#x27;vue&#x27;;import App from &#x27;./App.vue&#x27;;const app = createApp(  /* 컴포넌트 */  App,  /* 컴포넌트에 전달할 props */  &#123;&#125;,);

hhttps://v3.ko.vuejs.org/api/global-api.html#h
import &#123; createApp, h &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  render() &#123;    /* h(tag, props, children) */    return h(&#x27;div&#x27;, &#123;&#125;, [      &#x27;text&#x27;,      h(&#x27;div&#x27;, &#x27;text&#x27;),      h(Component, &#123; username: &#x27;abc&#x27; &#125;),    ]);  &#125;,&#125;);

defineComponenthttps://v3.ko.vuejs.org/api/global-api.html#definecomponent
import &#123; defineComponent &#125; from &#x27;vue&#x27;;const Example = defineComponent(&#123;  data() &#123;    return &#123;      count: 0,    &#125;;  &#125;,&#125;);

import &#123; defineComponent, ref &#125; from &#x27;vue&#x27;;const Example = defineComponent(function Example() &#123;  const count = ref(0);  return &#123; count &#125;;&#125;);

defineAsyncComponenthttps://v3.ko.vuejs.org/api/global-api.html#defineasynccomponent
import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;;const AsyncComponent = defineAsyncComponent(() =&gt; import(&#x27;./components/AsyncComponent.vue&#x27;));app.component(&#x27;async-component&#x27;, AsyncComponent);

import &#123; createApp, defineAsyncComponent &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  components: &#123;    AsyncComponent: defineAsyncComponent(() =&gt; import(&#x27;./components/AsyncComponent.vue&#x27;)),  &#125;,&#125;);

import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;;const AsyncComponent = defineAsyncComponent(&#123;  loader: () =&gt; import(&#x27;./Foo.vue&#x27;), /* 팩토리 함수 */  loadingComponent: LoadingComponent, /* 비동기 컴포넌트가 로드되는 동안 사용할 컴포넌트 */  errorComponent: ErrorComponent, /* 로드가 실패할 경우 사용할 컴포넌트 */  delay: 200, /* 로딩 컴포넌트가 보여지기 전 지연시간 */  timeout: 3000, /* 주어진 시간이 초과되면 오류 컴포넌트 표시 */  suspensible: false, /* 컴포넌트가 사용 가능한지 정의 */  onError(error, retry, fail, attempts) &#123; /* 에러 함수 */    if (error.message.match(/fetch/) &amp;&amp; attempts &lt;= 3) &#123; /* fetch 에러 시 재시도, 최대 3회 시도 */      retry();    &#125; else &#123;      fail();    &#125;  &#125;,&#125;);

resolveComponenthttps://v3.ko.vuejs.org/api/global-api.html#resolvecomponent
import &#123; createApp, resolveComponent &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  render() &#123;    const Component = resolveComponent(&#x27;Component&#x27;);  &#125;,&#125;);


resolveDynamicComponenthttps://v3.ko.vuejs.org/api/global-api.html#resolvedynamiccomponent
import &#123; createApp, resolveDynamicComponent &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  render() &#123;    const Component = resolveDynamicComponent(&#x27;Component&#x27;);  &#125;,&#125;);

resolveDirectivehttps://v3.ko.vuejs.org/api/global-api.html#resolvedirective
import &#123; createApp, resolveDirective &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  render() &#123;    const directive = resolveDirective(&#x27;directive&#x27;);  &#125;,&#125;);

withDirectiveshttps://v3.ko.vuejs.org/api/global-api.html#withdirectives
import &#123; createApp, withDirectives, resolveDirective &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  render() &#123;    const a = resolveDirective(&#x27;a&#x27;);    const b = resolveDirective(&#x27;b&#x27;);    return withDirectives(h(&#x27;div&#x27;), [      [a, this.x],      [b, this.y],    ]);  &#125;,&#125;);

createRendererhttps://v3.ko.vuejs.org/api/global-api.html#createrenderer
import &#123; createRenderer &#125; from &#x27;vue&#x27;;const &#123; render, createApp &#125; = createRenderer(&#123;  patchProp,  ...nodeOps,&#125;);

nextTickhttps://v3.ko.vuejs.org/api/global-api.html#nexttick
import &#123; nextTick &#125; from &#x27;vue&#x27;;export default &#123;  methods: &#123;    async fn() &#123;      /* DOM not yet updated */      await nextTick();      /* DOM is now updated */    &#125;  &#125;&#125;

mergePropshttps://v3.ko.vuejs.org/api/global-api.html#mergeprops
import &#123; h, mergeProps &#125; from &#x27;vue&#x27;;export default &#123;  inheritAttrs: false,  render() &#123;    const props = mergeProps(&#123; class: &#x27;active&#x27; &#125;, this.$attrs);    return h(&#x27;div&#x27;, props);  &#125;,&#125;;

useCssModulehttps://v3.ko.vuejs.org/api/global-api.html#usecssmodule
&lt;script&gt;import &#123; h, useCssModule &#125; from &#x27;vue&#x27;;export default &#123;  setup() &#123;    const style = useCssModule();    return () =&gt; h(&#x27;div&#x27;, &#123; class: style.success &#125;, &#x27;text&#x27;);  &#125;&#125;;&lt;/script&gt;&lt;style module&gt;.success &#123;  color: #f00;&#125;&lt;/style&gt;

versionhttps://v3.ko.vuejs.org/api/global-api.html#version
import &#123; version &#125; from &#x27;vue&#x27;;console.log(version);
]]></content>
      <categories>
        <category>vue</category>
        <category>global</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Lifecycle v3.2.31</title>
    <url>/vue/lifecycle/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/api/options-lifecycle-hooks.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();




beforeCreatehttps://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#beforecreate
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  beforeCreate() &#123;&#125;,&#125;);


인스턴스가 초기화 된 직후, 데이터 관찰 및 이벤트, 감시자 설정 전에 동기적으로 호출된다.setup() 으로 사용한다.

createdhttps://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#created
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  created() &#123;&#125;,&#125;);


인스턴스가 생성된 후 동기적으로 호출된다.setup() 으로 사용한다.

beforeMounthttps://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#beforemount
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  beforeMount() &#123;&#125;,&#125;);


인스턴스가 마운트되기 직전에 호출된다.

mountedhttps://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#mounted
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  async mounted() &#123;    await this.nextTick();  &#125;,&#125;);


인스턴스가 마운트된 후 호출된다.await this.nextTick() 이후는 전체 내용이 렌더링된 후 호출된다.

beforeUpdatehttps://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#beforeupdate
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  beforeUpdate() &#123;&#125;,&#125;);


DOM 이 패치되기 전 데이터가 변경될 때 호출된다.

updatedhttps://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#updated
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  async beforeUpdate() &#123;    await this.nextTick();  &#125;,&#125;);


데이터가 변경되어 가상 DOM 이 다시 렌더링되고 패치된 후에 호출된다.await this.nextTick() 이후는 전체 내용이 렌더링된 후 호출된다.

activatedhttps://v3.ko.vuejs.org/guide/component-dynamic-async.html
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  activated() &#123;&#125;,&#125;);


keep-alive 컴포넌트가 활성화될 때 호출된다.

deactivatedhttps://v3.ko.vuejs.org/guide/component-dynamic-async.html
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  deactivated() &#123;&#125;,&#125;);


keep-alive 컴포넌트가 비활성화될 때 호출된다.

beforeUnmounthttps://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#beforeunmount
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  beforeUnmount() &#123;&#125;,&#125;);


컴포넌트 인스턴스가 마운트 해제되기 직전에 호출된다.

unmountedhttps://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#unmounted
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  unmounted() &#123;&#125;,&#125;);


컴포넌트 인스턴스가 마운트 해제된 후 호출된다.

errorCapturedhttps://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#errorcaptured
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  errorCaptured(error) &#123;    console.log(&#x27;Caught error&#x27;, error.message);  &#125;,&#125;);


자손 컴포넌트의 에러가 포착될 때 호출된다.

renderTrackedhttps://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#rendertracked
&lt;template&gt;  &lt;button @click=&quot;plus&quot;&gt;Plus&lt;/button&gt;  &lt;div&gt;&#123;&#123; number &#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      number: 0,    &#125;;  &#125;,  renderTracked(&#123; key, target, type &#125;) &#123;    console.log(&#123; key, target, type &#125;);  &#125;,  methods: &#123;    plus() &#123;      this.number += 1;    &#125;,  &#125;,&#125;;&lt;/script&gt;


컴포넌트가 최초로 렌더링될 때 호출된다.

renderTriggeredhttps://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#rendertriggered
&lt;template&gt;  &lt;button @click=&quot;plus&quot;&gt;Plus&lt;/button&gt;  &lt;div&gt;&#123;&#123; number &#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  data() &#123;    return &#123;      number: 0,    &#125;;  &#125;,  renderTriggered(&#123; key, target, type &#125;) &#123;    console.log(&#123; key, target, type &#125;);  &#125;,  methods: &#123;    plus() &#123;      this.number += 1;      /* renderTriggered 호출 */    &#125;,  &#125;,&#125;;&lt;/script&gt;
]]></content>
      <categories>
        <category>vue</category>
        <category>lifecycle</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>lifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Nuxt v2.15.8</title>
    <url>/vue/nuxt/</url>
    <content><![CDATA[
  https://ko.nuxtjs.org/api





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


Setuphttps://nuxtjs.org/docs/get-started/installation
Use NPXnpm install -global create-nuxt-appnpx create-nuxt-app project-name

Use NPMnpm init nuxt-app project-name

Commandhttps://ko.nuxtjs.org/guide/commands








nuxt
핫 리로딩 상태로 localhost:3000 에서 개발서버 시작


nuxt build
어플리케이션을 빌드하며, CSS 와 JS 를 최소화하는 작업을 진행 (프로덕션)


nuxt start
nuxt build 를 실행한 후에 프로덕션 모드로 서버를 시작


nuxt generate
어플리케이션을 빌드하고 모든 라우트를 HTML 파일로 생성 (정적 호스팅에 사용)


Confignuxt.config.jshttps://ko.nuxtjs.org/guide/configuration








build
생성 된 vendor.bundle.js 파일에 모듈을 추가하여 앱 번들의 크기를 줄임 (외부 모듈을 사용 할 때 유용)


cache
캐시된 컴포넌트를 사용하여 렌더링 성능을 향상


css
모든 페이지에서 전역으로 사용할 CSS 파일 &#x2F; 모듈 &#x2F; 라이브러리 파일을 설정


dev
개발 또는 프로덕션 모드를 정의


env
클라이언트 및 서버에서 사용 가능한 환경 변수


generate
HTML 파일로 변환할 모든 동적인 경로에 대한 각각의 params 값을 정의


head
모든 페이지에서 사용할 공통 메타를 정의


loading
기본적으로 불러올 loading 컴포넌트를 정의


mode
spa 를 선택하면 클라이언트에서만 동작하며 서버사이드 렌더링을 하지 않음 (기본값은 universal 이며 클라이언트사이드 렌더링과 서버사이드 렌더링을 병행)


plugins
어플리케이션을 인스턴스화 하기 전에 실행할 플러그인


rootDir
어플리케이션의 위치


router
vue-router 의 구성


srcDir
어플리케이션의 src 디렉토리


transition
페이지 transition 기능 정의


Aliases







~ or @
srcDir


~~ or @@
rootDir


extractCSShttps://ssr.vuejs.org/guide/css.html
module.exports = &#123;  build: &#123;    extractCSS: &#123;      allChunks: true,    &#125;,  &#125;,&#125;;

Structurehttps://ko.nuxtjs.org/guide/directory-structure








api
API 관련 스크립트를 포함


assets
LESS, SASS, Javascript 같은 컴파일되지 않은 에셋들을 포함


components
Vue 컴포넌트를 포함


directives
사용자 디렉티브를 포함


filters
필터 파일을 포함


layouts
애플리케이션의 레이아웃을 포함


locales
다국어 json 파일을 포함


middleware
애플리케이션의 미들웨어를 포함


models
API 모델을 포함


pages
애플리케이션의 뷰와 라우트를 포함


plugins
플러그인을 포함


script
스크립트 파일을 포함


static
정적 파일들을 포함 (/static/sample.jpg 는 /sample.jpg 로 연결)


store
Vuex Store 파일을 포함


.editorconfig
에디터 설정 파일


.eslintrc.js
자바스크립트 린트 설정 파일


.gitignore
깃 예외 설정 파일


app.html
기본 HTML 템플릿 파일


nuxt.config.js
Nuxt 의 사용자 정의 설정 파일


package.json
애플리케이션의 의존성과 스크립트를 포함하는 파일


Routinghttps://ko.nuxtjs.org/guide/routing

pages 디렉토리 내의 Vue 파일 구조를 기반으로 vue-router 를 자동으로 설정한다.

Static routingFlat


pages
index.vue
user
index.vue
one.vue







new VueRouter(&#123;  routes: [    &#123; name: &#x27;index&#x27;, path: &#x27;/&#x27;, component: &#x27;pages/index.vue&#x27; &#125;,    &#123; name: &#x27;user&#x27;, path: &#x27;/user&#x27;, component: &#x27;pages/user/index.vue&#x27; &#125;,    &#123; name: &#x27;user-one&#x27;, path: &#x27;/user/one&#x27;, component: &#x27;pages/user/one.vue&#x27; &#125;,  ],&#125;);

Nested


pages
users.vue
user
index.vue
_id.vue







new VueRouter(&#123;  routes: [    &#123; path: &#x27;/users&#x27;, component: &#x27;pages/users.vue&#x27;, children: [      &#123; path: &#x27;&#x27;, component: &#x27;pages/users/index.vue&#x27;, name: &#x27;users&#x27; &#125;,      &#123; path: &#x27;:id&#x27;, component: &#x27;pages/users/_id.vue&#x27;, name: &#x27;users-id&#x27; &#125;,    ] &#125;,  ],&#125;);

Dynamic RoutingFlat


pages
index.vue
_slug
index.vue
comments.vue


users
_id.vue







new VueRouter(&#123;  routes: [    &#123; name: &#x27;index&#x27;, path: &#x27;/&#x27;, component: &#x27;pages/index.vue&#x27; &#125;,    &#123; name: &#x27;slug&#x27;, path: &#x27;/:slug&#x27;, component: &#x27;pages/_slug/index.vue&#x27; &#125;,    &#123; name: &#x27;slug-comments&#x27;, path: &#x27;/:slug/comments&#x27;, component: &#x27;pages/_slug/comments.vue&#x27; &#125;,    &#123; name: &#x27;users-id&#x27;, path: &#x27;/users/:id?&#x27;, component: &#x27;pages/users/_id.vue&#x27; &#125;,  ],&#125;);

Nested


pages
index.vue
_category.vue
_category
index.vue
_subCategory.vue
_subCategory
index.vue
_id.vue









new VueRouter(&#123;  routes: [    &#123; path: &#x27;/&#x27;, component: &#x27;pages/index.vue&#x27;, name: &#x27;index&#x27; &#125;,    &#123; path: &#x27;/:category&#x27;, component: &#x27;pages/_category.vue&#x27;, children: [      &#123; path: &#x27;&#x27;, component: &#x27;pages/_category/index.vue&#x27;, name: &#x27;category&#x27; &#125;,      &#123; path: &#x27;:subCategory&#x27;, component: &#x27;pages/_category/_subCategory.vue&#x27;, children: [        &#123; path: &#x27;&#x27;, component: &#x27;pages/_category/_subCategory/index.vue&#x27;, name: &#x27;category-subCategory&#x27; &#125;,        &#123; path: &#x27;:id&#x27;, component: &#x27;pages/_category/_subCategory/_id.vue&#x27;, name: &#x27;category-subCategory-id&#x27; &#125;,      ] &#125;,    ] &#125;,  ],&#125;);

Storehttps://ko.nuxtjs.org/guide/vuex-store
/store/index.jsexport const state = () =&gt; (&#123;&#125;);export const mutations = &#123;&#125;;export const getters = &#123;&#125;;

Page keysasyncDatahttps://ko.nuxtjs.org/guide/async-data
export default &#123;  async asyncData(&#123; params &#125;) &#123;    const &#123; data &#125; = await axios.get(`https://my-api/posts/$&#123;params.id&#125;`);    return &#123; title: data.title &#125;;  &#125;,&#125;;

export default &#123;  async asyncData(&#123; req, res &#125;) &#123;    if (process.server) &#123;      return &#123; host: req.headers.host &#125;;    &#125;    return &#123;&#125;;  &#125;,&#125;;


스토어를 사용하지 않고 서버사이드에서 데이터를 가져오고 렌덩링 할 수 있다.애플리케이션 최초 로드 시 서버사이드에서 한번 호출되고, 이후 페이지 이동시 클라이언트 사이드에서 호출된다.
컴포넌트가 생성되기 전에 호출되므로 this 를 사용할 수 없다.컨텍스트를 첫번째 인자로 받고, 반환 값은 data 와 병합된다.

fetchhttps://ko.nuxtjs.org/api/pages-fetch

페이지가 렌더링되기 전에 스토어를 채우기 위해 사용되며, 구성 요소 데이터를 설정하지 않는다는 점을 제외하면 data 메서드와 같다.

headhttps://ko.nuxtjs.org/api/pages-head
/nuxt.config.jsmodule.exports = &#123;  head: &#123;    title: &#x27;vue-boilerplate&#x27;,    meta: [      &#123; charset: &#x27;utf-8&#x27; &#125;,      (process.env.DEVICE_ENV === &#x27;pc&#x27;) &amp;&amp; &#123; &#x27;http-equiv&#x27;: &#x27;X-UA-Compatible&#x27;, content: &#x27;IE=edge&#x27; &#125;,      &#123; name: &#x27;viewport&#x27;, content: &#x27;width=device-width, initial-scale=1, viewport-fit=cover, shrink-to-fit=no, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&#x27; &#125;,      &#123; hid: &#x27;description&#x27;, name: &#x27;description&#x27;, content: &#x27;project description&#x27; &#125;,    ],    script: [      &#123; src: &#x27;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js&#x27; &#125;,    ],    link: [      &#123; rel: &#x27;stylesheet&#x27;, href: &#x27;https://fonts.googleapis.com/css?family=Roboto&#x27; &#125;,    ],  &#125;,&#125;;

export default &#123;  head() &#123;    let user = this.user;    return &#123;      title: `$&#123;user.fullName&#125; @($&#123;user.userName&#125;) - Nuxt.js`,      meta: [        &#123;          hid: &#x27;description&#x27;,          name: &#x27;description&#x27;,          content: `$&#123;user.fullName&#125;&#x27;s public profile at Nuxt.js`,        &#125;,      ],      script: [        &#123; src: &#x27;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js&#x27; &#125;,      ],      link: [        &#123; rel: &#x27;stylesheet&#x27;, href: &#x27;https://fonts.googleapis.com/css?family=Roboto&#x27; &#125;,      ],    &#125;;  &#125;,&#125;;


vue-meta 를 사용하여 애플리케이션의 헤더와 html 속성을 업데이트 한다.

layouthttps://ko.nuxtjs.org/api/pages-layout

layouts 폴더에 정의된 레이아웃을 지정할 수 있다.

transitionhttps://ko.nuxtjs.org/api/pages-transition

페이지에 대한 특정 트랜지션을 설정한다.

scrollToTophttps://nuxtjs.org/docs/components-glossary/scrolltotop

페이지를 렌더링하기 전에 페이지를 맨 위로 스크롤할 것인지를 나타내며, 중첩 라우트를 위해 사용된다. (기본값 false)

validatehttps://nuxtjs.org/docs/components-glossary/validate
export default &#123;  validate(&#123; params &#125;) &#123;    return /^\d+$/.test(params.id); // Must be a number  &#125;,&#125;;


동적 라우트에 대한 유효성을 검사한다.

middlewarehttps://nuxtjs.org/examples/middlewares/router#router-middleware
/nuxt.config.jsmodule.exports = &#123;  router: &#123;    middleware: &#x27;stats&#x27;,  &#125;,&#125;;

export default &#123;  middleware: [&#x27;stats&#x27;],&#125;;


nuxt.config.js, 매칭된 레이아웃, 매칭된 페이지 순으로 페이지를 렌더링하기 전에 호출된다.

]]></content>
      <categories>
        <category>vue</category>
        <category>nuxt</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Options API v3.2.31</title>
    <url>/vue/options/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/api/options-api.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


DOMhttps://v3.ko.vuejs.org/api/options-dom.html
templatehttps://v3.ko.vuejs.org/api/options-dom.html#template
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  data() &#123;    return &#123;      number: 0,    &#125;;  &#125;,  template: `    &lt;div&gt;&#123;&#123; number &#125;&#125;&lt;/div&gt;  `,&#125;);

renderhttps://v3.ko.vuejs.org/api/options-dom.html#render
import &#123; h, createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  render() &#123;    return h(&#x27;div&#x27;, &#x27;text&#x27;);  &#125;,&#125;);

Assetshttps://v3.ko.vuejs.org/api/options-assets.html
directiveshttps://v3.ko.vuejs.org/guide/custom-directive.html
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  directives: &#123;    focus: &#123;      created(element, binding, vnode, prevVnode) &#123;&#125;,      /* 바인딩 된 엘리먼트의 부모 컴포넌트가 마운트되기 전에 호출 */      beforeMount() &#123;&#125;,      /* 바인딩 된 엘리먼트의 부모 컴포넌트가 마운트 될 때 호출 */      mounted(element, &#123; instance, value, oldValue, arg, modifiers, dir &#125;, vnode, prevNode) &#123;        element.focus();      &#125;,      /* 포함하고있는 컴포넌트의 VNode 가 업데이트되기 전에 호출 */      beforeUpdate() &#123;&#125;,      /* 포함하고있는 컴포넌트의 VNode 와 자식 VNode 가 업데이트 된 후 호출 */      updated() &#123;&#125;,      /* 바인딩된 엘리먼트의 부모 컴포넌트가 마운트 해제되기 전에 호출 */      beforeUnmount() &#123;&#125;,      /* 바인딩된 엘리먼트의 부모 컴포넌트가 마운트 해제 될 때 호출 */      unmounted() &#123;&#125;,    &#125;,  &#125;,&#125;);

componentshttps://v3.ko.vuejs.org/guide/component-basics.html
import &#123; createApp &#125; from &#x27;vue&#x27;;import ComponentName from &#x27;./components/ComponentName&#x27;;const app = createApp(&#123;  components: &#123;    ComponentName,  &#125;,&#125;);

Compositionhttps://v3.ko.vuejs.org/api/options-composition.html
mixinshttps://v3.ko.vuejs.org/api/options-composition.html#mixins
import &#123; createApp &#125; from &#x27;vue&#x27;;const mixin = &#123;  created() &#123;    console.log(&#x27;first&#x27;);  &#125;&#125;const app = createApp(&#123;  mixins: [mixin],  created() &#123;    console.log(&#x27;second&#x27;);  &#125;,&#125;);

extendshttps://v3.ko.vuejs.org/api/options-composition.html#extends
const ComponentA = &#123;&#125;;const ComponentB = &#123;  extends: ComponentA,&#125;;

provide &#x2F; injecthttps://v3.ko.vuejs.org/guide/component-provide-inject.html
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  inject: &#123;    key: &#123;      default() &#123;        return &#123; text: &#x27;&#x27; &#125;;      &#125;,    &#125;,  &#125;,  template: `    &lt;div&gt;&#123;&#123; key.text &#125;&#125;&lt;/div&gt;  `,&#125;);app.provide(&#x27;key&#x27;, &#123; text: &#x27;abc&#x27; &#125;);

setuphttps://v3.ko.vuejs.org/api/composition-api.html
&lt;template&gt;  &lt;div&gt;&#123;&#123; number &#125;&#125; &#123;&#123; object.text &#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123; ref, reactive, watchEffect &#125; from &#x27;vue&#x27;;export default &#123;  props: &#123;    age: 10,  &#125;,  setup(props, context) &#123;    const number = ref(0);    const object = reactive(&#123; text: &#x27;abc&#x27; &#125;);    console.log(props.age, context.attrs, context.slots, context.emit);    watchEffect(() =&gt; &#123;      console.log(props.age);    &#125;);    return &#123;      number,      object,    &#125;;  &#125;,&#125;;&lt;/script&gt;

Mischttps://v3.ko.vuejs.org/api/options-misc.html
namehttps://v3.ko.vuejs.org/api/options-misc.html#name
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  name: &#x27;abc&#x27;,&#125;);


name 을 사용하면 컴포넌트가 템플릿에서 자신을 재귀적으로 호출할 수 있도록 한다.vue-devtools 에서 디버깅할 때도 유리하다.

delimitershttps://v3.ko.vuejs.org/api/options-misc.html#delimiters
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  delimiters: [&#x27;&#123;&#123;&#x27;, &#x27;&#125;&#125;&#x27;],&#125;);

inheritAttrshttps://v3.ko.vuejs.org/api/options-misc.html#inheritattrs
import &#123; createApp &#125; from &#x27;vue&#x27;;const app = createApp(&#123;  inheritAttrs: false,  props: [&#x27;label&#x27;, &#x27;value&#x27;],  emits: [&#x27;input&#x27;],  template: `    &lt;label&gt;      &#123;&#123; label &#125;&#125;      &lt;input v-bind=&quot;$attrs&quot; :value=&quot;value&quot; @input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot; /&gt;    &lt;/label&gt;  `,&#125;);
]]></content>
      <categories>
        <category>vue</category>
        <category>options</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Plugin v3.2.31</title>
    <url>/vue/plugin/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/guide/plugins.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


Plugin example for vue 3MyPlugin/plugins/MyPlugin/index.jsimport template from &#x27;./template.vue&#x27;;export default &#123;  install: (app, options) =&gt; &#123;    /* console.log(app.config.globalProperties); */    app.provide(&#x27;options&#x27;, options);    app.component(&#x27;MyPlugin&#x27;, template);    /* app.directive(&#x27;my-directive&#x27;, &#123;&#125;); */    /* app.mixin(&#123;&#125;); */  &#125;,&#125;;

/plugins/MyPlugin/template.vue&lt;template&gt;  &lt;div class=&quot;my-plugin&quot;&gt;    &lt;button      type=&quot;button&quot;      :style=&quot;&#123; color: options.color &#125;&quot;      @click=&quot;onClick&quot;      @mouseover=&quot;$emit(&#x27;mouseOver&#x27;)&quot;      @mouseout=&quot;$emit(&#x27;mouseOut&#x27;)&quot;    &gt;      Test    &lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; inject, useAttrs &#125; from &#x27;vue&#x27;;const props = defineProps(&#123; color: String, &#x27;@click&#x27;: Function &#125;);const options = Object.assign(inject(&#x27;options&#x27;), props);const attrs = useAttrs();const emits = defineEmits([&#x27;mouseOver&#x27;, &#x27;mouseOut&#x27;]);const onClick = () =&gt; &#123;  console.log(&#x27;button click&#x27;);  /* console.log(attrs); */  /* emits(&#x27;mouseOver&#x27;); */  /* emits(&#x27;mouseOut&#x27;); */&#125;;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.my-plugin &#123;&#125;&lt;/style&gt;

Use/main.jsimport MyPlugin from &#x27;@/plugins/MyPlugin&#x27;;app.use(MyPlugin, &#123;  color: &#x27;red&#x27;,&#125;);

/App.vue&lt;template&gt;  &lt;MyPlugin    :color=&quot;&#x27;blue&#x27;&quot;    @mouseOver=&quot;onMouseOver&quot;    @mouseOut=&quot;onMouseOut&quot;  /&gt;&lt;/template&gt;&lt;script setup&gt;const onMouseOver = () =&gt; &#123;  console.log(&#x27;mouseover button&#x27;);&#125;;const onMouseOut = () =&gt; &#123;  console.log(&#x27;mouseout button&#x27;);&#125;;&lt;/script&gt;

ExamplesFile drop zonehttps://www.smashingmagazine.com/2022/03/drag-drop-file-uploader-vuejs-3
/components/DropZone.vue&lt;template&gt;  &lt;div    class=&quot;drop-zone&quot;    :data-active=&quot;active&quot;    @dragenter.prevent=&quot;setActive&quot;    @dragover.prevent=&quot;setActive&quot;    @dragleave.prevent=&quot;setInactive&quot;    @drop.prevent=&quot;onDrop&quot;  &gt;    &lt;label for=&quot;file-input&quot;&gt;      &lt;span v-if=&quot;active&quot;&gt;Drop Them Here to add them&lt;/span&gt;      &lt;span v-else&gt;Drag Your Files Here or &lt;em&gt;click here&lt;/em&gt; to select files&lt;/span&gt;      &lt;input type=&quot;file&quot; id=&quot;file-input&quot; multiple accept=&quot;.jpg,.png,.gif&quot; style=&quot;display: none;&quot; @change=&quot;onInputChange&quot; /&gt;    &lt;/label&gt;    &lt;ul class=&quot;list&quot; v-show=&quot;files.length&quot;&gt;      &lt;li v-for=&quot;file of files&quot; :key=&quot;file.id&quot; class=&quot;item&quot;&gt;        &lt;img :src=&quot;file.url&quot; :alt=&quot;file.file.name&quot; :title=&quot;file.file.name&quot; class=&quot;thumbnail&quot; /&gt;        &lt;button @click=&quot;removeFile(file)&quot; class=&quot;remove&quot;&gt;Remove&lt;/button&gt;        &lt;span v-show=&quot;file.status === &#x27;loading&#x27;&quot; class=&quot;status&quot;&gt;In Progress&lt;/span&gt;        &lt;span v-show=&quot;file.status === true&quot; class=&quot;status&quot;&gt;Uploaded&lt;/span&gt;        &lt;span v-show=&quot;file.status === false&quot; class=&quot;status&quot;&gt;Error&lt;/span&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref, onMounted, onUnmounted &#125; from &#x27;vue&#x27;;import useFileList from &#x27;./compositions/file-list&#x27;;const &#123; files, addFiles, removeFile &#125; = useFileList();const events = [&#x27;dragenter&#x27;, &#x27;dragover&#x27;, &#x27;dragleave&#x27;, &#x27;drop&#x27;];let active = ref(false);let timeout = null;const setActive = () =&gt; &#123;  active.value = true;  clearTimeout(timeout);&#125;;const setInactive = () =&gt; &#123;  timeout = setTimeout(() =&gt; &#123;    active.value = false;  &#125;, 50);&#125;;const onDrop = (event) =&gt; &#123;  setInactive();  addFiles([...event.dataTransfer.files]);&#125;;function onInputChange(event) &#123;  addFiles(event.target.files);  event.target.value = null;&#125;onMounted(() =&gt; &#123;  events.forEach((eventName) =&gt; &#123;    document.body.addEventListener(eventName, (event) =&gt; event.preventDefault());  &#125;);&#125;)onUnmounted(() =&gt; &#123;  events.forEach((eventName) =&gt; &#123;    document.body.removeEventListener(eventName, (event) =&gt; event.preventDefault());  &#125;);&#125;)&lt;/script&gt;&lt;style scoped lang=&quot;scss&quot;&gt;.drop-zone &#123;  padding: 50px;  background-color: #aaa;  &amp;[data-active=true] &#123;    background-color: #fff;  &#125;  .list &#123;    margin: 0;    padding: 0;    .item &#123;      overflow: hidden;      position: relative;      width: 100px;      aspect-ratio: 1/1;      .thumbnail &#123;        display: block;        object-fit: cover;        width: 100%;        height: 100%;      &#125;      .remove &#123;        position: absolute;        top: 0;        right: 0;      &#125;      .status &#123;        position: absolute;        bottom: 0;      &#125;    &#125;  &#125;&#125;&lt;/style&gt;

/compositions/file-list.jsimport &#123; ref &#125; from &#x27;vue&#x27;;export default function() &#123;  const files = ref([]);  function addFiles(newFiles) &#123;    let newUploadableFiles = [...newFiles].map((file) =&gt; new UploadableFile(file)).filter((file) =&gt; !fileExists(file.id));    files.value = files.value.concat(newUploadableFiles);    console.log(files);  &#125;  function fileExists(otherId) &#123;    return files.value.some((&#123; id &#125;) =&gt; id === otherId);  &#125;  function removeFile(file) &#123;    const index = files.value.indexOf(file);    if (index &gt; -1) files.value.splice(index, 1);  &#125;  return &#123; files, addFiles, removeFile &#125;;&#125;class UploadableFile &#123;  constructor(file) &#123;    this.file = file;    this.id = `$&#123;file.name&#125;-$&#123;file.size&#125;-$&#123;file.lastModified&#125;-$&#123;file.type&#125;`;    this.url = URL.createObjectURL(file);    this.status = null;  &#125;&#125;
]]></content>
      <categories>
        <category>vue</category>
        <category>plugin</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Reactivity v3.2.31</title>
    <url>/vue/reactivity/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/guide/reactivity-fundamentals.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


Basichttps://v3.ko.vuejs.org/api/basic-reactivity.html
reactivehttps://v3.ko.vuejs.org/api/basic-reactivity.html#reactive
const number = ref(10);const object = reactive(&#123; number &#125;); /* reactive 함수는 refs 를 깊게 래핑 해제 하지만 ref 의 반응성은 유지 */console.log(object.number === number.value); /* true */number.value++;console.log(number.value); /* 11 */console.log(object.number); /* 11 */object.number++;console.log(object.number); /* 12 */console.log(number.value); /* 12 */


반응형 변화는 깊게(deep) 적용되며 모든 중첩된 속성의 변화를 감지한다.

readonlyhttps://v3.ko.vuejs.org/api/basic-reactivity.html#readonly
const original = reactive(&#123; number: 0 &#125;);const copy = readonly(original);watchEffect(() =&gt; &#123;  console.log(copy.number);&#125;)original.number++; /* 원본을 변경하면 복사본에 의존하는 감시자가 트리거 */copy.number++; /* 복사본은 변경이 되지 않고, 경고가 발생 */


객체 (반응형 또는 일반객체) 또는 ref 를 가져와서 원본에 대한 읽기전용 프록시를 반환한다.

isProxyhttps://v3.ko.vuejs.org/api/basic-reactivity.html#isproxy

객체가 반응형 (reactive) 또는 읽기전용 (readonly) 으로 생성된 프록시인지 확인한다.

isReactivehttps://v3.ko.vuejs.org/api/basic-reactivity.html#isreactive
const plain = readonly(&#123; name: &#x27;abc&#x27; &#125;);console.log(isReactive(plain)); /* false */const state = reactive(&#123; name: &#x27;def&#x27; &#125;);console.log(isReactive(state)); /* true */const stateCopy = readonly(state);console.log(isReactive(stateCopy)); /* true */


객체가 반응형 (reactive) 으로 생성된 프록시인지 확인한다.

isReadOnlyhttps://v3.ko.vuejs.org/api/basic-reactivity.html#isreadonly

객체가 읽기전용 (readonly) 으로 생성된 프록시인지 확인한다.

toRawhttps://v3.ko.vuejs.org/api/basic-reactivity.html#toraw
const object = &#123;&#125;;const reactiveObject = reactive(object);console.log(toRaw(reactiveObject) === object); /* true */


프록시의 원시 (raw) 원본 객체를 반환한다.

markRawhttps://v3.ko.vuejs.org/api/basic-reactivity.html#markraw
const marked = markRaw(&#123;&#125;);console.log(isReactive(reactive(marked))); /* false */const state = reactive(&#123; marked &#125;);console.log(isReactive(state.marked)); /* false */


객체가 프록시로 변환되지 않도록 객체를 표시한다.

shallowReactivehttps://v3.ko.vuejs.org/api/basic-reactivity.html#shallowreactive
const state = shallowReactive(&#123;  first: 1,  nested: &#123;    second: 2,  &#125;,&#125;);state.first++; /* 반응 */state.nested.second++; /* 무 반응 */isReactive(state.nested); /* false */


고유한 속성의 반응성을 추적하지만, 중첩된 객체의 깊은 반응 변환은 수행하지 않는 반응 프록시를 생성한다.

shallowReadonlyhttps://v3.ko.vuejs.org/api/basic-reactivity.html#shallowreadonly
const state = shallowReadonly(&#123;  first: 1,  nested: &#123;    second: 2,  &#125;,&#125;);state.first++; /* 변경 안됨 */state.nested.second++; /* 변경 됨 */isReadonly(state.nested); /* false */


고유한 속성을 읽기 전용으로 만들지만, 중첩된 객체의 깊은 읽기전용 변환을 수행하지 않는 프록시를 생성한다.

Refshttps://v3.ko.vuejs.org/api/refs-api.html
refhttps://v3.ko.vuejs.org/api/refs-api.html#ref
const number = ref(0);console.log(number.value); /* 0 */number.value++;console.log(number.value); /* 1 */


내부에 값을 가지면서 반응적이고 변경 가능한 ref 객체를 반환한다.

unrefhttps://v3.ko.vuejs.org/api/refs-api.html#unref

주어진 인자가 ref 라면 내부 값을 반환하고, 아니라면 주어진 인자를 반환한다.

toRefhttps://v3.ko.vuejs.org/api/refs-api.html#toref

소스가되는 리액티트 객체의 속성을 가져와 ref 를 생성한다.

const state = reactive(&#123; number: 0 &#125;);const numberRef = toRef(state, &#x27;number&#x27;);numberRef.value++;console.log(state.number); /* 2 */state.number++;console.log(numberRef.value); /* 3 */

setup(props) &#123;  console.log(toRef(props, &#x27;number&#x27;));&#125;

toRefshttps://v3.ko.vuejs.org/api/refs-api.html#torefs
const state = reactive(&#123; number: 0 &#125;);const stateAsRefs = toRefs(state);state.number++;console.log(stateAsRefs.number.value); /* 1 */stateAsRefs.number.value++;console.log(state.number); /* 2 */

setup() &#123;  const &#123; number &#125; = toRefs(state);  return &#123; number &#125;;&#125;


리액티브 객체를 일반 객체로 변환하여 반환하지만, 반환되는 객체의 각 프로퍼티들이 ref 로 원래의 리액티브 객체 프로퍼티로 연결된다.

isRefhttps://v3.ko.vuejs.org/api/refs-api.html#isref

주어진 값이 ref 객체인지 확인한다.

customRefhttps://v3.ko.vuejs.org/api/refs-api.html#customref
function useDebouncedRef(value, delay = 200) &#123;  let timeout;  return customRef((track, trigger) =&gt; &#123;    return &#123;      get() &#123;        track();        return value;      &#125;,      set(newValue) &#123;        clearTimeout(timeout);        timeout = setTimeout(() =&gt; &#123;          value = newValue;          trigger();        &#125;, delay);      &#125;,    &#125;;  &#125;);&#125;export default &#123;  setup() &#123;    return &#123;      debounceText: useDebouncedRef(&#x27;abc&#x27;);    &#125;;  &#125;,&#125;;


종속성 추적 및 업데이트 트리거를 명시적으로 커스터마이징 할수 있는 ref 를 생성한다.

shallowRefhttps://v3.ko.vuejs.org/api/refs-api.html#shallowref
const sr = shallowRef(&#123;&#125;);sr.value = &#123;&#125;;isReactive(sr.value); /* false */


자신의 value 가 변경되는 것은 추적하지만, value 값 자체를 반응적으로 만들지 않는 ref 를 생성한다.

triggerRefhttps://v3.ko.vuejs.org/api/refs-api.html#triggerref
const shallow = shallowRef(&#123; text: &#x27;abc&#x27; &#125;);watchEffect(() =&gt; &#123;  console.log(shallow.value.text);&#125;);shallow.value.text = &#x27;def&#x27;;triggerRef(shallow); /* def */


shallowRef 에 연결된 모든 이펙트를 수동으로 실행한다.

computed &#x2F; watchhttps://v3.ko.vuejs.org/api/computed-watch-api.html
computedhttps://v3.ko.vuejs.org/api/computed-watch-api.html#computed
const number = ref(1);const plus = computed(() =&gt; number.value + 1);console.log(plus.value); /* 2 */plus.value++; /* 에러 */

const number = ref(1);const plus = computed(&#123;  get: () =&gt; number.value + 1,  set: (v) =&gt; &#123;    number.value = v - 1;  &#125;,&#125;);plus.value = 1;console.log(number.value); /* 0 */


getter 함수를 가져와 getter 에서 반환된 값에 대해 변경 불가능한 반응 ref 객체를 반환한다.

watchhttps://v3.ko.vuejs.org/api/computed-watch-api.html#watch
const number = ref(0);watch(number, (number, prevNumber) =&gt; &#123;&#125;);

const state = reactive(&#123; number: 0, text: &#x27;abc&#x27; &#125;);watch(() =&gt; state.number, (number, prevNumber) =&gt; &#123;&#125;);watch(() =&gt; [props.number, props.text], ([number, text], [prevNumber, prevText]) =&gt; &#123;&#125;);


명시한 반응성 데이터가 변할 때 옵션에 따라 실행한다.이전 값을 알 수 있다.

watchEffecthttps://v3.ko.vuejs.org/guide/reactivity-computed-watchers.html#watcheffect
const number = ref(0);const str = ref(&#x27;abc&#x27;);watchEffect(() =&gt; &#123;  console.log(number.value);  console.log(str.value);&#125;);


내부에 사용 된 반응성 데이터가 변할 때 즉시 실행한다.이전 값을 알 수 없다.

]]></content>
      <categories>
        <category>vue</category>
        <category>reactivity</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Router v4.0.12</title>
    <url>/vue/router/</url>
    <content><![CDATA[
  https://router.vuejs.org





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


Setupnpm install --save vue-router@4

Modulesmain/main.jsimport &#123; createApp &#125; from &#x27;vue&#x27;;import router from &#x27;./router&#x27;;import App from &#x27;./App.vue&#x27;;const app = createApp(App);app.use(router);app.mount(&#x27;#app&#x27;);

router/router/index.jsimport &#123; createRouter, createWebHistory &#125; from &#x27;vue-router&#x27;;import routes from &#x27;./routes&#x27;;export default createRouter(&#123;  history: createWebHistory(), /* createWebHashHistory() */  linkActiveClass: &#x27;active&#x27;,  routes,  scrollBehavior(to, from, savedPosition) &#123;    return new Promise((resolve, reject) =&gt; &#123;      setTimeout(() =&gt; &#123;        if (savedPosition) &#123;          resolve(savedPosition);        &#125; else &#123;          resolve(&#123; el: &#x27;#main&#x27;, top: 0, behavior: &#x27;smooth&#x27; &#125;);        &#125;      &#125;, 500);    &#125;);  &#125;&#125;);

routes/router/routes.jsimport &#123; defineComponent &#125; from &#x27;vue&#x27;;import Home from &#x27;@/components/Home.vue&#x27;;const NotFound = defineComponent(&#123;  template: &#x27;&lt;div&gt;Not Found&lt;/div&gt;&#x27;,&#125;);const routes = [  &#123; path: &#x27;/&#x27;, redirect: &#x27;/home&#x27; &#125;,  &#123; path: &#x27;/home&#x27;, name: &#x27;home&#x27;, component: Home, meta: &#123; transition: &#x27;slide-left&#x27; &#125; &#125;,  /* &#123; path: &#x27;/post/:id&#x27;, props: true &#125;, */  /* &#123; path: &#x27;/parent&#x27;, children: [ &#123; path: &#x27;children&#x27; &#125; ] &#125;, */  &#123; path: &#x27;/:catchAll(.*)+&#x27;, component: NotFound &#125;,  /* &#123; path: &#x27;/:pathMatch(.*)*&#x27;, component: NotFound &#125;, */];export default routes;









path
라우트 경로


redirect
path 로 들어온 URL 을 다른 URL 로 전달


alias
alias 혹은 path 의 URL 이 active 되면 두 경로 모두 active 되었다고 판단


name
path 의 이름을 설정


beforeEnter(to, from, next)
라우팅이 발생되기 전 호출


props
전달인자를 속성으로 변경


components
보여질 컴포넌트 설정


meta
메타 정보 정의


children
중첩 라우팅


App/App.vue&lt;template&gt;  &lt;Navigation /&gt;  &lt;RouterView v-slot=&quot;&#123; Component, route &#125;&quot;&gt;    &lt;transition name=&quot;route.meta.transition || &#x27;fade&#x27;&quot;&gt;      &lt;component :is=&quot;Component&quot; /&gt;    &lt;/transition&gt;  &lt;/RouterView&gt;&lt;/template&gt;&lt;script&gt;import Navigation from &#x27;@/components/Navigation.vue&#x27;;export default &#123;  name: &#x27;App&#x27;,  components: &#123;    Navigation,  &#125;,&#125;;&lt;/script&gt;

Navigation/components/Navigation.vue&lt;template&gt;  &lt;nav&gt;    &lt;ul&gt;      &lt;li v-for=&quot;item in menu&quot;&gt;        &lt;RouterLink :to=&quot;item.path&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/RouterLink&gt;      &lt;/li&gt;    &lt;/ul&gt;  &lt;/nav&gt;&lt;/template&gt;&lt;script&gt;import routes from &#x27;@/router/routes&#x27;;export default &#123;  name: &#x27;Navigation&#x27;,  setup() &#123;    const menu = routes.filter((&#123; name &#125;) =&gt; name !== undefined);    return &#123; menu &#125;;  &#125;,&#125;;&lt;/script&gt;

Home/components/Home.vue&lt;template&gt;  &lt;div&gt;Home&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &#x27;Home&#x27;,  async beforeRouteUpdate(to, from) &#123;&#125;,  beforeMount() &#123;    console.log(this.$route.params);  &#125;,  methods: &#123;    moveRoute() &#123;      /* this.$router.go(1); */      /* this.$router.go(-1); */      /* this.$router.push(&#x27;/path&#x27;); */      /* this.$router.push(&#123; path: &#x27;/path&#x27; &#125;); */      this.$router.push(&#123;        name: &#x27;name&#x27;,        params: &#123; pathMatch: this.$route.path.substring(1).split(&#x27;/&#x27;) &#125;,        query: this.$route.query,        hash: this.$route.hash,        replace: true,      &#125;);    &#125;,  &#125;,&#125;;&lt;/script&gt;
]]></content>
      <categories>
        <category>vue</category>
        <category>router</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Vuex v4.0.2</title>
    <url>/vue/vuex/</url>
    <content><![CDATA[
  https://vuex.vuejs.org





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


Setupnpm install --save vuex@next

Modulesmain/main.jsimport &#123; createApp &#125; from &#x27;vue&#x27;;import store from &#x27;./store&#x27;;const app = createApp();app.use(store);app.mount(&#x27;#app&#x27;);

store index/store/index.jsimport &#123; createStore, createLogger &#125; from &#x27;vuex&#x27;;import counter from &#x27;./modules/counter&#x27;;const debug = process.env.NODE_ENV !== &#x27;production&#x27;;export default createStore(&#123;  strict: debug,  plugins: debug ? [createLogger()] : [],  modules: &#123;    counter,  &#125;,&#125;);

store module/store/modules/counter.jsconst initial = (() =&gt; &#123;  return &#123;    count: 0,  &#125;;&#125;);const counter = &#123;  namespaced: true,  state: initial(),  getters: &#123;    DOUBLE_COUNT(state, getters, rootState) &#123;      return state.count * 2;    &#125;,  &#125;,  mutations: &#123;    INCREMENT(state) &#123;      state.count++;    &#125;,  &#125;,  actions: &#123;    INCREMENT_IF_ODD_ON_ROOT_SUM(state, commit, rootState) &#123;      return new Promise((resolve, reject) =&gt; &#123;        setTimeout(() =&gt; &#123;          if ((state.count + rootState.count) % 2 === 1) &#123;            commit(&#x27;INCREMENT&#x27;);            resolve();          &#125;        &#125;, 1000);      &#125;);    &#125;,    OTHER(&#123; dispatch &#125;) &#123;      dispatch(&#x27;globalAction&#x27;, null, &#123; root: true &#125;);    &#125;,  &#125;,&#125;;export default counter;

ComponentVue 2import &#123; mapState, mapGetters, mapMutations, mapActions &#125; from &#x27;vuex&#x27;;export default &#123;  computed: &#123;    ...mapState(&#123;      counter: (&#123; counter &#125;) =&gt; counter,    &#125;),    ...mapGetters(&#123;      DOUBLE_COUNT: &#x27;counter/DOUBLE_COUNT&#x27;,    &#125;),  &#125;,  methods: &#123;    ...mapMutations(&#123;      INCREMENT: &#x27;counter/INCREMENT&#x27;,    &#125;),    ...mapActions(&#123;      INCREMENT_IF_ODD_ON_ROOT_SUM: &#x27;counter/INCREMENT_IF_ODD_ON_ROOT_SUM&#x27;,    &#125;),  &#125;,&#125;;

Vue 3import &#123; computed &#125; from &#x27;vue&#x27;;import &#123; useStore &#125; from &#x27;vuex&#x27;;export default &#123;  setup() &#123;    const store = useStore();    const count = computed(() =&gt; store.state.counter.count);    const DOUBLE_COUNT = computed(() =&gt; store.getters[&#x27;counter/DOUBLE_COUNT&#x27;]);    const INCREMENT = () =&gt; store.commit(&#x27;counter/INCREMENT&#x27;);    return &#123; count, DOUBLE_COUNT, INCREMENT &#125;;  &#125;,&#125;;
]]></content>
      <categories>
        <category>vue</category>
        <category>vuex</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>state</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Setup v3.2.31</title>
    <url>/vue/setup/</url>
    <content><![CDATA[
  https://v3.ko.vuejs.org/guide/installation.html





hljs.registerLanguage('vue', window.hljsDefineVue);
hljs.initHighlightingOnLoad();


SetupUse vite-appnpm init @vitejs/app project-name

Use NPMnpm install --save vue@next

Use CLInpm install -global @vue/clivue create project-name

ConfigAlias/vite.config.jsimport &#123; defineConfig &#125; from &#x27;vite&#x27;;import vue from &#x27;@vitejs/plugin-vue&#x27;;import path from &#x27;path&#x27;;export default defineConfig(&#123;  resolve: &#123;    alias: &#123;      &#x27;@&#x27;: path.resolve(__dirname, &#x27;./src/&#x27;),    &#125;,  &#125;,  plugins: [vue()],&#125;);

/webstorm.config.jsSystem.config(&#123;  &#x27;paths&#x27;: &#123;    &#x27;@/*&#x27;: &#x27;./src/*&#x27;,  &#125;,&#125;);

Sassnpm install --save-dev sass

Proxy/vue.config.jsconst &#123; defineConfig &#125; = require(&#x27;@vue/cli-service&#x27;);module.exports = defineConfig(&#123;  devServer: &#123;    devMiddleware: &#123;      index: false, /* specify to enable root proxying */    &#125;,    proxy: &#123;      &#x27;^/&#x27;: &#123;        target: &#x27;http://localhost:4000/&#x27;,      &#125;,    &#125;,  &#125;,&#125;);

Buildhttps://router.vuejs.org/guide/essentials/history-mode.html

history 모드 적용 후 새로고침 동작이 잘 되려면 서버에 추가 설정을 해야 한다.

Vue SPA hash



dev
build



Static URL
동작함
동작함


Dynamic URL
동작함
동작함


Vue SPA history



dev
build



Static URL
동작함
동작하지 않음


Dynamic URL
동작함
동작하지 않음


Nuxt SPA hash



dev
build



Static URL
동작함
동작함


Dynamic URL
동작함
동작함


Nuxt SPA history



dev
build



Static URL
동작함
동작함


Dynamic URL
동작함
동작하지 않음


]]></content>
      <categories>
        <category>vue</category>
        <category>setup</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
